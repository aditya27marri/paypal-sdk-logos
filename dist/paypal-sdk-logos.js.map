{"version":3,"sources":["webpack://paypalLogos/webpack/universalModuleDefinition","webpack://paypalLogos/webpack/bootstrap","webpack://paypalLogos/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://paypalLogos/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","webpack://paypalLogos/./node_modules/jsx-pragmatic/src/constants.js","webpack://paypalLogos/./node_modules/jsx-pragmatic/src/node.js","webpack://paypalLogos/./node_modules/jsx-pragmatic/src/renderers/dom.js","webpack://paypalLogos/./node_modules/jsx-pragmatic/src/util.js","webpack://paypalLogos/./node_modules/jsx-pragmatic/src/renderers/html.js","webpack://paypalLogos/./node_modules/cross-domain-utils/src/constants.js","webpack://paypalLogos/./node_modules/cross-domain-utils/src/utils.js","webpack://paypalLogos/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://paypalLogos/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://paypalLogos/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://paypalLogos/./node_modules/belter/src/util.js","webpack://paypalLogos/./node_modules/belter/src/dom.js","webpack://paypalLogos/./src/constants.js","webpack://paypalLogos/./src/lib/components.jsx","webpack://paypalLogos/./src/lib/util.js","webpack://paypalLogos/./src/logos/bancontact/logo.jsx","webpack://paypalLogos/./node_modules/@paypal/sdk-constants/src/locale.js","webpack://paypalLogos/./node_modules/@paypal/sdk-constants/src/funding.js","webpack://paypalLogos/./src/logos/card/amex/logo.jsx","webpack://paypalLogos/./src/logos/card/discover/logo.jsx","webpack://paypalLogos/./src/logos/card/elo/logo.jsx","webpack://paypalLogos/./src/logos/card/hiper/logo.jsx","webpack://paypalLogos/./src/logos/card/jcb/logo.jsx","webpack://paypalLogos/./src/logos/card/mastercard/logo.jsx","webpack://paypalLogos/./src/logos/card/visa/logo.jsx","webpack://paypalLogos/./src/logos/credit/logo.jsx","webpack://paypalLogos/./src/logos/eps/logo.jsx","webpack://paypalLogos/./src/logos/giropay/logo.jsx","webpack://paypalLogos/./src/logos/ideal/logo.jsx","webpack://paypalLogos/./src/logos/mybank/logo.jsx","webpack://paypalLogos/./src/logos/p24/logo.jsx","webpack://paypalLogos/./src/logos/paypal/logo.jsx","webpack://paypalLogos/./src/logos/sepa/logo.jsx","webpack://paypalLogos/./src/logos/sofort/logo.jsx","webpack://paypalLogos/./src/logos/venmo/logo.jsx","webpack://paypalLogos/./src/logos/itau/logo.jsx","webpack://paypalLogos/./src/logos/wechatpay/logo.jsx","webpack://paypalLogos/./src/logos/zimpler/logo.jsx","webpack://paypalLogos/./src/logos/payu/logo.jsx","webpack://paypalLogos/./src/logos/verkkopankki/logo.jsx","webpack://paypalLogos/./src/logos/blik/logo.jsx","webpack://paypalLogos/./src/logos/trustly/logo.jsx","webpack://paypalLogos/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","NODE_TYPE","ELEMENT","TEXT","COMPONENT","FRAGMENT","renderChildren","children","renderer","result","_i2","renderedChild","render","Array","isArray","_i4","subchild","push","ElementNode","props","type","onRender","_proto","prototype","el","FragmentNode","TextNode","text","ComponentNode","component","_proto4","renderComponent","child","normalizeChildren","normalizeChild","_i6","_i8","_normalizeChildren2","TypeError","node","element","_len","_key","ELEMENT_TAG","ELEMENT_PROP","ADD_CHILDREN","_ADD_CHILDREN","firstChild","Error","addEventListener","win","contentWindow","doc","document","docElement","documentElement","removeChild","opts","_opts$doc","domRenderer","createTextNode","createTextElement","createElement","_Object$keys2","prop","val","match","slice","toLowerCase","setAttribute","toString","tagName","id","replace","charAt","Math","floor","random","addProps","html","innerHTML","window","_el$querySelectorAll2","querySelectorAll","script","parentNode","newScript","textContent","replaceChild","fixScripts","addChildren","dom","appendChild","_node$renderChildren2","INNER_HTML","SELF_CLOSING_TAGS","br","htmlEncode","PROTOCOL","MOCK","FILE","ABOUT","IE_WIN_ACCESS_ERROR","isAboutProtocol","location","protocol","canReadFromWindow","err","getActualDomain","parent","getParent","host","getDomain","domain","mockDomain","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","desc","getOwnPropertyDescriptor","isActuallySameDomain","isSameDomain","mockclosed","top","iframeIndex","collection","item","safeIndexOf","frame","ownerDocument","contains","isFrameWindowClosed","isWindow","obj","Window","__cross_domain_utils_window_check__","counter","Date","now","CrossDomainSafeWeakMap","weakmap","values","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","splice","isSafeToReadWrite","entry","writable","index","has","undefined","getOrSet","svgToBase64","svg","str","btoa","Buffer","from","base64encode","capitalizeFirstLetter","string","toUpperCase","LOGO","PP","PAYPAL","VENMO","ITAU","CREDIT","IDEAL","ELV","SEPA","BANCONTACT","GIROPAY","SOFORT","EPS","MYBANK","P24","ZIMPLER","WECHATPAY","PAYU","VERKKOPANKKI","BLIK","TRUSTLY","LOGO_COLOR","BLUE","BLACK","WHITE","DEFAULT","LOGO_CLASS","CARD","SVG","otherProps","htmlRenderer","concat","join","renderedProps","filter","map","renderedChildren","node_node","src","SVGLogo","_ref","alt","logoColor","class","SVGCardLogo","_ref2","getLogoColors","logoColorMap","colors","LOGO_COLORS","_LOGO_COLORS","primary","secondary","BancontactLogo","_ref$logoColor","_getLogoColors","version","x","y","width","height","viewBox","style","xmlns","transform","fill","COUNTRY","AD","AE","AG","AI","AL","AM","AN","AO","AR","AT","AU","AW","AZ","BA","BB","BE","BF","BG","BH","BI","BJ","BM","BN","BO","BR","BS","BT","BW","BY","BZ","CA","CD","CG","CH","CI","CK","CL","CM","CN","CO","CR","CV","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GI","GL","GM","GN","GP","GR","GT","GW","GY","HK","HN","HR","HU","ID","IE","IL","IN","IS","IT","JM","JO","JP","KE","KG","KH","KI","KM","KN","KR","KW","KY","KZ","LA","LC","LI","LK","LS","LT","LU","LV","MA","MC","MD","ME","MG","MH","MK","ML","MN","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PL","PM","PN","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","ST","SV","SZ","TC","TD","TG","TH","TJ","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","VA","VC","VE","VG","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW","_COUNTRY_LANGS","VISA","MASTERCARD","AMEX","DISCOVER","HIPER","ELO","JCB","CUP","AmexLogo","_temp","preserveAspectRatio","DiscoverLogo","gradientUnits","x1","y1","x2","y2","gradientTransform","offset","stop-color","cx","cy","stop-opacity","opacity","enable-background","EloLogo","HiperLogo","JcbLogo","patternUnits","MastercardLogo","VisaLogo","logo_LOGO_COLORS","CreditLogo","locale","country","eps_logo_LOGO_COLORS","EpsLogo","points","stroke","stroke-width","fill-rule","mask","giropay_logo_LOGO_COLORS","tertiary","GiropayLogo","ideal_logo_LOGO_COLORS","IdealLogo","mybank_logo_LOGO_COLORS","MybankLogo","p24_logo_LOGO_COLORS","P24Logo","paypal_logo_LOGO_COLORS","PayPalLogo","PPLogo","_ref2$logoColor","sepa_logo_LOGO_COLORS","main","card","SepaLogo","sofort_logo_LOGO_COLORS","SofortLogo","venmo_logo_LOGO_COLORS","VenmoLogo","itau_logo_LOGO_COLORS","ItauLogo","wechatpay_logo_LOGO_COLORS","WechatpayLogo","zimpler_logo_LOGO_COLORS","ZimplerLogo","payu_logo_LOGO_COLORS","quaternary","PayuLogo","verkkopankki_logo_LOGO_COLORS","quinary","senary","VerkkopankkiLogo","href","blik_logo_LOGO_COLORS","BlikLogo","fx","fy","trustly_logo_LOGO_COLORS","TrustlyLogo","__webpack_exports__"],"mappings":"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","file":"paypal-sdk-logos.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"paypalLogos\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"paypalLogos\"] = factory();\n\telse\n\t\troot[\"paypalLogos\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","/* @flow */\n\nexport const NODE_TYPE = {\n    ELEMENT:   ('element' : 'element'),\n    TEXT:      ('text' : 'text'),\n    COMPONENT: ('component' : 'component'),\n    FRAGMENT:  ('fragment' : 'fragment')\n};\n","/* @flow */\n\nimport { NODE_TYPE } from './constants';\n\nexport type NodePropsType = {\n    [string] : any // eslint-disable-line flowtype/no-weak-types\n};\n\nexport type EmptyProps = {||};\n\nexport type NodeRenderer<N, O> = (N) => O;\nexport type NodeRendererFactory<L, N, O> = (L) => NodeRenderer<N, O>;\n\nexport type NodeType = ElementNode | TextNode | FragmentNode | ComponentNode<*>; // eslint-disable-line no-use-before-define\nexport type ChildNodeType = ElementNode | TextNode | ComponentNode<*>; // eslint-disable-line no-use-before-define\nexport type ChildType = ChildNodeType | string | $ReadOnlyArray<ChildType>;\nexport type ChildrenType = $ReadOnlyArray<ChildNodeType>;\nexport type NullableChildType = $ReadOnlyArray<ChildType> | ChildNodeType | string | null | void;\nexport type NullableChildrenType = $ReadOnlyArray<NullableChildrenType | ChildNodeType | string | null | void>;\n\nexport type ComponentFunctionType<P> = (P, ChildrenType) => NullableChildType;\n\nexport type CreateElementNode<P : NodePropsType> = (string, P | null, ...NullableChildrenType) => ElementNode; // eslint-disable-line no-use-before-define\nexport type CreateComponentNode<P : NodePropsType> = (ComponentFunctionType<P>, P | null, ...NullableChildrenType) => ComponentNode<P>; // eslint-disable-line no-use-before-define\nexport type CreateNode<P : NodePropsType> = CreateElementNode<P> & CreateComponentNode<P>;\n\nfunction renderChildren<T>(children : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>>, renderer : NodeRenderer<*, *>) : $ReadOnlyArray<T> { // eslint-disable-line no-use-before-define\n    const result = [];\n\n    for (const child of children) {\n        const renderedChild = child.render(renderer);\n\n        if (!renderedChild) {\n            continue;\n        } else if (Array.isArray(renderedChild)) {\n            for (const subchild of renderedChild) {\n                if (subchild) {\n                    result.push(subchild);\n                }\n            }\n        } else {\n            result.push(renderedChild);\n        }\n    }\n\n    return result;\n}\n\nexport class ElementNode {\n    type : (typeof NODE_TYPE.ELEMENT) = NODE_TYPE.ELEMENT\n\n    name : string\n    props : NodePropsType\n    children : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>> // eslint-disable-line no-use-before-define\n    onRender : ?<T>(T) => void // eslint-disable-line no-undef\n\n    constructor(name : string, props : NodePropsType, children : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>>) { // eslint-disable-line no-use-before-define\n        this.name = name;\n        this.props = props;\n        this.children = children;\n\n        const onRender = props.onRender;\n        if (typeof onRender === 'function') {\n            this.onRender = onRender;\n            delete props.onRender;\n        }\n    }\n\n    render<T>(renderer : NodeRenderer<*, *>) : T {\n        const el = renderer(this);\n        if (this.onRender) {\n            this.onRender(el);\n        }\n        return el;\n    }\n\n    renderChildren<T>(renderer : NodeRenderer<*, *>) : $ReadOnlyArray<T> {\n        return renderChildren(this.children, renderer);\n    }\n}\n\nexport class FragmentNode {\n    type : (typeof NODE_TYPE.FRAGMENT) = NODE_TYPE.FRAGMENT\n\n    children : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>> // eslint-disable-line no-use-before-define\n\n    constructor(children : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>>) { // eslint-disable-line no-use-before-define\n        this.children = children;\n    }\n\n    render<T>(renderer : NodeRenderer<*, *>) : $ReadOnlyArray<T> {\n        return renderChildren(this.children, renderer);\n    }\n}\n\nexport class TextNode {\n    type : (typeof NODE_TYPE.TEXT) = NODE_TYPE.TEXT\n\n    text : string\n\n    constructor(text : string) {\n        this.text = text;\n    }\n\n    render<T>(renderer : NodeRenderer<*, *>) : T {\n        return renderer(this);\n    }\n}\n\nexport class ComponentNode<P : NodePropsType> {\n    type : (typeof NODE_TYPE.COMPONENT) = NODE_TYPE.COMPONENT\n\n    component : ComponentFunctionType<P>\n    props : NodePropsType\n    children : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>>\n\n    constructor(component : ComponentFunctionType<P>, props : NodePropsType, children : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>>) {\n        this.component = component;\n        this.props = props;\n        this.children = children;\n    }\n\n    renderComponent(renderer : NodeRenderer<*, *>) : * {\n        // $FlowFixMe\n        const props : P = this.props;\n        const child = normalizeChild(this.component(props, this.children)); // eslint-disable-line no-use-before-define\n        if (child) {\n            return child.render(renderer);\n        }\n    }\n\n    render<T>(renderer : NodeRenderer<*, *>) : T {\n        return renderer(this);\n    }\n\n    renderChildren<T>(renderer : NodeRenderer<*, *>) : $ReadOnlyArray<T> {\n        return renderChildren(this.children, renderer);\n    }\n}\n\nfunction normalizeChildren(children : NullableChildrenType) : $ReadOnlyArray<ElementNode | TextNode | ComponentNode<*>> {\n    const result = [];\n\n    for (const child of children) {\n        if (!child) {\n            continue;\n        } else if (typeof child === 'string') {\n            result.push(new TextNode(child));\n        } else if (Array.isArray(child)) {\n            for (const subchild of normalizeChildren(child)) {\n                result.push(subchild);\n            }\n        } else if (child && (child.type === NODE_TYPE.ELEMENT || child.type === NODE_TYPE.TEXT || child.type === NODE_TYPE.COMPONENT)) {\n            result.push(child);\n    \n        } else {\n            throw new TypeError(`Unrecognized node type: ${ typeof child }`);\n        }\n    }\n\n    return result;\n}\n\nfunction normalizeChild(child) : ElementNode | TextNode | ComponentNode<*> | FragmentNode | void {\n    const children = normalizeChildren(Array.isArray(child) ? child : [ child ]);\n\n    if (children.length === 1) {\n        return children[0];\n    } else if (children.length > 1) {\n        return new FragmentNode(children);\n    }\n}\n\nexport const node : CreateNode<*> = (element, props, ...children) => {\n    // $FlowFixMe\n    props = props || {};\n    children = normalizeChildren(children);\n\n    if (typeof element === 'string') {\n        // $FlowFixMe\n        return new ElementNode(element, props, children);\n    }\n    \n    if (typeof element === 'function') {\n        // $FlowFixMe\n        return new ComponentNode(element, props, children);\n    }\n\n    throw new TypeError(`Expected jsx element to be a string or a function`);\n};\n\nexport const Fragment : ComponentFunctionType<EmptyProps> = (props : NodePropsType, children : ChildrenType) : NullableChildType => {\n    if (props && Object.keys(props).length) {\n        throw new Error(`Do not pass props to Fragment`);\n    }\n\n    return children;\n};\n","/* @flow */\n\nimport { ComponentNode, TextNode, type NodeRenderer, ElementNode } from '../node';\nimport { NODE_TYPE } from '../constants';\nimport { uniqueID } from '../util';\n\ntype DomNodeRenderer = NodeRenderer<ElementNode, HTMLElement>;\ntype DomTextRenderer = NodeRenderer<TextNode, Text>;\ntype DomComponentRenderer = NodeRenderer<ComponentNode<*>, HTMLElement | TextNode | $ReadOnlyArray<HTMLElement | TextNode> | void>;\ntype DomRenderer = DomComponentRenderer & DomNodeRenderer & DomTextRenderer;\n\nconst ELEMENT_TAG = {\n    HTML:    'html',\n    IFRAME:  'iframe',\n    SCRIPT:  'script',\n    NODE:    'node',\n    DEFAULT: 'default'\n};\n\nconst ELEMENT_PROP = {\n    ID:         'id',\n    INNER_HTML: 'innerHTML',\n    EL:         'el'\n};\n\nfunction fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (const script of el.querySelectorAll('script')) {\n        const parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        const newScript = doc.createElement('script');\n        // $FlowFixMe\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\nfunction createElement(doc : Document, node : ElementNode) : HTMLElement {\n    if (node.props[ELEMENT_PROP.EL]) {\n        // $FlowFixMe\n        return node.props[ELEMENT_PROP.EL];\n    }\n\n    return doc.createElement(node.name);\n}\n\nfunction createTextElement(doc : Document, node : TextNode) : Text {\n    return doc.createTextNode(node.text);\n}\n\nfunction addProps(el : HTMLElement, node) {\n    const props = node.props;\n\n    for (const prop of Object.keys(props)) {\n        const val = props[prop];\n\n        if (val === null || typeof val === 'undefined' || prop === ELEMENT_PROP.EL || prop === ELEMENT_PROP.INNER_HTML) {\n            continue;\n        }\n\n        if (prop.match(/^on[A-Z][a-z]/) && typeof val === 'function') {\n            el.addEventListener(prop.slice(2).toLowerCase(), val);\n        } else if (typeof val === 'string' || typeof val === 'number') {\n            el.setAttribute(prop, val.toString());\n\n        } else if (typeof val === 'boolean') {\n            if (val === true) {\n                el.setAttribute(prop, '');\n            }\n        }\n    }\n\n    if (el.tagName.toLowerCase() === ELEMENT_TAG.IFRAME && !props.id) {\n        el.setAttribute(ELEMENT_PROP.ID, `jsx-iframe-${ uniqueID() }`);\n    }\n}\nconst ADD_CHILDREN : { [string] : (HTMLElement, ElementNode, DomNodeRenderer) => void } = {\n\n    [ ELEMENT_TAG.IFRAME ]: (el, node) => {\n        const firstChild = node.children[0];\n\n        if (node.children.length !== 1 || !(firstChild && firstChild.type === NODE_TYPE.ELEMENT) || firstChild.name !== ELEMENT_TAG.HTML) {\n            throw new Error(`Expected only single html element node as child of ${ ELEMENT_TAG.IFRAME } element`);\n        }\n    \n        el.addEventListener('load', () => {\n\n            // $FlowFixMe\n            const win = el.contentWindow;\n    \n            if (!win) {\n                throw new Error(`Expected frame to have contentWindow`);\n            }\n\n            const doc = win.document;\n            const docElement = doc.documentElement;\n\n            while (docElement.children && docElement.children.length) {\n                docElement.removeChild(docElement.children[0]);\n            }\n\n            // eslint-disable-next-line no-use-before-define\n            const child : HTMLElement = firstChild.render(dom({ doc }));\n        \n            while (child.children.length) {\n                docElement.appendChild(child.children[0]);\n            }\n        });\n    },\n\n    [ ELEMENT_TAG.SCRIPT ]: (el, node) => {\n        const firstChild = node.children[0];\n\n        if (node.children.length !== 1 || !(firstChild && firstChild.type === NODE_TYPE.TEXT)) {\n            throw new Error(`Expected only single text node as child of ${ ELEMENT_TAG.SCRIPT } element`);\n        }\n        \n        // $FlowFixMe\n        el.text = firstChild.text;\n    },\n\n    [ ELEMENT_TAG.DEFAULT ]: (el, node, renderer) => {\n        for (const child of node.renderChildren(renderer)) {\n            el.appendChild(child);\n        }\n    }\n};\n\nfunction addChildren(el : HTMLElement, node : ElementNode, doc : Document, renderer : DomNodeRenderer) {\n    if (node.props.hasOwnProperty(ELEMENT_PROP.INNER_HTML)) {\n\n        if (node.children.length) {\n            throw new Error(`Expected no children to be passed when ${ ELEMENT_PROP.INNER_HTML } prop is set`);\n        }\n\n        const html = node.props[ELEMENT_PROP.INNER_HTML];\n\n        if (typeof html !== 'string') {\n            throw new TypeError(`${ ELEMENT_PROP.INNER_HTML } prop must be string`);\n        }\n\n        if (node.name === ELEMENT_TAG.SCRIPT) {\n            // $FlowFixMe\n            el.text = html;\n        } else {\n            el.innerHTML = html;\n            fixScripts(el, doc);\n        }\n\n    } else {\n        const addChildrenToElement = ADD_CHILDREN[node.name] || ADD_CHILDREN[ELEMENT_TAG.DEFAULT];\n        addChildrenToElement(el, node, renderer);\n    }\n}\n\nexport function dom(opts? : { doc? : Document } = {}) : DomRenderer {\n    const { doc = document } = opts;\n    \n    const domRenderer : DomRenderer = (node) => {\n        if (node.type === NODE_TYPE.COMPONENT) {\n            return node.renderComponent(domRenderer);\n        }\n        \n        if (node.type === NODE_TYPE.TEXT) {\n            // $FlowFixMe\n            return createTextElement(doc, node);\n        }\n        \n        if (node.type === NODE_TYPE.ELEMENT) {\n            const el = createElement(doc, node);\n            addProps(el, node);\n            addChildren(el, node, doc, domRenderer);\n            // $FlowFixMe\n            return el;\n        }\n\n        throw new TypeError(`Unhandleable node`);\n    };\n\n    return domRenderer;\n}\n","/* @flow */\n\nconst ALPHA_CHARS = '0123456789abcdef';\n\nexport function uniqueID() : string {\n    return 'xxxxxxxxxx'.replace(/./g, () => ALPHA_CHARS.charAt(Math.floor(Math.random() * ALPHA_CHARS.length)));\n}\n","/* @flow */\n\nimport { ComponentNode, TextNode, ElementNode, type NodePropsType, type NodeRenderer } from '../node';\nimport { NODE_TYPE } from '../constants';\n\ntype HTMLRenderer = NodeRenderer<ElementNode | TextNode | ComponentNode<*>, string>;\n\nconst ELEMENT_PROP = {\n    INNER_HTML: 'innerHTML'\n};\n\nconst SELF_CLOSING_TAGS = {\n    br: true\n};\n\nfunction htmlEncode(text : string) : string {\n    return text\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nfunction propsToHTML(props : NodePropsType) : string {\n\n    const keys = Object.keys(props).filter(key => {\n        const val = props[key];\n\n        if (key === ELEMENT_PROP.INNER_HTML) {\n            return false;\n        }\n\n        if (!val) {\n            return false;\n        }\n\n        if (typeof val === 'string' || typeof val === 'number' || val === true) {\n            return true;\n        }\n\n        return false;\n    });\n\n    if (!keys.length) {\n        return '';\n    }\n\n    const pairs = keys.map(key => {\n        const val = props[key];\n\n        if (val === true) {\n            return `${ htmlEncode(key) }`;\n        }\n\n        if (typeof val !== 'string' && typeof val !== 'number') {\n            throw new TypeError(`Unexpected prop type: ${ typeof val }`);\n        }\n\n        return `${ htmlEncode(key) }=\"${ htmlEncode(val.toString()) }\"`;\n    });\n\n    return ` ${ pairs.join(' ') }`;\n}\n\nexport function html() : HTMLRenderer {\n\n    const htmlRenderer = (node) => {\n        if (node.type === NODE_TYPE.COMPONENT) {\n            return [].concat(node.renderComponent(htmlRenderer)).join('');\n        }\n        \n        if (node.type === NODE_TYPE.ELEMENT) {\n            const renderedProps = propsToHTML(node.props);\n\n            if (SELF_CLOSING_TAGS[node.name]) {\n                return `<${ node.name }${ renderedProps } />`;\n            } else {\n                const renderedChildren = (typeof node.props[ELEMENT_PROP.INNER_HTML] === 'string')\n                    ? node.props[ELEMENT_PROP.INNER_HTML]\n                    : node.renderChildren(htmlRenderer).join('');\n                    \n                return `<${ node.name }${ renderedProps }>${ renderedChildren }</${ node.name }>`;\n            }\n        }\n        \n        if (node.type === NODE_TYPE.TEXT) {\n            return htmlEncode(node.text);\n        }\n\n        throw new TypeError(`Unhandleable node: ${ node.type }`);\n    };\n\n    return htmlRenderer;\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n                            \nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n","/* @flow */\n\nexport const LOGO = {\n    PP:           ('pp' : 'pp'),\n    PAYPAL:       ('paypal' : 'paypal'),\n    VENMO:        ('venmo' : 'venmo'),\n    ITAU:         ('itau' : 'itau'),\n    CREDIT:       ('credit' : 'credit'),\n    IDEAL:        ('ideal' : 'ideal'),\n    ELV:          ('elv' : 'elv'),\n    SEPA:         ('sepa' : 'sepa'),\n    BANCONTACT:   ('bancontact' : 'bancontact'),\n    GIROPAY:      ('giropay' : 'giropay'),\n    SOFORT:       ('sofort' : 'sofort'),\n    EPS:          ('eps' : 'eps'),\n    MYBANK:       ('mybank' : 'mybank'),\n    P24:          ('p24' : 'p24'),\n    ZIMPLER:      ('zimpler' : 'zimpler'),\n    WECHATPAY:    ('wechatpay' : 'wechatpay'),\n    PAYU:         ('payu' : 'payu'),\n    VERKKOPANKKI: ('verkkopankki' : 'verkkopankki'),\n    BLIK:         ('blik' : 'blik'),\n    TRUSTLY:      ('trustly' : 'trustly')\n};\n\nexport const LOGO_COLOR = {\n    BLUE:    ('blue' : 'blue'),\n    BLACK:   ('black' : 'black'),\n    WHITE:   ('white' : 'white'),\n    DEFAULT: ('default' : 'default')\n};\n\nexport const LOGO_CLASS = {\n    LOGO:       ('paypal-logo' : 'paypal-logo'),\n    CARD:       ('paypal-logo-card' : 'paypal-logo-card'),\n    LOGO_COLOR: ('paypal-logo-color' : 'paypal-logo-color')\n};\n","/* @flow */\n/** @jsx node */\n\nimport { svgToBase64, capitalizeFirstLetter } from 'belter/src';\nimport { node, html, type ElementNode, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { LOGO_CLASS, LOGO_COLOR } from '../constants';\n\ntype SVGProps = {|\n    svg : ElementNode,\n    [ string ] : string\n|};\n\nexport function SVG(props : SVGProps) : ElementNode {\n    let { svg, ...otherProps } = props;\n\n    if (!svg) {\n        throw new TypeError(`Expected svg prop`);\n    }\n    \n    svg = svg.render(html());\n\n    if (typeof svg !== 'string') {\n        throw new TypeError(`Expected svg prop to be a string or jsx node`);\n    }\n\n    return (\n        <img src={ svgToBase64(svg) } { ...otherProps } />\n    );\n}\n\nexport type SVGLogoProps = {|\n    render : () => ElementNode,\n    name : string,\n    alt? : string,\n    logoColor? : $Values<typeof LOGO_COLOR>\n|};\n\nexport function SVGLogo({ render, name, alt, logoColor, ...props } : SVGLogoProps) : ComponentNode<SVGLogoProps> {\n    return (\n        <SVG\n            { ...props }\n            svg={ render() }\n            alt={ alt || capitalizeFirstLetter(name) }\n            class={ `${ LOGO_CLASS.LOGO } ${ LOGO_CLASS.LOGO }-${ name } ${ logoColor ? `${ LOGO_CLASS.LOGO_COLOR }-${ logoColor }` : '' }` }\n        />\n    );\n}\n\nexport type SVGCardLogoProps = {|\n    render : () => ElementNode,\n    name : string\n|};\n\nexport function SVGCardLogo({ render, name, ...props } : SVGCardLogoProps) : ComponentNode<SVGCardLogoProps> {\n    return (\n        <SVG\n            { ...props }\n            svg={ render() }\n            alt={ capitalizeFirstLetter(name) }\n            class={ `${ LOGO_CLASS.CARD } ${ LOGO_CLASS.CARD }-${ name }` }\n        />\n    );\n}\n","/* @flow */\n\nimport { LOGO_COLOR } from '../constants';\nimport type { LogoColorMap, LogoColors } from '../types';\n\nexport function getLogoColors(name : string, logoColorMap : LogoColorMap, logoColor : ?$Values<typeof LOGO_COLOR>) : LogoColors {\n    const colors = logoColor ? logoColorMap[logoColor] : logoColorMap[LOGO_COLOR.DEFAULT];\n    if (!colors) {\n        throw new Error(`No ${ logoColor || LOGO_COLOR.DEFAULT } logo available for ${ name }`);\n    }\n    return colors;\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#005498',\n        secondary: '#FFD800'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff',\n        secondary: '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#005498',\n        secondary: '#FFD800'\n    }\n};\n\nexport function BancontactLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary } = getLogoColors(LOGO.BANCONTACT, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.BANCONTACT }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg version=\"1.1\" id=\"Layer_1\" x=\"0px\" y=\"0px\" width=\"226px\" height=\"32px\" viewBox=\"36.09922790527344 36.68461608886719 226 32\" style=\"enable-background:new 0 0 476.9 123.4;\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <g transform=\"matrix(0.557769, 0, 0, 0.557769, 15.684875, 18.15871)\">\n                            <path fill={  primary } d=\"M147.6,50.2h-5.8h-26.9h-5.8l-3.9,4.4L92.5,68.9l0,0l-3.9,4.4h-6H56.2h-5.8l3.9-4.5l1.8-2.1l3.9-4.5h-5.8h-7.6&#10;&#9;&#9;h-4.2c-3.2,0-5.8,2.7-5.8,6l0,0v11.5v1.1c0,3.3,2.6,6,5.8,6H44h61.1h4.4c3.2,0,7.6-2,9.7-4.4l10.2-11.6L147.6,50.2z\" />\n                            <path fill={  secondary } d=\"M155.3,36.8c3.2,0,5.8,2.7,5.8,6v12.6c0,3.3-2.6,6-5.8,6h-3.2h-8.5h-5.8l3.9-4.4l0,0l1.9-2.2l3.9-4.4h-38.6&#10;&#9;&#9;L88.3,73.6H50l27.5-31.1l1-1.2c2.2-2.4,6.5-4.4,9.7-4.4h1.4h65.7V36.8z\" />\n                            <path fill={  primary } d=\"M 440.7 85.6 L 440.7 81.8 C 440.7 81.3 440.4 81 439.7 81 L 437.3 81 C 436.6 81 436.1 80.9 436 80.6 C 435.8 80.3 435.8 79.7 435.8 78.7 L 435.8 64.7 L 439.7 64.7 C 440 64.7 440.2 64.6 440.4 64.4 C 440.6 64.2 440.7 64 440.7 63.7 L 440.7 59.8 C 440.7 59.5 440.6 59.3 440.4 59.1 C 440.2 58.9 440 58.8 439.7 58.8 L 435.8 58.8 L 435.8 53.8 C 435.8 53.5 435.7 53.3 435.6 53.2 C 435.4 53.1 435.2 53 435 53 L 434.9 53 L 429.1 54 C 428.8 54.1 428.6 54.2 428.4 54.3 C 428.2 54.5 428.1 54.7 428.1 54.9 L 428.1 58.8 L 424.2 58.8 C 423.9 58.8 423.7 58.9 423.5 59.1 C 423.3 59.3 423.2 59.5 423.2 59.8 L 423.2 63 C 423.2 63.3 423.3 63.5 423.5 63.6 C 423.7 63.8 423.9 63.9 424.2 64 L 428.1 64.6 L 428.1 78.6 C 428.1 80.3 428.3 81.7 428.6 82.8 C 429 83.9 429.5 84.7 430.1 85.3 C 430.8 85.9 431.6 86.3 432.6 86.5 C 433.6 86.7 434.8 86.8 436.1 86.8 C 436.8 86.8 437.4 86.8 438 86.7 C 438.5 86.6 439.2 86.5 439.9 86.4 C 440.4 86.4 440.7 86.1 440.7 85.6 M 419.9 85.1 L 419.9 80.8 C 419.9 80.5 419.8 80.3 419.6 80.2 C 419.4 80.1 419.2 80 418.9 80 L 418.8 80 C 417.9 80.1 417 80.2 416.2 80.2 C 415.4 80.3 414.3 80.3 412.9 80.3 C 412.4 80.3 411.8 80.2 411.4 80 C 410.9 79.8 410.5 79.5 410.1 79.1 C 409.7 78.7 409.5 78.1 409.3 77.4 C 409.1 76.7 409 75.8 409 74.7 L 409 70.7 C 409 69.6 409.1 68.7 409.3 68 C 409.5 67.3 409.8 66.7 410.1 66.3 C 410.5 65.9 410.9 65.6 411.4 65.4 C 411.9 65.2 412.4 65.1 412.9 65.1 C 414.3 65.1 415.4 65.1 416.2 65.2 C 417 65.3 417.9 65.3 418.8 65.4 L 418.9 65.4 C 419.2 65.4 419.4 65.3 419.6 65.2 C 419.8 65.1 419.9 64.9 419.9 64.6 L 419.9 60.3 C 419.9 59.9 419.8 59.7 419.7 59.6 C 419.5 59.5 419.3 59.3 418.9 59.2 C 418.2 59 417.3 58.9 416.3 58.7 C 415.2 58.5 414 58.5 412.5 58.5 C 409.1 58.5 406.4 59.5 404.3 61.6 C 402.3 63.7 401.2 66.7 401.2 70.7 L 401.2 74.7 C 401.2 78.6 402.2 81.7 404.3 83.8 C 406.3 85.9 409.1 86.9 412.5 86.9 C 413.9 86.9 415.2 86.8 416.3 86.7 C 417.4 86.5 418.3 86.4 418.9 86.2 C 419.3 86.1 419.5 86 419.7 85.8 C 419.8 85.7 419.9 85.4 419.9 85.1 M 388.6 80 C 388 80.3 387.4 80.5 386.7 80.7 C 386 80.9 385.3 81 384.6 81 C 383.6 81 382.8 80.9 382.3 80.6 C 381.8 80.3 381.6 79.7 381.6 78.6 L 381.6 78.2 C 381.6 77.6 381.7 77.1 381.8 76.7 C 381.9 76.3 382.2 75.9 382.5 75.6 C 382.8 75.3 383.3 75.1 383.8 74.9 C 384.3 74.8 385 74.7 385.9 74.7 L 388.6 74.7 L 388.6 80 L 388.6 80 Z M 396.2 68.3 C 396.2 66.5 395.9 65 395.4 63.8 C 394.9 62.6 394.1 61.6 393.2 60.8 C 392.2 60 391.1 59.4 389.7 59.1 C 388.3 58.7 386.7 58.5 385 58.5 C 383.4 58.5 381.8 58.6 380.3 58.8 C 378.8 59 377.6 59.2 376.7 59.5 C 376.1 59.7 375.8 60 375.8 60.6 L 375.8 64.5 C 375.8 64.8 375.9 65 376 65.2 C 376.2 65.3 376.4 65.4 376.6 65.4 L 376.8 65.4 C 377.2 65.4 377.7 65.3 378.2 65.3 C 378.8 65.3 379.4 65.2 380.2 65.2 C 380.9 65.2 381.7 65.1 382.5 65.1 C 383.3 65.1 384.1 65.1 384.8 65.1 C 385.9 65.1 386.8 65.3 387.4 65.7 C 388 66.1 388.4 67 388.4 68.4 L 388.4 70.1 L 385.8 70.1 C 381.7 70.1 378.6 70.7 376.8 72 C 375 73.3 374 75.4 374 78.2 L 374 78.6 C 374 80.2 374.2 81.5 374.7 82.5 C 375.2 83.6 375.8 84.4 376.6 85.1 C 377.4 85.7 378.2 86.2 379.2 86.5 C 380.2 86.8 381.2 86.9 382.3 86.9 C 383.7 86.9 385 86.7 386 86.3 C 387 85.9 388 85.4 389 84.7 L 389 85.5 C 389 85.8 389.1 86 389.3 86.2 C 389.5 86.4 389.7 86.5 390 86.5 L 395.4 86.5 C 395.7 86.5 395.9 86.4 396.1 86.2 C 396.3 86 396.4 85.8 396.4 85.5 L 396.4 68.3 L 396.2 68.3 Z M 370.5 85.6 L 370.5 81.8 C 370.5 81.3 370.2 81 369.5 81 L 367.1 81 C 366.4 81 365.9 80.9 365.8 80.6 C 365.6 80.3 365.6 79.7 365.6 78.7 L 365.6 64.7 L 369.5 64.7 C 369.8 64.7 370 64.6 370.2 64.4 C 370.4 64.2 370.5 64 370.5 63.7 L 370.5 59.8 C 370.5 59.5 370.4 59.3 370.2 59.1 C 370 58.9 369.8 58.8 369.5 58.8 L 365.6 58.8 L 365.6 53.8 C 365.6 53.5 365.5 53.3 365.4 53.2 C 365.2 53.1 365 53 364.8 53 L 364.7 53 L 358.9 54 C 358.6 54.1 358.4 54.2 358.2 54.3 C 358 54.5 357.9 54.7 357.9 54.9 L 357.9 58.8 L 354 58.8 C 353.7 58.8 353.5 58.9 353.3 59.1 C 353.1 59.3 353 59.5 353 59.8 L 353 63 C 353 63.3 353.1 63.5 353.3 63.6 C 353.5 63.8 353.7 63.9 354 64 L 357.9 64.6 L 357.9 78.6 C 357.9 80.3 358.1 81.7 358.4 82.8 C 358.8 83.9 359.3 84.7 359.9 85.3 C 360.6 85.9 361.4 86.3 362.4 86.5 C 363.4 86.7 364.6 86.8 365.9 86.8 C 366.6 86.8 367.2 86.8 367.8 86.7 C 368.3 86.6 369 86.5 369.7 86.4 C 370.2 86.4 370.5 86.1 370.5 85.6 M 349.5 85.5 L 349.5 69.5 C 349.5 68 349.4 66.6 349.1 65.2 C 348.9 63.9 348.4 62.7 347.8 61.7 C 347.2 60.7 346.3 59.9 345.2 59.4 C 344.1 58.8 342.7 58.5 340.9 58.5 C 339.4 58.5 338 58.7 336.8 59.1 C 335.6 59.5 334.4 60.1 333 61.1 L 333 59.8 C 333 59.5 332.9 59.3 332.7 59.1 C 332.5 58.9 332.3 58.8 332 58.8 L 326.6 58.8 C 326.3 58.8 326.1 58.9 325.9 59.1 C 325.7 59.3 325.6 59.5 325.6 59.8 L 325.6 85.4 C 325.6 85.7 325.7 85.9 325.9 86.1 C 326.1 86.3 326.3 86.4 326.6 86.4 L 332.4 86.4 C 332.7 86.4 332.9 86.3 333.1 86.1 C 333.3 85.9 333.4 85.7 333.4 85.4 L 333.4 66.5 C 334.2 66.1 335 65.7 335.8 65.4 C 336.5 65.1 337.3 65 338 65 C 338.7 65 339.3 65.1 339.8 65.2 C 340.3 65.3 340.6 65.6 340.9 65.9 C 341.2 66.3 341.3 66.7 341.4 67.3 C 341.5 67.9 341.5 68.6 341.5 69.4 L 341.5 85.4 C 341.5 85.7 341.6 85.9 341.8 86.1 C 342 86.3 342.2 86.4 342.5 86.4 L 348.3 86.4 C 348.6 86.4 348.8 86.3 349 86.1 C 349.4 85.9 349.5 85.7 349.5 85.5 M 313.1 74.4 C 313.1 78.3 311.7 80.3 308.8 80.3 C 307.4 80.3 306.3 79.8 305.6 78.8 C 304.9 77.8 304.5 76.3 304.5 74.4 L 304.5 71 C 304.5 69 304.9 67.6 305.6 66.6 C 306.3 65.6 307.4 65.1 308.8 65.1 C 311.6 65.1 313.1 67.1 313.1 71 L 313.1 74.4 Z M 320.9 71 C 320.9 69.1 320.6 67.3 320.1 65.8 C 319.6 64.3 318.8 63 317.8 61.9 C 316.8 60.8 315.5 60 314 59.4 C 312.5 58.8 310.8 58.5 308.8 58.5 C 306.8 58.5 305.1 58.8 303.6 59.4 C 302.1 60 300.8 60.8 299.8 61.9 C 298.8 63 298 64.3 297.5 65.8 C 297 67.3 296.7 69.1 296.7 71 L 296.7 74.4 C 296.7 76.3 297 78.1 297.5 79.6 C 298 81.1 298.8 82.4 299.8 83.5 C 300.8 84.6 302.1 85.4 303.6 86 C 305.1 86.6 306.8 86.9 308.8 86.9 C 310.8 86.9 312.5 86.6 314 86 C 315.5 85.4 316.8 84.6 317.8 83.5 C 318.8 82.4 319.6 81.1 320.1 79.6 C 320.6 78.1 320.9 76.3 320.9 74.4 L 320.9 71 Z M 294.1 85.1 L 294.1 80.8 C 294.1 80.5 294 80.3 293.8 80.2 C 293.6 80.1 293.4 80 293.1 80 L 293 80 C 292.1 80.1 291.2 80.2 290.4 80.2 C 289.6 80.2 288.5 80.3 287.1 80.3 C 286.6 80.3 286 80.2 285.6 80 C 285.1 79.8 284.7 79.5 284.3 79.1 C 283.9 78.7 283.7 78.1 283.5 77.4 C 283.3 76.7 283.2 75.8 283.2 74.7 L 283.2 70.7 C 283.2 69.6 283.3 68.7 283.5 68 C 283.7 67.3 284 66.7 284.3 66.3 C 284.7 65.9 285.1 65.6 285.6 65.4 C 286.1 65.2 286.6 65.1 287.1 65.1 C 288.5 65.1 289.6 65.1 290.4 65.2 C 291.2 65.3 292.1 65.3 293 65.4 L 293.1 65.4 C 293.4 65.4 293.6 65.3 293.8 65.2 C 294 65.1 294.1 64.9 294.1 64.6 L 294.1 60.3 C 294.1 59.9 294 59.7 293.9 59.6 C 293.7 59.5 293.5 59.3 293.1 59.2 C 292.4 59 291.6 58.9 290.5 58.7 C 289.4 58.5 288.2 58.5 286.7 58.5 C 283.3 58.5 280.6 59.5 278.5 61.6 C 276.5 63.7 275.4 66.7 275.4 70.7 L 275.4 74.7 C 275.4 78.6 276.4 81.7 278.5 83.8 C 280.5 85.9 283.3 86.9 286.7 86.9 C 288.1 86.9 289.4 86.8 290.5 86.7 C 291.6 86.5 292.4 86.4 293.1 86.2 C 293.5 86.1 293.7 86 293.9 85.8 C 294 85.7 294.1 85.4 294.1 85.1 M 270.4 85.5 L 270.4 69.5 C 270.4 68 270.3 66.6 270 65.2 C 269.7 63.8 269.3 62.7 268.7 61.7 C 268.1 60.7 267.2 59.9 266.1 59.4 C 265 58.8 263.6 58.5 261.8 58.5 C 260.3 58.5 258.9 58.7 257.7 59.1 C 256.5 59.5 255.3 60.1 253.9 61.1 L 253.9 59.8 C 253.9 59.5 253.8 59.3 253.6 59.1 C 253.4 58.9 253.2 58.8 252.9 58.8 L 247.5 58.8 C 247.2 58.8 247 58.9 246.8 59.1 C 246.6 59.3 246.5 59.5 246.5 59.8 L 246.5 85.4 C 246.5 85.7 246.6 85.9 246.8 86.1 C 247 86.3 247.2 86.4 247.5 86.4 L 253.3 86.4 C 253.6 86.4 253.8 86.3 254 86.1 C 254.2 85.9 254.3 85.7 254.3 85.4 L 254.3 66.5 C 255.1 66.1 255.9 65.7 256.7 65.4 C 257.4 65.1 258.2 65 258.9 65 C 259.6 65 260.2 65.1 260.7 65.2 C 261.2 65.3 261.5 65.6 261.8 65.9 C 262.1 66.3 262.2 66.7 262.3 67.3 C 262.4 67.9 262.4 68.6 262.4 69.4 L 262.4 85.4 C 262.4 85.7 262.5 85.9 262.7 86.1 C 262.9 86.3 263.1 86.4 263.4 86.4 L 269.2 86.4 C 269.5 86.4 269.7 86.3 269.9 86.1 C 270.3 85.9 270.4 85.7 270.4 85.5 M 233.3 80 C 232.7 80.3 232.1 80.5 231.4 80.7 C 230.7 80.9 230 81 229.3 81 C 228.3 81 227.5 80.9 227 80.6 C 226.5 80.3 226.3 79.7 226.3 78.6 L 226.3 78.2 C 226.3 77.6 226.4 77.1 226.5 76.7 C 226.6 76.3 226.9 75.9 227.2 75.6 C 227.5 75.3 228 75.1 228.5 74.9 C 229 74.8 229.7 74.7 230.6 74.7 L 233.3 74.7 L 233.3 80 L 233.3 80 Z M 241 68.3 C 241 66.5 240.7 65 240.2 63.8 C 239.7 62.6 238.9 61.6 238 60.8 C 237 60 235.9 59.4 234.5 59.1 C 233.1 58.7 231.5 58.5 229.8 58.5 C 228.2 58.5 226.6 58.6 225.1 58.8 C 223.6 59 222.4 59.2 221.5 59.5 C 220.9 59.7 220.6 60 220.6 60.6 L 220.6 64.5 C 220.6 64.8 220.7 65 220.8 65.2 C 221 65.3 221.2 65.4 221.4 65.4 L 221.6 65.4 C 222 65.4 222.5 65.3 223 65.3 C 223.6 65.3 224.2 65.2 225 65.2 C 225.7 65.2 226.5 65.1 227.3 65.1 C 228.1 65.1 228.9 65.1 229.6 65.1 C 230.7 65.1 231.6 65.3 232.2 65.7 C 232.8 66.1 233.2 67 233.2 68.4 L 233.2 70.1 L 230.6 70.1 C 226.5 70.1 223.4 70.7 221.6 72 C 219.8 73.3 218.8 75.4 218.8 78.2 L 218.8 78.6 C 218.8 80.2 219 81.5 219.5 82.5 C 220 83.6 220.6 84.4 221.4 85.1 C 222.2 85.7 223 86.2 224 86.5 C 225 86.8 226 86.9 227.1 86.9 C 228.5 86.9 229.8 86.7 230.8 86.3 C 231.8 85.9 232.8 85.4 233.8 84.7 L 233.8 85.5 C 233.8 85.8 233.9 86 234.1 86.2 C 234.3 86.4 234.5 86.5 234.8 86.5 L 240.2 86.5 C 240.5 86.5 240.7 86.4 240.9 86.2 C 241.1 86 241.2 85.8 241.2 85.5 L 241.2 68.3 L 241 68.3 Z M 206.6 75.9 C 206.6 77.2 206.1 78.3 205.2 79 C 204.3 79.7 202.5 80.1 200.1 80.1 L 199.3 80.1 C 198.9 80.1 198.5 80.1 198.1 80.1 C 197.7 80.1 197.3 80.1 196.9 80.1 L 196.1 80.1 L 196.1 71.1 L 201.5 71.1 C 203.4 71.1 204.8 71.5 205.5 72.4 C 206.2 73.3 206.6 74.3 206.6 75.4 L 206.6 75.9 Z M 206.4 61.6 C 206.4 62.1 206.3 62.6 206.2 63.1 C 206 63.6 205.8 64 205.4 64.3 C 205 64.6 204.5 64.9 203.9 65.1 C 203.3 65.3 202.5 65.4 201.5 65.4 L 196.1 65.4 L 196.1 57.1 C 196.3 57.1 196.5 57.1 196.8 57.1 C 197.1 57.1 197.5 57.1 197.9 57.1 L 199 57.1 L 199.8 57.1 C 202.3 57.1 204 57.4 205 58 C 206 58.6 206.5 59.6 206.5 60.9 L 206.5 61.6 L 206.4 61.6 Z M 214.6 75.4 C 214.6 73.7 214.2 72.3 213.4 71.1 C 212.6 69.9 211.6 68.9 210.3 68.3 C 211.6 67.7 212.6 66.7 213.3 65.5 C 214 64.2 214.4 62.8 214.4 61.3 L 214.4 60.4 C 214.4 58.5 214 56.9 213.3 55.6 C 212.6 54.3 211.5 53.3 210.2 52.5 C 208.9 51.7 207.3 51.2 205.4 50.8 C 203.5 50.5 201.5 50.3 199.2 50.3 C 198.4 50.3 197.6 50.3 196.8 50.3 C 196 50.3 195.2 50.4 194.4 50.4 C 193.6 50.4 192.9 50.5 192.2 50.6 C 191.5 50.7 191 50.7 190.6 50.8 C 189.7 51 189 51.3 188.6 51.7 C 188.2 52.1 188 52.9 188 54 L 188 83.3 C 188 84.4 188.2 85.1 188.6 85.6 C 189 86 189.7 86.3 190.6 86.5 C 191.1 86.6 191.7 86.7 192.3 86.7 C 193 86.8 193.7 86.8 194.5 86.9 C 195.3 86.9 196.1 87 196.9 87 C 197.7 87 198.6 87 199.4 87 C 201.5 87 203.5 86.8 205.3 86.5 C 207.1 86.2 208.7 85.6 210.1 84.8 C 211.5 84 212.5 82.9 213.4 81.5 C 214.2 80.1 214.6 78.3 214.6 76.2 L 214.6 75.4 L 214.6 75.4 Z\" />\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nexport const COUNTRY = {\n    AD: ('AD' : 'AD'),\n    AE: ('AE' : 'AE'),\n    AG: ('AG' : 'AG'),\n    AI: ('AI' : 'AI'),\n    AL: ('AL' : 'AL'),\n    AM: ('AM' : 'AM'),\n    AN: ('AN' : 'AN'),\n    AO: ('AO' : 'AO'),\n    AR: ('AR' : 'AR'),\n    AT: ('AT' : 'AT'),\n    AU: ('AU' : 'AU'),\n    AW: ('AW' : 'AW'),\n    AZ: ('AZ' : 'AZ'),\n    BA: ('BA' : 'BA'),\n    BB: ('BB' : 'BB'),\n    BE: ('BE' : 'BE'),\n    BF: ('BF' : 'BF'),\n    BG: ('BG' : 'BG'),\n    BH: ('BH' : 'BH'),\n    BI: ('BI' : 'BI'),\n    BJ: ('BJ' : 'BJ'),\n    BM: ('BM' : 'BM'),\n    BN: ('BN' : 'BN'),\n    BO: ('BO' : 'BO'),\n    BR: ('BR' : 'BR'),\n    BS: ('BS' : 'BS'),\n    BT: ('BT' : 'BT'),\n    BW: ('BW' : 'BW'),\n    BY: ('BY' : 'BY'),\n    BZ: ('BZ' : 'BZ'),\n    CA: ('CA' : 'CA'),\n    CD: ('CD' : 'CD'),\n    CG: ('CG' : 'CG'),\n    CH: ('CH' : 'CH'),\n    CI: ('CI' : 'CI'),\n    CK: ('CK' : 'CK'),\n    CL: ('CL' : 'CL'),\n    CM: ('CM' : 'CM'),\n    CN: ('CN' : 'CN'),\n    CO: ('CO' : 'CO'),\n    CR: ('CR' : 'CR'),\n    CV: ('CV' : 'CV'),\n    CY: ('CY' : 'CY'),\n    CZ: ('CZ' : 'CZ'),\n    DE: ('DE' : 'DE'),\n    DJ: ('DJ' : 'DJ'),\n    DK: ('DK' : 'DK'),\n    DM: ('DM' : 'DM'),\n    DO: ('DO' : 'DO'),\n    DZ: ('DZ' : 'DZ'),\n    EC: ('EC' : 'EC'),\n    EE: ('EE' : 'EE'),\n    EG: ('EG' : 'EG'),\n    ER: ('ER' : 'ER'),\n    ES: ('ES' : 'ES'),\n    ET: ('ET' : 'ET'),\n    FI: ('FI' : 'FI'),\n    FJ: ('FJ' : 'FJ'),\n    FK: ('FK' : 'FK'),\n    FM: ('FM' : 'FM'),\n    FO: ('FO' : 'FO'),\n    FR: ('FR' : 'FR'),\n    GA: ('GA' : 'GA'),\n    GB: ('GB' : 'GB'),\n    GD: ('GD' : 'GD'),\n    GE: ('GE' : 'GE'),\n    GF: ('GF' : 'GF'),\n    GI: ('GI' : 'GI'),\n    GL: ('GL' : 'GL'),\n    GM: ('GM' : 'GM'),\n    GN: ('GN' : 'GN'),\n    GP: ('GP' : 'GP'),\n    GR: ('GR' : 'GR'),\n    GT: ('GT' : 'GT'),\n    GW: ('GW' : 'GW'),\n    GY: ('GY' : 'GY'),\n    HK: ('HK' : 'HK'),\n    HN: ('HN' : 'HN'),\n    HR: ('HR' : 'HR'),\n    HU: ('HU' : 'HU'),\n    ID: ('ID' : 'ID'),\n    IE: ('IE' : 'IE'),\n    IL: ('IL' : 'IL'),\n    IN: ('IN' : 'IN'),\n    IS: ('IS' : 'IS'),\n    IT: ('IT' : 'IT'),\n    JM: ('JM' : 'JM'),\n    JO: ('JO' : 'JO'),\n    JP: ('JP' : 'JP'),\n    KE: ('KE' : 'KE'),\n    KG: ('KG' : 'KG'),\n    KH: ('KH' : 'KH'),\n    KI: ('KI' : 'KI'),\n    KM: ('KM' : 'KM'),\n    KN: ('KN' : 'KN'),\n    KR: ('KR' : 'KR'),\n    KW: ('KW' : 'KW'),\n    KY: ('KY' : 'KY'),\n    KZ: ('KZ' : 'KZ'),\n    LA: ('LA' : 'LA'),\n    LC: ('LC' : 'LC'),\n    LI: ('LI' : 'LI'),\n    LK: ('LK' : 'LK'),\n    LS: ('LS' : 'LS'),\n    LT: ('LT' : 'LT'),\n    LU: ('LU' : 'LU'),\n    LV: ('LV' : 'LV'),\n    MA: ('MA' : 'MA'),\n    MC: ('MC' : 'MC'),\n    MD: ('MD' : 'MD'),\n    ME: ('ME' : 'ME'),\n    MG: ('MG' : 'MG'),\n    MH: ('MH' : 'MH'),\n    MK: ('MK' : 'MK'),\n    ML: ('ML' : 'ML'),\n    MN: ('MN' : 'MN'),\n    MQ: ('MQ' : 'MQ'),\n    MR: ('MR' : 'MR'),\n    MS: ('MS' : 'MS'),\n    MT: ('MT' : 'MT'),\n    MU: ('MU' : 'MU'),\n    MV: ('MV' : 'MV'),\n    MW: ('MW' : 'MW'),\n    MX: ('MX' : 'MX'),\n    MY: ('MY' : 'MY'),\n    MZ: ('MZ' : 'MZ'),\n    NA: ('NA' : 'NA'),\n    NC: ('NC' : 'NC'),\n    NE: ('NE' : 'NE'),\n    NF: ('NF' : 'NF'),\n    NG: ('NG' : 'NG'),\n    NI: ('NI' : 'NI'),\n    NL: ('NL' : 'NL'),\n    NO: ('NO' : 'NO'),\n    NP: ('NP' : 'NP'),\n    NR: ('NR' : 'NR'),\n    NU: ('NU' : 'NU'),\n    NZ: ('NZ' : 'NZ'),\n    OM: ('OM' : 'OM'),\n    PA: ('PA' : 'PA'),\n    PE: ('PE' : 'PE'),\n    PF: ('PF' : 'PF'),\n    PG: ('PG' : 'PG'),\n    PH: ('PH' : 'PH'),\n    PL: ('PL' : 'PL'),\n    PM: ('PM' : 'PM'),\n    PN: ('PN' : 'PN'),\n    PT: ('PT' : 'PT'),\n    PW: ('PW' : 'PW'),\n    PY: ('PY' : 'PY'),\n    QA: ('QA' : 'QA'),\n    RE: ('RE' : 'RE'),\n    RO: ('RO' : 'RO'),\n    RS: ('RS' : 'RS'),\n    RU: ('RU' : 'RU'),\n    RW: ('RW' : 'RW'),\n    SA: ('SA' : 'SA'),\n    SB: ('SB' : 'SB'),\n    SC: ('SC' : 'SC'),\n    SE: ('SE' : 'SE'),\n    SG: ('SG' : 'SG'),\n    SH: ('SH' : 'SH'),\n    SI: ('SI' : 'SI'),\n    SJ: ('SJ' : 'SJ'),\n    SK: ('SK' : 'SK'),\n    SL: ('SL' : 'SL'),\n    SM: ('SM' : 'SM'),\n    SN: ('SN' : 'SN'),\n    SO: ('SO' : 'SO'),\n    SR: ('SR' : 'SR'),\n    ST: ('ST' : 'ST'),\n    SV: ('SV' : 'SV'),\n    SZ: ('SZ' : 'SZ'),\n    TC: ('TC' : 'TC'),\n    TD: ('TD' : 'TD'),\n    TG: ('TG' : 'TG'),\n    TH: ('TH' : 'TH'),\n    TJ: ('TJ' : 'TJ'),\n    TM: ('TM' : 'TM'),\n    TN: ('TN' : 'TN'),\n    TO: ('TO' : 'TO'),\n    TR: ('TR' : 'TR'),\n    TT: ('TT' : 'TT'),\n    TV: ('TV' : 'TV'),\n    TW: ('TW' : 'TW'),\n    TZ: ('TZ' : 'TZ'),\n    UA: ('UA' : 'UA'),\n    UG: ('UG' : 'UG'),\n    US: ('US' : 'US'),\n    UY: ('UY' : 'UY'),\n    VA: ('VA' : 'VA'),\n    VC: ('VC' : 'VC'),\n    VE: ('VE' : 'VE'),\n    VG: ('VG' : 'VG'),\n    VN: ('VN' : 'VN'),\n    VU: ('VU' : 'VU'),\n    WF: ('WF' : 'WF'),\n    WS: ('WS' : 'WS'),\n    YE: ('YE' : 'YE'),\n    YT: ('YT' : 'YT'),\n    ZA: ('ZA' : 'ZA'),\n    ZM: ('ZM' : 'ZM'),\n    ZW: ('ZW' : 'ZW')\n};\n\nexport const LANG = {\n    AR: ('ar' : 'ar'),\n    CS: ('cs' : 'cs'),\n    DA: ('da' : 'da'),\n    DE: ('de' : 'de'),\n    EL: ('el' : 'el'),\n    EN: ('en' : 'en'),\n    ES: ('es' : 'es'),\n    FI: ('fi' : 'fi'),\n    FR: ('fr' : 'fr'),\n    HE: ('he' : 'he'),\n    HU: ('hu' : 'hu'),\n    ID: ('id' : 'id'),\n    IT: ('it' : 'it'),\n    JA: ('ja' : 'ja'),\n    KO: ('ko' : 'ko'),\n    NL: ('nl' : 'nl'),\n    NO: ('no' : 'no'),\n    PL: ('pl' : 'pl'),\n    PT: ('pt' : 'pt'),\n    RU: ('ru' : 'ru'),\n    SK: ('sk' : 'sk'),\n    SV: ('sv' : 'sv'),\n    TH: ('th' : 'th'),\n    TR: ('tr' : 'tr'),\n    ZH: ('zh' : 'zh')\n};\n\nexport type CountryLangs = {\n    AD : 'en' | 'fr' | 'es' | 'zh',\n    AE : 'en' | 'fr' | 'es' | 'zh' | 'ar',\n    AG : 'en' | 'fr' | 'es' | 'zh',\n    AI : 'en' | 'fr' | 'es' | 'zh',\n    AL : 'en',\n    AM : 'en' | 'fr' | 'es' | 'zh',\n    AN : 'en' | 'fr' | 'es' | 'zh',\n    AO : 'en' | 'fr' | 'es' | 'zh',\n    AR : 'es' | 'en',\n    AT : 'de' | 'en',\n    AU : 'en',\n    AW : 'en' | 'fr' | 'es' | 'zh',\n    AZ : 'en' | 'fr' | 'es' | 'zh',\n    BA : 'en',\n    BB : 'en' | 'fr' | 'es' | 'zh',\n    BE : 'en' | 'nl' | 'fr',\n    BF : 'fr' | 'en' | 'es' | 'zh',\n    BG : 'en',\n    BH : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    BI : 'fr' | 'en' | 'es' | 'zh',\n    BJ : 'fr' | 'en' | 'es' | 'zh',\n    BM : 'en' | 'fr' | 'es' | 'zh',\n    BN : 'en',\n    BO : 'es' | 'en' | 'fr' | 'zh',\n    BR : 'pt' | 'en',\n    BS : 'en' | 'fr' | 'es' | 'zh',\n    BT : 'en',\n    BW : 'en' | 'fr' | 'es' | 'zh',\n    BY : 'en',\n    BZ : 'en' | 'es' | 'fr' | 'zh',\n    CA : 'en' | 'fr',\n    CD : 'fr' | 'en' | 'es' | 'zh',\n    CG : 'en' | 'fr' | 'es' | 'zh',\n    CH : 'de' | 'fr' | 'en',\n    CI : 'fr' | 'en',\n    CK : 'en' | 'fr' | 'es' | 'zh',\n    CL : 'es' | 'en' | 'fr' | 'zh',\n    CM : 'fr' | 'en',\n    CN : 'zh',\n    CO : 'es' | 'en' | 'fr' | 'zh',\n    CR : 'es' | 'en' | 'fr' | 'zh',\n    CV : 'en' | 'fr' | 'es' | 'zh',\n    CY : 'en',\n    CZ : 'cs' | 'en' | 'fr' | 'es' | 'zh',\n    DE : 'de' | 'en',\n    DJ : 'fr' | 'en' | 'es' | 'zh',\n    DK : 'da' | 'en',\n    DM : 'en' | 'fr' | 'es' | 'zh',\n    DO : 'es' | 'en' | 'fr' | 'zh',\n    DZ : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    EC : 'es' | 'en' | 'fr' | 'zh',\n    EE : 'en' | 'ru' | 'fr' | 'es' | 'zh',\n    EG : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    ER : 'en' | 'fr' | 'es' | 'zh',\n    ES : 'es' | 'en',\n    ET : 'en' | 'fr' | 'es' | 'zh',\n    FI : 'fi' | 'en' | 'fr' | 'es' | 'zh',\n    FJ : 'en' | 'fr' | 'es' | 'zh',\n    FK : 'en' | 'fr' | 'es' | 'zh',\n    FM : 'en',\n    FO : 'da' | 'en' | 'fr' | 'es' | 'zh',\n    FR : 'fr' | 'en',\n    GA : 'fr' | 'en' | 'es' | 'zh',\n    GB : 'en',\n    GD : 'en' | 'fr' | 'es' | 'zh',\n    GE : 'en' | 'fr' | 'es' | 'zh',\n    GF : 'en' | 'fr' | 'es' | 'zh',\n    GI : 'en' | 'fr' | 'es' | 'zh',\n    GL : 'da' | 'en' | 'fr' | 'es' | 'zh',\n    GM : 'en' | 'fr' | 'es' | 'zh',\n    GN : 'fr' | 'en' | 'es' | 'zh',\n    GP : 'en' | 'fr' | 'es' | 'zh',\n    GR : 'el' | 'en' | 'fr' | 'es' | 'zh',\n    GT : 'es' | 'en' | 'fr' | 'zh',\n    GW : 'en' | 'fr' | 'es' | 'zh',\n    GY : 'en' | 'fr' | 'es' | 'zh',\n    HK : 'en' | 'zh',\n    HN : 'es' | 'en' | 'fr' | 'zh',\n    HR : 'en',\n    HU : 'hu' | 'en' | 'fr' | 'es' | 'zh',\n    ID : 'id' | 'en',\n    IE : 'en' | 'fr' | 'es' | 'zh',\n    IL : 'he' | 'en',\n    IN : 'en',\n    IS : 'en',\n    IT : 'it' | 'en',\n    JM : 'en' | 'es' | 'fr' | 'zh',\n    JO : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    JP : 'ja' | 'en',\n    KE : 'en' | 'fr' | 'es' | 'zh',\n    KG : 'en' | 'fr' | 'es' | 'zh',\n    KH : 'en',\n    KI : 'en' | 'fr' | 'es' | 'zh',\n    KM : 'fr' | 'en' | 'es' | 'zh',\n    KN : 'en' | 'fr' | 'es' | 'zh',\n    KR : 'ko' | 'en',\n    KW : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    KY : 'en' | 'fr' | 'es' | 'zh',\n    KZ : 'en' | 'fr' | 'es' | 'zh',\n    LA : 'en',\n    LC : 'en' | 'fr' | 'es' | 'zh',\n    LI : 'en' | 'fr' | 'es' | 'zh',\n    LK : 'en',\n    LS : 'en' | 'fr' | 'es' | 'zh',\n    LT : 'en' | 'ru' | 'fr' | 'es' | 'zh',\n    LU : 'en' | 'de' | 'fr' | 'es' | 'zh',\n    LV : 'en' | 'ru' | 'fr' | 'es' | 'zh',\n    MA : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    MC : 'fr' | 'en',\n    MD : 'en',\n    ME : 'en',\n    MG : 'en' | 'fr' | 'es' | 'zh',\n    MH : 'en' | 'fr' | 'es' | 'zh',\n    MK : 'en',\n    ML : 'fr' | 'en' | 'es' | 'zh',\n    MN : 'en',\n    MQ : 'en' | 'fr' | 'es' | 'zh',\n    MR : 'en' | 'fr' | 'es' | 'zh',\n    MS : 'en' | 'fr' | 'es' | 'zh',\n    MT : 'en',\n    MU : 'en' | 'fr' | 'es' | 'zh',\n    MV : 'en',\n    MW : 'en' | 'fr' | 'es' | 'zh',\n    MX : 'es' | 'en',\n    MY : 'en',\n    MZ : 'en' | 'fr' | 'es' | 'zh',\n    NA : 'en' | 'fr' | 'es' | 'zh',\n    NC : 'en' | 'fr' | 'es' | 'zh',\n    NE : 'fr' | 'en' | 'es' | 'zh',\n    NF : 'en' | 'fr' | 'es' | 'zh',\n    NG : 'en',\n    NI : 'es' | 'en' | 'fr' | 'zh',\n    NL : 'nl' | 'en',\n    NO : 'no' | 'en',\n    NP : 'en',\n    NR : 'en' | 'fr' | 'es' | 'zh',\n    NU : 'en' | 'fr' | 'es' | 'zh',\n    NZ : 'en' | 'fr' | 'es' | 'zh',\n    OM : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    PA : 'es' | 'en' | 'fr' | 'zh',\n    PE : 'es' | 'en' | 'fr' | 'zh',\n    PF : 'en' | 'fr' | 'es' | 'zh',\n    PG : 'en' | 'fr' | 'es' | 'zh',\n    PH : 'en',\n    PL : 'pl' | 'en',\n    PM : 'en' | 'fr' | 'es' | 'zh',\n    PN : 'en' | 'fr' | 'es' | 'zh',\n    PT : 'pt' | 'en',\n    PW : 'en' | 'fr' | 'es' | 'zh',\n    PY : 'es' | 'en',\n    QA : 'en' | 'fr' | 'es' | 'zh' | 'ar',\n    RE : 'en' | 'fr' | 'es' | 'zh',\n    RO : 'en' | 'fr' | 'es' | 'zh',\n    RS : 'en' | 'fr' | 'es' | 'zh',\n    RU : 'ru' | 'en',\n    RW : 'fr' | 'en' | 'es' | 'zh',\n    SA : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    SB : 'en' | 'fr' | 'es' | 'zh',\n    SC : 'fr' | 'en' | 'es' | 'zh',\n    SE : 'sv' | 'en',\n    SG : 'en',\n    SH : 'en' | 'fr' | 'es' | 'zh',\n    SI : 'en' | 'fr' | 'es' | 'zh',\n    SJ : 'en' | 'fr' | 'es' | 'zh',\n    SK : 'sk' | 'en' | 'fr' | 'es' | 'zh',\n    SL : 'en' | 'fr' | 'es' | 'zh',\n    SM : 'en' | 'fr' | 'es' | 'zh',\n    SN : 'fr' | 'en' | 'es' | 'zh',\n    SO : 'en' | 'fr' | 'es' | 'zh',\n    SR : 'en' | 'fr' | 'es' | 'zh',\n    ST : 'en' | 'fr' | 'es' | 'zh',\n    SV : 'es' | 'en' | 'fr' | 'zh',\n    SZ : 'en' | 'fr' | 'es' | 'zh',\n    TC : 'en' | 'fr' | 'es' | 'zh',\n    TD : 'fr' | 'en' | 'es' | 'zh',\n    TG : 'fr' | 'en' | 'es' | 'zh',\n    TH : 'th' | 'en',\n    TJ : 'en' | 'fr' | 'es' | 'zh',\n    TM : 'en' | 'fr' | 'es' | 'zh',\n    TN : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    TO : 'en',\n    TR : 'tr' | 'en',\n    TT : 'en' | 'fr' | 'es' | 'zh',\n    TV : 'en' | 'fr' | 'es' | 'zh',\n    TW : 'zh' | 'en',\n    TZ : 'en' | 'fr' | 'es' | 'zh',\n    UA : 'en' | 'ru' | 'fr' | 'es' | 'zh',\n    UG : 'en' | 'fr' | 'es' | 'zh',\n    US : 'en' | 'fr' | 'es' | 'zh',\n    UY : 'es' | 'en' | 'fr' | 'zh',\n    VA : 'en' | 'fr' | 'es' | 'zh',\n    VC : 'en' | 'fr' | 'es' | 'zh',\n    VE : 'es' | 'en' | 'fr' | 'zh',\n    VG : 'en' | 'fr' | 'es' | 'zh',\n    VN : 'en',\n    VU : 'en' | 'fr' | 'es' | 'zh',\n    WF : 'en' | 'fr' | 'es' | 'zh',\n    WS : 'en',\n    YE : 'ar' | 'en' | 'fr' | 'es' | 'zh',\n    YT : 'en' | 'fr' | 'es' | 'zh',\n    ZA : 'en' | 'fr' | 'es' | 'zh',\n    ZM : 'en' | 'fr' | 'es' | 'zh',\n    ZW : 'en'\n};\n\ntype CountryMap = {\n    [ $Values<typeof COUNTRY> ] : Array<$Values<typeof LANG>>\n};\n\nexport const COUNTRY_LANGS : CountryMap = {\n    [COUNTRY.AD]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.AE]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH, LANG.AR ],\n    [COUNTRY.AG]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.AI]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.AL]: [ LANG.EN ],\n    [COUNTRY.AM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.AN]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.AO]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.AR]: [ LANG.ES, LANG.EN ],\n    [COUNTRY.AT]: [ LANG.DE, LANG.EN ],\n    [COUNTRY.AU]: [ LANG.EN ],\n    [COUNTRY.AW]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.AZ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.BA]: [ LANG.EN ],\n    [COUNTRY.BB]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.BE]: [ LANG.EN, LANG.NL, LANG.FR ],\n    [COUNTRY.BF]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.BG]: [ LANG.EN ],\n    [COUNTRY.BH]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.BI]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.BJ]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.BM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.BN]: [ LANG.EN ],\n    [COUNTRY.BO]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.BR]: [ LANG.PT, LANG.EN ],\n    [COUNTRY.BS]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.BT]: [ LANG.EN ],\n    [COUNTRY.BW]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.BY]: [ LANG.EN ],\n    [COUNTRY.BZ]: [ LANG.EN, LANG.ES, LANG.FR, LANG.ZH ],\n    [COUNTRY.CA]: [ LANG.EN, LANG.FR ],\n    [COUNTRY.CD]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.CG]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.CH]: [ LANG.DE, LANG.FR, LANG.EN ],\n    [COUNTRY.CI]: [ LANG.FR, LANG.EN ],\n    [COUNTRY.CK]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.CL]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.CM]: [ LANG.FR, LANG.EN ],\n    [COUNTRY.CN]: [ LANG.ZH ],\n    [COUNTRY.CO]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.CR]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.CV]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.CY]: [ LANG.EN ],\n    [COUNTRY.CZ]: [ LANG.CS, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.DE]: [ LANG.DE, LANG.EN ],\n    [COUNTRY.DJ]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.DK]: [ LANG.DA, LANG.EN ],\n    [COUNTRY.DM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.DO]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.DZ]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.EC]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.EE]: [ LANG.EN, LANG.RU, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.EG]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.ER]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.ES]: [ LANG.ES, LANG.EN ],\n    [COUNTRY.ET]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.FI]: [ LANG.FI, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.FJ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.FK]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.FM]: [ LANG.EN ],\n    [COUNTRY.FO]: [ LANG.DA, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.FR]: [ LANG.FR, LANG.EN ],\n    [COUNTRY.GA]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.GB]: [ LANG.EN ],\n    [COUNTRY.GD]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GE]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GF]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GI]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GL]: [ LANG.DA, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GN]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.GP]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GR]: [ LANG.EL, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GT]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.GW]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.GY]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.HK]: [ LANG.EN, LANG.ZH ],\n    [COUNTRY.HN]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.HR]: [ LANG.EN ],\n    [COUNTRY.HU]: [ LANG.HU, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.ID]: [ LANG.ID, LANG.EN ],\n    [COUNTRY.IE]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.IL]: [ LANG.HE, LANG.EN ],\n    [COUNTRY.IN]: [ LANG.EN ],\n    [COUNTRY.IS]: [ LANG.EN ],\n    [COUNTRY.IT]: [ LANG.IT, LANG.EN ],\n    [COUNTRY.JM]: [ LANG.EN, LANG.ES, LANG.FR, LANG.ZH ],\n    [COUNTRY.JO]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.JP]: [ LANG.JA, LANG.EN ],\n    [COUNTRY.KE]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.KG]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.KH]: [ LANG.EN ],\n    [COUNTRY.KI]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.KM]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.KN]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.KR]: [ LANG.KO, LANG.EN ],\n    [COUNTRY.KW]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.KY]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.KZ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.LA]: [ LANG.EN ],\n    [COUNTRY.LC]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.LI]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.LK]: [ LANG.EN ],\n    [COUNTRY.LS]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.LT]: [ LANG.EN, LANG.RU, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.LU]: [ LANG.EN, LANG.DE, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.LV]: [ LANG.EN, LANG.RU, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MA]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MC]: [ LANG.FR, LANG.EN ],\n    [COUNTRY.MD]: [ LANG.EN ],\n    [COUNTRY.ME]: [ LANG.EN ],\n    [COUNTRY.MG]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MH]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MK]: [ LANG.EN ],\n    [COUNTRY.ML]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.MN]: [ LANG.EN ],\n    [COUNTRY.MQ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MR]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MS]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MT]: [ LANG.EN ],\n    [COUNTRY.MU]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MV]: [ LANG.EN ],\n    [COUNTRY.MW]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.MX]: [ LANG.ES, LANG.EN ],\n    [COUNTRY.MY]: [ LANG.EN ],\n    [COUNTRY.MZ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.NA]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.NC]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.NE]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.NF]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.NG]: [ LANG.EN ],\n    [COUNTRY.NI]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.NL]: [ LANG.NL, LANG.EN ],\n    [COUNTRY.NO]: [ LANG.NO, LANG.EN ],\n    [COUNTRY.NP]: [ LANG.EN ],\n    [COUNTRY.NR]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.NU]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.NZ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.OM]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.PA]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.PE]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.PF]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.PG]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.PH]: [ LANG.EN ],\n    [COUNTRY.PL]: [ LANG.PL, LANG.EN ],\n    [COUNTRY.PM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.PN]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.PT]: [ LANG.PT, LANG.EN ],\n    [COUNTRY.PW]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.PY]: [ LANG.ES, LANG.EN ],\n    [COUNTRY.QA]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH, LANG.AR ],\n    [COUNTRY.RE]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.RO]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.RS]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.RU]: [ LANG.RU, LANG.EN ],\n    [COUNTRY.RW]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.SA]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SB]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SC]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.SE]: [ LANG.SV, LANG.EN ],\n    [COUNTRY.SG]: [ LANG.EN ],\n    [COUNTRY.SH]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SI]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SJ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SK]: [ LANG.SK, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SL]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SN]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.SO]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SR]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.ST]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.SV]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.SZ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.TC]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.TD]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.TG]: [ LANG.FR, LANG.EN, LANG.ES, LANG.ZH ],\n    [COUNTRY.TH]: [ LANG.TH, LANG.EN ],\n    [COUNTRY.TJ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.TM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.TN]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.TO]: [ LANG.EN ],\n    [COUNTRY.TR]: [ LANG.TR, LANG.EN ],\n    [COUNTRY.TT]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.TV]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.TW]: [ LANG.ZH, LANG.EN ],\n    [COUNTRY.TZ]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.UA]: [ LANG.EN, LANG.RU, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.UG]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.US]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.UY]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.VA]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.VC]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.VE]: [ LANG.ES, LANG.EN, LANG.FR, LANG.ZH ],\n    [COUNTRY.VG]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.VN]: [ LANG.EN ],\n    [COUNTRY.VU]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.WF]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.WS]: [ LANG.EN ],\n    [COUNTRY.YE]: [ LANG.AR, LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.YT]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.ZA]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.ZM]: [ LANG.EN, LANG.FR, LANG.ES, LANG.ZH ],\n    [COUNTRY.ZW]: [ LANG.EN ]\n};\n\nexport type LocaleType = {\n    country : $Values<typeof COUNTRY>,\n    lang : $Values<typeof LANG>\n};\n","/* @flow */\n\nexport const FUNDING = {\n    PAYPAL:      ('paypal' : 'paypal'),\n    VENMO:       ('venmo' : 'venmo'),\n    ITAU:        ('itau' : 'itau'),\n    CREDIT:      ('credit' : 'credit'),\n    CARD:        ('card' : 'card'),\n    IDEAL:       ('ideal' : 'ideal'),\n    SEPA:        ('sepa' : 'sepa'),\n    BANCONTACT:  ('bancontact' : 'bancontact'),\n    GIROPAY:     ('giropay' : 'giropay'),\n    SOFORT:      ('sofort' : 'sofort'),\n    EPS:         ('eps' : 'eps'),\n    MYBANK:      ('mybank' : 'mybank'),\n    P24:         ('p24' : 'p24'),\n    ZIMPLER:     ('zimpler' : 'zimpler'),\n    WECHATPAY:   ('wechatpay' : 'wechatpay')\n};\n\nexport const CARD = {\n    VISA:        ('visa' : 'visa'),\n    MASTERCARD:  ('mastercard' : 'mastercard'),\n    AMEX:        ('amex' : 'amex'),\n    DISCOVER:    ('discover' : 'discover'),\n    HIPER:       ('hiper' : 'hiper'),\n    ELO:         ('elo' : 'elo'),\n    JCB:         ('jcb' : 'jcb'),\n    CUP:         ('cup' : 'cup')\n};\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\nimport { CARD } from '@paypal/sdk-constants/src';\n\nimport { SVGCardLogo, type SVGCardLogoProps } from '../../../lib';\n\nexport function AmexLogo({ ...props } : { [string] : string } = {}) : ComponentNode<SVGCardLogoProps> {\n\n    return (\n        <SVGCardLogo\n\n            { ...props }\n            name={ CARD.AMEX }\n            render={ () => {\n                return (\n                    <svg width=\"40\" height=\"24\" viewBox=\"0 0 40 24\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" fill=\"rgb(20, 119, 190)\" />\n                        <path d=\"M6.26 12.32h2.313L7.415 9.66M27.353 9.977h-3.738v1.23h3.666v1.384h-3.675v1.385h3.821v1.005c.623-.77 1.33-1.466 2.025-2.235l.707-.77c-.934-1.004-1.87-2.08-2.804-3.075v1.077z\" fill=\"rgb(255, 255, 255)\" />\n                        <path d=\"M38.25 7h-5.605l-1.328 1.4L30.072 7H16.984l-1.017 2.416L14.877 7h-9.58L1.25 16.5h4.826l.623-1.556h1.4l.623 1.556H29.99l1.327-1.483 1.328 1.483h5.605l-4.36-4.667L38.25 7zm-17.685 8.1h-1.557V9.883L16.673 15.1h-1.33L13.01 9.883l-.084 5.217H9.73l-.623-1.556h-3.27L5.132 15.1H3.42l2.884-6.772h2.42l2.645 6.233V8.33h2.646l2.107 4.51 1.868-4.51h2.575V15.1zm14.727 0h-2.024l-2.024-2.26-2.023 2.26H22.06V8.328H29.53l1.795 2.177 2.024-2.177h2.025L32.26 11.75l3.032 3.35z\" fill=\"rgb(255, 255, 255)\" />\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\nimport { CARD } from '@paypal/sdk-constants/src';\n\nimport { SVGCardLogo, type SVGCardLogoProps } from '../../../lib';\n\nexport function DiscoverLogo({ ...props } : { [string] : string } = {}) : ComponentNode<SVGCardLogoProps> {\n    return (\n        <SVGCardLogo\n\n            { ...props }\n            name={ CARD.DISCOVER }\n            render={ () => {\n                return (\n                    <svg width=\"40\" height=\"24\" viewBox=\"0 0 40 24\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" fill=\"rgb(17, 49, 82)\" />\n                        <path d=\"M 5.498 13.349 C 5.16 13.654 4.722 13.787 4.028 13.787 L 3.738 13.787 L 3.738 10.141 L 4.028 10.141 C 4.722 10.141 5.143 10.265 5.498 10.587 C 5.868 10.917 6.093 11.431 6.093 11.959 C 6.093 12.489 5.869 13.019 5.498 13.349 Z M 4.243 9.206 L 2.666 9.206 L 2.666 14.721 L 4.236 14.721 C 5.069 14.721 5.671 14.524 6.199 14.084 C 6.829 13.564 7.199 12.779 7.199 11.968 C 7.199 10.34 5.985 9.206 4.243 9.206 Z M 7.696 14.721 L 8.77 14.721 L 8.77 9.207 L 7.696 9.207 M 11.393 11.323 C 10.748 11.083 10.559 10.926 10.559 10.628 C 10.559 10.281 10.897 10.018 11.359 10.018 C 11.681 10.018 11.946 10.15 12.226 10.464 L 12.788 9.727 C 12.326 9.322 11.773 9.115 11.17 9.115 C 10.195 9.115 9.452 9.793 9.452 10.695 C 9.452 11.455 9.798 11.845 10.807 12.208 C 11.227 12.356 11.442 12.455 11.55 12.522 C 11.765 12.662 11.872 12.862 11.872 13.092 C 11.872 13.54 11.518 13.872 11.038 13.872 C 10.528 13.872 10.114 13.614 9.868 13.136 L 9.173 13.806 C 9.668 14.532 10.263 14.856 11.08 14.856 C 12.196 14.856 12.98 14.111 12.98 13.044 C 12.98 12.168 12.617 11.771 11.395 11.324 Z M 13.316 11.968 C 13.316 13.588 14.586 14.845 16.223 14.845 C 16.685 14.845 17.081 14.755 17.57 14.525 L 17.57 13.258 C 17.14 13.688 16.76 13.862 16.273 13.862 C 15.191 13.862 14.423 13.077 14.423 11.962 C 14.423 10.902 15.215 10.067 16.223 10.067 C 16.735 10.067 17.123 10.25 17.57 10.687 L 17.57 9.421 C 17.098 9.181 16.71 9.081 16.248 9.081 C 14.621 9.081 13.316 10.364 13.316 11.968 Z M 26.088 12.911 L 24.62 9.206 L 23.446 9.206 L 25.783 14.862 L 26.361 14.862 L 28.741 9.207 L 27.576 9.207 M 29.226 14.721 L 32.272 14.721 L 32.272 13.787 L 30.299 13.787 L 30.299 12.299 L 32.199 12.299 L 32.199 11.365 L 30.299 11.365 L 30.299 10.141 L 32.272 10.141 L 32.272 9.206 L 29.226 9.206 M 34.373 11.745 L 34.059 11.745 L 34.059 10.075 L 34.389 10.075 C 35.059 10.075 35.423 10.355 35.423 10.893 C 35.423 11.447 35.059 11.745 34.373 11.745 Z M 36.528 10.835 C 36.528 9.802 35.818 9.207 34.578 9.207 L 32.986 9.207 L 32.986 14.721 L 34.059 14.721 L 34.059 12.506 L 34.199 12.506 L 35.686 14.721 L 37.006 14.721 L 35.273 12.398 C 36.083 12.233 36.528 11.678 36.528 10.835 Z\" fill=\"rgb(255, 255, 255)\" />\n                        <g id=\"MarkingBase_1_\" transform=\"matrix(0.089776, 0, 0, 0.089776, 2.192296, 5.72498)\">\n                            <linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"224.3917\" y1=\"44.1731\" x2=\"201.33\" y2=\"80.2807\" gradientTransform=\"matrix(1 0 0 -1 0 141.7323)\">\n                                <stop offset=\"0\" stop-color=\"#F89F21\" />\n                                <stop offset=\"0.2502\" stop-color=\"#F79A23\" />\n                                <stop offset=\"0.5331\" stop-color=\"#F78E22\" />\n                                <stop offset=\"0.6196\" stop-color=\"#F68721\" />\n                                <stop offset=\"0.7232\" stop-color=\"#F48220\" />\n                                <stop offset=\"1\" stop-color=\"#F27623\" />\n                            </linearGradient>\n                            <circle fill=\"url(#SVGID_1_)\" cx=\"207.343\" cy=\"70.866\" r=\"33.307\" />\n                            <linearGradient id=\"SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"220.7487\" y1=\"44.664\" x2=\"187.0436\" y2=\"110.5426\" gradientTransform=\"matrix(1 0 0 -1 0 141.7323)\">\n                                <stop offset=\"0\" stop-color=\"#F68721\" stop-opacity=\"0\" />\n                                <stop offset=\"0.3587\" stop-color=\"#E27027\" stop-opacity=\"0.2704\" />\n                                <stop offset=\"0.703\" stop-color=\"#D4612C\" stop-opacity=\"0.5299\" />\n                                <stop offset=\"0.9816\" stop-color=\"#D15D2D\" stop-opacity=\"0.74\" />\n                            </linearGradient>\n                            <circle opacity=\"0.65\" fill=\"url(#SVGID_2_)\" cx=\"207.343\" cy=\"70.866\" r=\"33.307\" />\n                        </g>\n                        <g id=\"Orange_1_\" enable-background=\"new    \" transform=\"matrix(0.469224, 0, 0, 0.469224, 13.785085, 6.199149)\">\n                            <g id=\"Orange\">\n                                <g>\n                                    <path d=\"M13,38c20.1,0,40,0,40,0c1.7,0,3-1.3,3-3V18C56,18,51.2,31.8,13,38z\" fill=\"rgb(255, 129, 38)\" />\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\nimport { CARD } from '@paypal/sdk-constants/src';\n\nimport { SVGCardLogo, type SVGCardLogoProps } from '../../../lib';\n\nexport function EloLogo({ ...props } : { [string] : string } = {}) : ComponentNode<SVGCardLogoProps> {\n    return (\n        <SVGCardLogo\n\n            { ...props }\n            name={ CARD.ELO }\n            render={ () => {\n                return (\n                    <svg width=\"40\" height=\"24\" viewBox=\"0 0 40 24\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" fill=\"rgb(21, 21, 21)\" />\n                        <path class=\"st0\" d=\"M 9.229 8.55 C 9.592 8.431 9.977 8.365 10.382 8.365 C 12.14 8.365 13.602 9.613 13.939 11.268 L 16.427 10.762 C 15.855 7.946 13.365 5.824 10.379 5.824 C 9.693 5.824 9.037 5.935 8.42 6.142 L 9.229 8.55 Z\" fill=\"rgb(255, 205, 5)\" />\n                        <path class=\"st1\" d=\"M 6.292 16.616 L 7.973 14.716 C 7.221 14.052 6.749 13.08 6.749 11.999 C 6.749 10.917 7.221 9.945 7.973 9.279 L 6.292 7.38 C 5.015 8.51 4.209 10.16 4.209 11.999 C 4.209 13.836 5.019 15.488 6.292 16.616\" fill=\"rgb(0, 164, 224)\" />\n                        <path class=\"st2\" d=\"M 13.939 12.723 C 13.602 14.379 12.136 15.626 10.382 15.626 C 9.977 15.626 9.592 15.562 9.229 15.442 L 8.422 17.849 C 9.039 18.055 9.698 18.167 10.382 18.167 C 13.365 18.167 15.855 16.05 16.427 13.235 L 13.939 12.723 Z\" fill=\"rgb(239, 66, 35)\" />\n                        <path d=\"M 18.603 14.794 C 18.521 14.663 18.412 14.453 18.343 14.296 C 17.948 13.381 17.932 12.434 18.264 11.526 C 18.631 10.527 19.33 9.765 20.233 9.378 C 21.366 8.889 22.626 8.986 23.713 9.632 C 24.406 10.028 24.897 10.641 25.269 11.506 C 25.319 11.615 25.358 11.737 25.398 11.835 L 18.603 14.794 Z M 20.87 10.845 C 20.066 11.194 19.65 11.949 19.734 12.834 L 23.151 11.363 C 22.565 10.675 21.802 10.444 20.87 10.845 Z M 23.578 14.044 C 23.578 14.044 23.578 14.044 23.578 14.044 L 23.508 13.998 C 23.302 14.331 22.985 14.595 22.584 14.768 C 21.82 15.1 21.113 15.014 20.602 14.569 L 20.559 14.643 C 20.559 14.643 20.559 14.643 20.559 14.643 L 19.688 15.936 C 19.905 16.088 20.134 16.213 20.376 16.315 C 21.333 16.712 22.311 16.693 23.279 16.273 C 23.978 15.971 24.527 15.509 24.9 14.924 L 23.578 14.044 Z\" fill=\"rgb(255, 255, 255)\" />\n                        <path d=\"M 27.77 7.466 L 27.77 14.673 L 28.891 15.13 L 28.254 16.614 L 27.018 16.1 C 26.742 15.979 26.552 15.797 26.409 15.588 C 26.272 15.377 26.171 15.085 26.171 14.698 L 26.171 7.466 L 27.77 7.466 Z\" fill=\"rgb(255, 255, 255)\" />\n                        <g transform=\"matrix(0.037801, 0, 0, 0.037801, 1.0913, 0.089785)\">\n                            <path d=\"M782.7,337.2c0-16.2,7.2-30.8,18.5-40.7l-30.4-33.9c-20.6,18.2-33.6,44.9-33.6,74.6c0,29.7,12.9,56.4,33.6,74.7l30.4-34&#10;&#9;&#9;C789.8,367.9,782.6,353.4,782.7,337.2z\" fill=\"rgb(255, 255, 255)\" />\n                            <path d=\"M836.7,391.4c-6,0-11.8-1-17.1-2.8L805,431.7c9.9,3.3,20.6,5.1,31.6,5.2c48.2,0,88.4-34.1,97.7-79.6l-44.7-9.1&#10;&#9;&#9;C884.6,372.9,862.8,391.4,836.7,391.4z\" fill=\"rgb(255, 255, 255)\" />\n                            <path d=\"M836.8,237.6c-11,0-21.7,1.8-31.6,5.1l14.4,43.2c5.4-1.8,11.2-2.8,17.1-2.8c26.2,0,48,18.6,53,43.3l44.7-9.1&#10;&#9;&#9;C925.2,272,885,237.7,836.8,237.6z\" fill=\"rgb(255, 255, 255)\" />\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\nimport { CARD } from '@paypal/sdk-constants/src';\n\nimport { SVGCardLogo, type SVGCardLogoProps } from '../../../lib';\n\nexport function HiperLogo({ ...props } : { [string] : string } = {}) : ComponentNode<SVGCardLogoProps> {\n    return (\n        <SVGCardLogo\n\n            { ...props }\n            name={ CARD.HIPER }\n            render={ () => {\n                return (\n                    <svg width=\"40\" height=\"24\" viewBox=\"0 0 40 24\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M0 1.927C0 .863.892 0 1.992 0h36.016C39.108 0 40 .863 40 1.927v20.146C40 23.137 39.108 24 38.008 24H1.992C.892 24 0 23.137 0 22.073V1.927z\" fill=\"rgb(243, 97, 24)\" />\n                        <path id=\"path16\" fill=\"rgb(255, 255, 255)\" style=\"fill-opacity: 1; fill-rule: nonzero; stroke: none;\" d=\"M 3.206 6.45 L 3.206 16.929 L 5.586 16.929 L 5.586 12.545 L 9.489 12.545 L 9.489 16.929 L 11.853 16.929 L 11.853 6.45 L 9.489 6.45 L 9.489 10.477 L 5.586 10.477 L 5.586 6.45 L 3.206 6.45\" />\n                        <path id=\"path18\" fill=\"rgb(255, 255, 255)\" style=\"fill-opacity: 1; fill-rule: nonzero; stroke: none;\" d=\"M 32.319 13.882 C 32.351 13.71 32.397 13.353 32.397 12.949 C 32.397 11.068 31.464 9.155 29.008 9.155 C 26.364 9.155 25.167 11.285 25.167 13.213 C 25.167 15.592 26.644 17.085 29.225 17.085 C 30.251 17.085 31.2 16.929 31.977 16.618 L 31.666 15.017 C 31.029 15.219 30.376 15.328 29.567 15.328 C 28.463 15.328 27.499 14.861 27.422 13.882 Z M 27.406 12.265 C 27.468 11.628 27.873 10.725 28.868 10.725 C 29.956 10.725 30.205 11.689 30.205 12.265 L 27.406 12.265\" />\n                        <path id=\"path20\" fill=\"rgb(255, 255, 255)\" style=\"fill-opacity: 1; fill-rule: nonzero; stroke: none;\" d=\"M 33.155 16.929 L 35.519 16.929 L 35.519 13.073 C 35.519 12.887 35.533 12.7 35.565 12.545 C 35.72 11.814 36.31 11.348 37.182 11.348 C 37.446 11.348 37.648 11.378 37.819 11.41 L 37.819 9.186 C 37.648 9.155 37.539 9.155 37.321 9.155 C 36.591 9.155 35.658 9.621 35.269 10.725 L 35.207 10.725 L 35.129 9.326 L 33.092 9.326 C 33.123 9.979 33.155 10.709 33.155 11.829 L 33.155 16.929\" />\n                        <path id=\"path22\" fill=\"rgb(254, 234, 1)\" style=\"fill-opacity: 1; fill-rule: evenodd; stroke: none;\" d=\"M 14.256 6.028 C 14.927 6.028 15.472 6.572 15.472 7.243 C 15.472 7.914 14.927 8.458 14.256 8.458 C 13.585 8.458 13.041 7.914 13.041 7.243 C 13.041 6.572 13.585 6.028 14.256 6.028\" />\n                        <path id=\"path24\" fill=\"rgb(255, 255, 255)\" style=\"fill-opacity: 1; fill-rule: evenodd; stroke: none;\" d=\"M 19.247 15.159 L 20.433 15.159 C 21.624 15.159 22.163 14.395 22.163 13.6 C 22.163 12.805 22.106 11.006 20.633 11.006 C 18.943 11.006 19.218 13.238 19.224 14.408 C 19.226 14.658 19.24 14.908 19.247 15.159 Z M 13.041 9.315 L 15.472 9.315 L 15.472 13.6 C 15.472 14.395 15.912 15.157 16.887 15.159 C 16.894 13.229 16.886 11.243 16.822 9.315 L 18.852 9.315 C 18.896 9.687 18.936 10.059 18.973 10.432 C 19.932 8.514 22.954 8.937 23.971 10.555 C 25.022 12.228 25.379 17.017 20.433 17.017 L 19.282 17.017 C 19.293 17.988 19.295 18.963 19.295 19.936 L 16.865 19.936 C 16.865 19.001 16.871 18.022 16.878 17.016 C 14.252 17.007 13.041 15.339 13.041 13.6 L 13.041 9.315\" />\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\nimport { CARD } from '@paypal/sdk-constants/src';\n\nimport { SVGCardLogo, type SVGCardLogoProps } from '../../../lib';\n\nexport function JcbLogo({ ...props } : { [string] : string } = {}) : ComponentNode<SVGCardLogoProps> {\n    return (\n        <SVGCardLogo\n\n            { ...props }\n            name={ CARD.JCB }\n            render={ () => {\n                return (\n                    <svg width=\"40\" height=\"24\" viewBox=\"0 0 40 24\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <defs>\n                            <pattern id=\"pattern-0\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\" viewBox=\"0 0 100 100\">\n                                <path d=\"M 0 0 L 50 0 L 50 100 L 0 100 Z\" style=\"fill: black;\" />\n                            </pattern>\n                        </defs>\n                        <path d=\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\" fill=\"rgb(255, 255, 255)\" style=\"stroke: rgb(233, 234, 231);\" />\n                        <g transform=\"matrix(0.100306, 0, 0, 0.100306, 4.733743, 10.105099)\" id=\"g6321\">\n                            <g transform=\"matrix(1.8215159,0,0,1.8215159,-8.5437653,-109.83667)\" id=\"g6323\">\n                                <path style=\"fill:#ffffff\" id=\"path6325\" d=\"m 174,108.3 c 0,14 -11.4,25.4 -25.4,25.4 l -138.2,0 0,-100.6 c 0,-14 11.4,-25.4 25.4,-25.4 l 138.2,0 0,100.6 z\" class=\"st0\" />\n                                <g id=\"g6327\">\n                                    <linearGradient gradientTransform=\"matrix(1.125,0,0,1.125,-11.9755,-13.8615)\" y2=\"81.398598\" x2=\"157.3299\" y1=\"81.398598\" x1=\"117.3856\" gradientUnits=\"userSpaceOnUse\" id=\"SVGID_1_\">\n                                        <stop id=\"stop6330\" style=\"stop-color:#007940\" offset=\"0\" />\n                                        <stop id=\"stop6332\" style=\"stop-color:#00873F\" offset=\"0.2285\" />\n                                        <stop id=\"stop6334\" style=\"stop-color:#40A737\" offset=\"0.7433\" />\n                                        <stop id=\"stop6336\" style=\"stop-color:#5CB531\" offset=\"1\" />\n                                    </linearGradient>\n                                    <path style=\"fill:url(#SVGID_1_)\" id=\"path6338\" d=\"m 129,82.5 10.5,0 c 0.3,0 1,-0.1 1.3,-0.1 2,-0.4 3.7,-2.2 3.7,-4.7 0,-2.4 -1.7,-4.2 -3.7,-4.7 -0.3,-0.1 -0.9,-0.1 -1.3,-0.1 l -10.5,0 0,9.6 z\" class=\"st1\" />\n                                    <linearGradient gradientTransform=\"matrix(1.125,0,0,1.125,-11.9755,-13.8615)\" y2=\"75.171402\" x2=\"157.3318\" y1=\"75.171402\" x1=\"117.3844\" gradientUnits=\"userSpaceOnUse\" id=\"SVGID_2_\">\n                                        <stop id=\"stop6341\" style=\"stop-color:#007940\" offset=\"0\" />\n                                        <stop id=\"stop6343\" style=\"stop-color:#00873F\" offset=\"0.2285\" />\n                                        <stop id=\"stop6345\" style=\"stop-color:#40A737\" offset=\"0.7433\" />\n                                        <stop id=\"stop6347\" style=\"stop-color:#5CB531\" offset=\"1\" />\n                                    </linearGradient>\n                                    <path style=\"fill:url(#SVGID_2_)\" id=\"path6349\" d=\"m 138.3,16.2 c -10,0 -18.2,8.1 -18.2,18.2 l 0,18.9 25.7,0 c 0.6,0 1.3,0 1.8,0.1 5.8,0.3 10.1,3.3 10.1,8.5 0,4.1 -2.9,7.6 -8.3,8.3 l 0,0.2 c 5.9,0.4 10.4,3.7 10.4,8.8 0,5.5 -5,9.1 -11.6,9.1 l -28.2,0 0,37 26.7,0 c 10,0 18.2,-8.1 18.2,-18.2 l 0,-90.9 -26.6,0 z\" class=\"st2\" />\n                                    <linearGradient gradientTransform=\"matrix(1.125,0,0,1.125,-11.9755,-13.8615)\" y2=\"68.399101\" x2=\"157.33051\" y1=\"68.399101\" x1=\"117.3846\" gradientUnits=\"userSpaceOnUse\" id=\"SVGID_3_\">\n                                        <stop id=\"stop6352\" style=\"stop-color:#007940\" offset=\"0\" />\n                                        <stop id=\"stop6354\" style=\"stop-color:#00873F\" offset=\"0.2285\" />\n                                        <stop id=\"stop6356\" style=\"stop-color:#40A737\" offset=\"0.7433\" />\n                                        <stop id=\"stop6358\" style=\"stop-color:#5CB531\" offset=\"1\" />\n                                    </linearGradient>\n                                    <path style=\"fill:url(#SVGID_3_)\" id=\"path6360\" d=\"m 143.2,63.1 c 0,-2.4 -1.7,-4 -3.7,-4.3 -0.2,0 -0.7,-0.1 -1,-0.1 l -9.5,0 0,8.8 9.5,0 c 0.3,0 0.9,0 1,-0.1 2,-0.3 3.7,-1.9 3.7,-4.3 z\" class=\"st3\" />\n                                </g>\n                                <linearGradient gradientTransform=\"matrix(1.125,0,0,1.125,-11.9755,-13.8615)\" y2=\"75.171402\" x2=\"68.522102\" y1=\"75.171402\" x1=\"27.9594\" gradientUnits=\"userSpaceOnUse\" id=\"SVGID_4_\">\n                                    <stop id=\"stop6363\" style=\"stop-color:#1F286F\" offset=\"0\" />\n                                    <stop id=\"stop6365\" style=\"stop-color:#004E94\" offset=\"0.4751\" />\n                                    <stop id=\"stop6367\" style=\"stop-color:#0066B1\" offset=\"0.8261\" />\n                                    <stop id=\"stop6369\" style=\"stop-color:#006FBC\" offset=\"1\" />\n                                </linearGradient>\n                                <path style=\"fill:url(#SVGID_4_)\" id=\"path6371\" d=\"m 37.7,16.2 c -10,0 -18.2,8.1 -18.2,18.2 l 0,44.9 c 5.1,2.5 10.4,4.1 15.7,4.1 6.3,0 9.7,-3.8 9.7,-9 l 0,-21.2 15.6,0 0,21.1 c 0,8.2 -5.1,14.9 -22.4,14.9 -10.5,0 -18.7,-2.3 -18.7,-2.3 l 0,38.3 26.7,0 c 10,0 18.2,-8.1 18.2,-18.2 l 0,-90.8 -26.6,0 z\" class=\"st4\" />\n                                <linearGradient gradientTransform=\"matrix(1.125,0,0,1.125,-11.9755,-13.8615)\" y2=\"75.171402\" x2=\"111.8553\" y1=\"75.171402\" x1=\"72.459503\" gradientUnits=\"userSpaceOnUse\" id=\"SVGID_5_\">\n                                    <stop id=\"stop6374\" style=\"stop-color:#6C2C2F\" offset=\"0\" />\n                                    <stop id=\"stop6376\" style=\"stop-color:#882730\" offset=\"0.1735\" />\n                                    <stop id=\"stop6378\" style=\"stop-color:#BE1833\" offset=\"0.5731\" />\n                                    <stop id=\"stop6380\" style=\"stop-color:#DC0436\" offset=\"0.8585\" />\n                                    <stop id=\"stop6382\" style=\"stop-color:#E60039\" offset=\"1\" />\n                                </linearGradient>\n                                <path style=\"fill:url(#SVGID_5_)\" id=\"path6384\" d=\"m 88,16.2 c -10,0 -18.2,8.1 -18.2,18.2 l 0,23.8 c 4.6,-3.9 12.6,-6.4 25.5,-5.8 6.9,0.3 14.3,2.2 14.3,2.2 l 0,7.7 c -3.7,-1.9 -8.1,-3.6 -13.8,-4 -9.8,-0.7 -15.7,4.1 -15.7,12.5 0,8.5 5.9,13.3 15.7,12.5 5.7,-0.4 10.1,-2.2 13.8,-4 l 0,7.7 c 0,0 -7.3,1.9 -14.3,2.2 -12.9,0.6 -20.9,-1.9 -25.5,-5.8 l 0,42 26.7,0 c 10,0 18.2,-8.1 18.2,-18.2 l 0,-91 -26.7,0 z\" class=\"st5\" />\n                            </g>\n                            <g id=\"g6386\" />\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\nimport { CARD } from '@paypal/sdk-constants/src';\n\nimport { SVGCardLogo, type SVGCardLogoProps } from '../../../lib';\n\nexport function MastercardLogo({ ...props } : { [string] : string } = {}) : ComponentNode<SVGCardLogoProps> {\n    return (\n        <SVGCardLogo\n\n            { ...props }\n            name={ CARD.MASTERCARD }\n            render={ () => {\n                return (\n                    <svg width=\"40\" height=\"24\" viewBox=\"0 0 40 24\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M0 1.927C0 .863.892 0 1.992 0h36.016C39.108 0 40 .863 40 1.927v20.146C40 23.137 39.108 24 38.008 24H1.992C.892 24 0 23.137 0 22.073V1.927z\" fill=\"rgb(62, 57, 57)\" />\n                        <path fill=\"rgb(255, 95, 0)\" d=\"M 22.205 3.901 L 15.688 3.901 L 15.688 15.589 L 22.205 15.589\" />\n                        <path d=\"M 16.1 9.747 C 16.1 7.371 17.218 5.265 18.935 3.901 C 17.67 2.912 16.078 2.312 14.342 2.312 C 10.223 2.312 6.892 5.636 6.892 9.746 C 6.892 13.853 10.223 17.178 14.342 17.178 C 16.078 17.178 17.67 16.58 18.935 15.588 C 17.216 14.246 16.099 12.119 16.099 9.745 Z\" fill=\"rgb(235, 0, 27)\" />\n                        <path d=\"M 30.996 9.747 C 30.996 13.854 27.663 17.179 23.547 17.179 C 21.81 17.179 20.216 16.581 18.954 15.589 C 20.691 14.227 21.788 12.12 21.788 9.746 C 21.788 7.37 20.671 5.264 18.954 3.9 C 20.216 2.911 21.81 2.311 23.547 2.311 C 27.663 2.311 30.996 5.657 30.996 9.745 Z\" fill=\"rgb(247, 158, 27)\" />\n                        <path d=\"M 7.167 22.481 L 7.167 20.43 C 7.167 19.641 6.685 19.127 5.857 19.127 C 5.443 19.127 4.993 19.262 4.683 19.71 C 4.44 19.332 4.096 19.127 3.579 19.127 C 3.233 19.127 2.888 19.23 2.612 19.607 L 2.612 19.197 L 1.886 19.197 L 1.886 22.481 L 2.612 22.481 L 2.612 20.668 C 2.612 20.086 2.921 19.812 3.406 19.812 C 3.888 19.812 4.131 20.121 4.131 20.669 L 4.131 22.481 L 4.856 22.481 L 4.856 20.668 C 4.856 20.086 5.204 19.812 5.651 19.812 C 6.137 19.812 6.377 20.121 6.377 20.669 L 6.377 22.481 L 7.171 22.481 Z M 17.909 19.197 L 16.734 19.197 L 16.734 18.204 L 16.007 18.204 L 16.007 19.197 L 15.352 19.197 L 15.352 19.845 L 16.007 19.845 L 16.007 21.351 C 16.007 22.106 16.319 22.551 17.146 22.551 C 17.459 22.551 17.804 22.449 18.044 22.309 L 17.839 21.695 C 17.632 21.831 17.389 21.867 17.216 21.867 C 16.872 21.867 16.734 21.66 16.734 21.319 L 16.734 19.847 L 17.909 19.847 L 17.909 19.198 Z M 24.053 19.127 C 23.639 19.127 23.364 19.332 23.191 19.607 L 23.191 19.197 L 22.465 19.197 L 22.465 22.481 L 23.191 22.481 L 23.191 20.633 C 23.191 20.086 23.434 19.777 23.882 19.777 C 24.018 19.777 24.192 19.812 24.33 19.847 L 24.538 19.162 C 24.401 19.127 24.192 19.127 24.052 19.127 Z M 14.765 19.469 C 14.42 19.229 13.937 19.127 13.418 19.127 C 12.588 19.127 12.036 19.538 12.036 20.188 C 12.036 20.736 12.453 21.044 13.175 21.146 L 13.524 21.181 C 13.903 21.249 14.108 21.351 14.108 21.523 C 14.108 21.765 13.832 21.934 13.35 21.934 C 12.864 21.934 12.484 21.764 12.244 21.592 L 11.898 22.139 C 12.278 22.411 12.794 22.549 13.313 22.549 C 14.28 22.549 14.831 22.105 14.831 21.488 C 14.831 20.908 14.383 20.599 13.692 20.496 L 13.348 20.462 C 13.037 20.428 12.795 20.36 12.795 20.155 C 12.795 19.914 13.038 19.777 13.418 19.777 C 13.83 19.777 14.245 19.949 14.453 20.052 L 14.764 19.469 Z M 34.033 19.127 C 33.618 19.127 33.342 19.332 33.171 19.607 L 33.171 19.197 L 32.445 19.197 L 32.445 22.481 L 33.171 22.481 L 33.171 20.633 C 33.171 20.086 33.414 19.777 33.862 19.777 C 33.998 19.777 34.17 19.812 34.307 19.847 L 34.515 19.162 C 34.38 19.127 34.172 19.127 34.033 19.127 Z M 24.779 20.838 C 24.779 21.834 25.47 22.551 26.54 22.551 C 27.025 22.551 27.369 22.449 27.715 22.173 L 27.369 21.593 C 27.092 21.798 26.816 21.901 26.504 21.901 C 25.919 21.901 25.505 21.49 25.505 20.84 C 25.505 20.226 25.919 19.813 26.507 19.78 C 26.816 19.78 27.092 19.883 27.369 20.089 L 27.715 19.507 C 27.369 19.233 27.024 19.13 26.54 19.13 C 25.47 19.13 24.779 19.85 24.779 20.841 Z M 31.478 20.838 L 31.478 19.198 L 30.75 19.198 L 30.75 19.608 C 30.51 19.3 30.165 19.128 29.717 19.128 C 28.784 19.128 28.058 19.848 28.058 20.84 C 28.058 21.835 28.784 22.552 29.716 22.552 C 30.197 22.552 30.543 22.382 30.748 22.074 L 30.748 22.484 L 31.477 22.484 L 31.477 20.84 Z M 28.818 20.838 C 28.818 20.259 29.196 19.779 29.819 19.779 C 30.406 19.779 30.821 20.224 30.821 20.84 C 30.821 21.424 30.406 21.902 29.819 21.902 C 29.196 21.869 28.818 21.424 28.818 20.841 Z M 20.148 19.128 C 19.183 19.128 18.494 19.813 18.494 20.84 C 18.494 21.869 19.183 22.552 20.185 22.552 C 20.671 22.552 21.154 22.417 21.533 22.108 L 21.188 21.595 C 20.914 21.799 20.565 21.937 20.222 21.937 C 19.772 21.937 19.323 21.732 19.219 21.149 L 21.671 21.149 L 21.671 20.878 C 21.705 19.815 21.083 19.13 20.15 19.13 Z M 20.148 19.748 C 20.6 19.748 20.911 20.019 20.98 20.532 L 19.253 20.532 C 19.321 20.087 19.633 19.748 20.148 19.748 Z M 38.141 20.84 L 38.141 17.898 L 37.412 17.898 L 37.412 19.61 C 37.173 19.302 36.828 19.13 36.38 19.13 C 35.446 19.13 34.721 19.85 34.721 20.841 C 34.721 21.837 35.446 22.554 36.379 22.554 C 36.861 22.554 37.206 22.383 37.41 22.076 L 37.41 22.486 L 38.14 22.486 L 38.14 20.841 Z M 35.481 20.84 C 35.481 20.261 35.861 19.78 36.484 19.78 C 37.069 19.78 37.486 20.226 37.486 20.841 C 37.486 21.426 37.069 21.904 36.484 21.904 C 35.861 21.87 35.481 21.426 35.481 20.843 Z M 11.237 20.84 L 11.237 19.2 L 10.515 19.2 L 10.515 19.61 C 10.272 19.302 9.928 19.13 9.478 19.13 C 8.545 19.13 7.82 19.85 7.82 20.841 C 7.82 21.837 8.545 22.554 9.477 22.554 C 9.96 22.554 10.304 22.383 10.512 22.076 L 10.512 22.486 L 11.236 22.486 L 11.236 20.841 Z M 8.546 20.84 C 8.546 20.261 8.926 19.78 9.548 19.78 C 10.134 19.78 10.55 20.226 10.55 20.841 C 10.55 21.426 10.134 21.904 9.548 21.904 C 8.926 21.87 8.546 21.426 8.546 20.843 Z\" fill=\"rgb(255, 255, 255)\" />\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\nimport { CARD } from '@paypal/sdk-constants/src';\n\nimport { SVGCardLogo, type SVGCardLogoProps } from '../../../lib';\n\nexport function VisaLogo({ ...props } : { [string] : string } = {}) : ComponentNode<SVGCardLogoProps> {\n    return (\n        <SVGCardLogo\n\n            { ...props }\n            name={ CARD.VISA }\n            render={ () => {\n                return (\n                    <svg width=\"40\" height=\"24\" viewBox=\"0 0 40 24\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M0 1.927C0 .863.892 0 1.992 0h36.016C39.108 0 40 .863 40 1.927v20.146C40 23.137 39.108 24 38.008 24H1.992C.892 24 0 23.137 0 22.073V1.927z\" fill=\"rgb(33, 86, 154)\" />\n                        <path d=\"M19.596 7.885l-2.11 9.478H14.93l2.11-9.478h2.554zm10.743 6.12l1.343-3.56.773 3.56H30.34zm2.85 3.358h2.36l-2.063-9.478H31.31c-.492 0-.905.274-1.088.695l-3.832 8.783h2.682l.532-1.415h3.276l.31 1.415zm-6.667-3.094c.01-2.502-3.6-2.64-3.577-3.76.008-.338.345-.7 1.083-.793.365-.045 1.373-.08 2.517.425l.448-2.01c-.615-.214-1.405-.42-2.39-.42-2.523 0-4.3 1.288-4.313 3.133-.016 1.364 1.268 2.125 2.234 2.58.996.464 1.33.762 1.325 1.177-.006.636-.793.918-1.526.928-1.285.02-2.03-.333-2.623-.6l-.462 2.08c.598.262 1.7.49 2.84.502 2.682 0 4.437-1.273 4.445-3.243zM15.948 7.884l-4.138 9.478h-2.7L7.076 9.8c-.123-.466-.23-.637-.606-.834-.615-.32-1.63-.62-2.52-.806l.06-.275h4.345c.554 0 1.052.354 1.178.966l1.076 5.486 2.655-6.45h2.683z\" fill=\"rgb(255, 255, 255)\" />\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","\n/* @flow */\n/** @jsx node */\n\nimport { COUNTRY, type LocaleType } from '@paypal/sdk-constants/src';\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary: '#003087'\n    },\n    [ LOGO_COLOR.BLUE ]: {\n        primary:   '#003087'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#333030'\n    }\n};\n\nexport function CreditLogo({ logoColor, locale, ...props } :\n    { logoColor : $Values<typeof LOGO_COLOR>, locale : LocaleType }) : ComponentNode<SVGLogoProps> {\n\n    const { primary } = getLogoColors(LOGO.CREDIT, LOGO_COLORS, logoColor);\n    const { country } = locale;\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.CREDIT }\n            logoColor={ logoColor }\n            render={ () => {\n                switch (country) {\n                case COUNTRY.DE:\n                    return (\n                        <svg width=\"135\" height=\"32\" viewBox=\"0 0 135 32\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <g transform=\"matrix(1.3333333,0,0,-1.3333333,10,40)\" fill={ primary }>\n                                <g transform=\"matrix(0.17016911,0,0,0.17819595,39.327112,22.053803)\">\n                                    <path d=\"m 0,0 -1.35,-8.619 c -0.146,-0.929 -0.946,-1.613 -1.886,-1.613 h -40.935 c -0.922,0 -1.445,1.057 -0.884,1.79 l 29.853,39.007 h -19.237 c -0.683,0 -1.205,0.611 -1.099,1.286 l 1.35,8.619 c 0.145,0.929 0.945,1.613 1.885,1.613 H 7.112 c 0.922,0 1.444,-1.055 0.886,-1.788 L -21.724,1.286 H -1.1 C -0.416,1.286 0.106,0.675 0,0 m 203.3312,42.0833 c 0.684,0 1.206,-0.611 1.1,-1.287 l -4.446,-28.132 c -1.041,-6.73 -2.359,-13.391 -8.395,-18.456 -5.065,-4.302 -12.143,-5.828 -18.248,-5.828 -6.106,0 -12.767,1.526 -16.444,5.828 -4.371,5.065 -3.608,11.726 -2.567,18.456 l 4.394,27.808 c 0.146,0.928 0.946,1.611 1.885,1.611 h 10.668 c 0.683,0 1.205,-0.61 1.1,-1.285 l -4.101,-26.261 c -1.11,-6.799 -1.804,-14.223 6.938,-14.223 8.743,0 10.408,7.424 11.518,14.223 l 4.05,25.932 c 0.145,0.929 0.945,1.614 1.885,1.614 z m -361.2517,-52.3157 h -10.665 c -0.685,0 -1.207,0.611 -1.1,1.287 l 6.249,39.511 h -9.939 c -0.684,0 -1.206,0.61 -1.1,1.285 l 1.35,8.619 c 0.146,0.929 0.946,1.614 1.886,1.614 h 33.145 c 0.684,0 1.206,-0.611 1.1,-1.286 l -1.35,-8.619 c -0.145,-0.929 -0.945,-1.613 -1.885,-1.613 h -9.608 l -6.198,-39.188 c -0.147,-0.927 -0.946,-1.61 -1.885,-1.61 m -98.5277,28.8638 h 1.318 c 4.441,0 9.549,0.837 10.477,6.522 0.929,5.688 -2.034,6.505 -6.779,6.522 h -1.927 c -0.58,0 -1.075,-0.422 -1.166,-0.995 z m 23.345,-28.864 h -13.977 c -0.594,0 -1.136,0.341 -1.393,0.878 l -9.224,19.244 h -0.139 l -2.985,-18.819 c -0.119,-0.75 -0.766,-1.303 -1.526,-1.303 h -10.977 c -0.684,0 -1.206,0.611 -1.1,1.287 l 7.848,49.725 c 0.119,0.751 0.766,1.304 1.526,1.304 h 19.009 c 10.339,0 17.416,-4.926 15.681,-16.097 -1.179,-7.216 -6.175,-13.461 -13.807,-14.779 l 12.015,-19.748 c 0.451,-0.742 -0.083,-1.692 -0.951,-1.692 m 445.918,52.3159 h 11.349 c 0.385,0 0.743,-0.199 0.946,-0.526 l 19.517,-31.46 h 0.139 l 4.81,30.376 c 0.147,0.927 0.946,1.61 1.885,1.61 h 10.667 c 0.684,0 1.206,-0.611 1.099,-1.287 l -7.799,-49.418 c -0.147,-0.927 -0.946,-1.611 -1.886,-1.611 h -11.347 c -0.386,0 -0.744,0.2 -0.947,0.528 l -19.517,31.528 h -0.139 l -4.811,-30.445 c -0.146,-0.928 -0.946,-1.611 -1.885,-1.611 h -10.666 c -0.684,0 -1.206,0.611 -1.1,1.287 l 7.8,49.418 c 0.146,0.928 0.946,1.611 1.885,1.611 m -304.5422,0 h 11.349 c 0.385,0 0.743,-0.199 0.946,-0.526 l 19.517,-31.46 h 0.139 l 4.81,30.376 c 0.147,0.927 0.946,1.61 1.885,1.61 h 10.667 c 0.684,0 1.206,-0.611 1.099,-1.287 l -7.799,-49.418 c -0.147,-0.927 -0.946,-1.611 -1.886,-1.611 h -11.347 c -0.386,0 -0.744,0.2 -0.947,0.528 l -19.517,31.528 h -0.139 l -4.811,-30.445 c -0.146,-0.928 -0.946,-1.611 -1.885,-1.611 h -10.666 c -0.684,0 -1.206,0.611 -1.1,1.287 l 7.8,49.418 c 0.146,0.928 0.946,1.611 1.885,1.611 M 131.156,1.2855 h 15.004 c 0.684,0 1.206,-0.61 1.1,-1.286 l -1.35,-8.619 c -0.145,-0.928 -0.945,-1.613 -1.885,-1.613 h -26.969 c -0.685,0 -1.207,0.611 -1.1,1.287 l 7.799,49.418 c 0.147,0.927 0.946,1.611 1.885,1.611 h 10.666 c 0.684,0 1.206,-0.612 1.099,-1.287 z m -33.5321,20.607 2.937,18.58 c 0.147,0.928 0.946,1.611 1.885,1.611 h 10.666 c 0.684,0 1.206,-0.611 1.1,-1.287 l -7.8,-49.418 c -0.146,-0.927 -0.946,-1.611 -1.885,-1.611 h -10.664 c -0.685,0 -1.207,0.612 -1.1,1.288 l 3.196,20.152 h -19.636 l -3.145,-19.83 c -0.147,-0.927 -0.946,-1.61 -1.885,-1.61 h -10.666 c -0.685,0 -1.207,0.611 -1.1,1.287 l 7.799,49.418 c 0.147,0.928 0.946,1.611 1.885,1.611 h 10.666 c 0.684,0 1.206,-0.611 1.099,-1.287 l -2.988,-18.904 z m 221.8207,-2.9142 c 0.699,0 1.224,-0.638 1.094,-1.325 -1.342,-7.069 -3.07,-13.21 -8.427,-19.351 -6.245,-7.147 -14.432,-10.269 -23.175,-10.269 -16.444,0 -26.088,11.171 -23.521,27.615 2.706,16.999 15.958,28.17 32.819,28.17 10.373,0 17.776,-4.519 20.966,-13.617 0.198,-0.566 -0.087,-1.189 -0.644,-1.409 l -11.599,-4.569 c -0.598,-0.236 -1.275,0.081 -1.466,0.694 -1.354,4.349 -4.637,7.175 -9.686,7.175 -8.95,0 -14.987,-8.535 -16.236,-16.514 -1.318,-8.118 2.29,-16.374 11.24,-16.374 5.898,0 10.894,3.053 12.351,9.089 h -9.793 c -0.686,0 -1.209,0.614 -1.099,1.292 l 1.373,8.458 c 0.088,0.539 0.553,0.935 1.099,0.935 z m -438.1464,9.9777 -1.132,-7.133 h 14.032 c 0.684,0 1.206,-0.61 1.1,-1.285 l -1.35,-8.619 c -0.145,-0.929 -0.945,-1.613 -1.885,-1.613 h -12.076 c -0.937,0 -1.735,-0.68 -1.884,-1.605 l -1.198,-7.415 h 14.865 c 0.684,0 1.206,-0.611 1.1,-1.286 l -1.35,-8.619 c -0.145,-0.929 -0.945,-1.613 -1.885,-1.613 h -26.831 c -0.684,0 -1.206,0.611 -1.099,1.286 l 7.799,49.418 c 0.146,0.928 0.946,1.611 1.885,1.611 h 26.834 c 0.683,0 1.206,-0.61 1.1,-1.285 l -1.35,-8.619 c -0.146,-0.929 -0.946,-1.614 -1.886,-1.614 h -12.904 c -0.939,0 -1.738,-0.682 -1.885,-1.609 M 34.135,25.9168 H 33.996 L 25.739,9.2648 h 11.31 z m -13.807,-27.06 -4.747,-8.518 c -0.197,-0.353 -0.569,-0.571 -0.973,-0.571 H 2.701 c -0.844,0 -1.381,0.902 -0.979,1.644 l 27.171,50.089 c 0.194,0.359 0.57,0.583 0.978,0.583 h 13.29 c 0.523,0 0.976,-0.365 1.088,-0.876 L 55.21,-8.8812 c 0.152,-0.694 -0.377,-1.351 -1.088,-1.351 H 41.905 c -0.525,0 -0.979,0.367 -1.089,0.88 l -1.755,8.209 z m -216.5493,27.06 h -0.139 l -8.257,-16.652 h 11.31 z m -13.807,-27.06 -4.747,-8.518 c -0.197,-0.353 -0.569,-0.571 -0.973,-0.571 h -11.907 c -0.844,0 -1.381,0.902 -0.979,1.644 l 27.171,50.089 c 0.194,0.359 0.57,0.583 0.978,0.583 h 13.29 c 0.523,0 0.976,-0.365 1.088,-0.876 l 10.961,-50.089 c 0.152,-0.694 -0.377,-1.351 -1.088,-1.351 h -12.217 c -0.525,0 -0.979,0.367 -1.089,0.88 l -1.755,8.209 z m 517.9793,-39.4791 -6.146,-39.098 c -0.119,-0.757 0.467,-1.442 1.233,-1.442 h 6.181 c 1.024,0 1.896,0.745 2.055,1.756 l 6.06,38.396 c 0.119,0.757 -0.466,1.442 -1.233,1.442 h -6.917 c -0.614,0 -1.138,-0.447 -1.233,-1.054 m -77.0618,-12.7966 h -7.207 c -0.689,0 -1.334,-0.342 -1.721,-0.912 l -9.942,-14.642 -4.213,14.07 c -0.263,0.88 -1.073,1.484 -1.993,1.484 h -7.084 c -0.856,0 -1.457,-0.842 -1.182,-1.651 l 7.936,-23.294 -7.464,-10.531 c -0.586,-0.827 0.005,-1.97 1.018,-1.97 h 7.2 c 0.683,0 1.322,0.334 1.71,0.895 l 23.968,34.591 c 0.574,0.828 -0.019,1.96 -1.026,1.96 m 58.6183,-13.956 c -0.693,-4.097 -3.945,-6.847 -8.093,-6.847 -2.08,0 -3.744,0.669 -4.815,1.935 -1.06,1.256 -1.46,3.045 -1.123,5.037 0.645,4.06 3.95,6.899 8.035,6.899 2.036,0 3.689,-0.675 4.78,-1.954 1.099,-1.287 1.53,-3.088 1.216,-5.07 m 9.992,13.956 h -7.169 c -0.615,0 -1.138,-0.447 -1.234,-1.054 l -0.315,-2.004 -0.501,0.726 c -1.553,2.254 -5.014,3.007 -8.469,3.007 -7.922,0 -14.689,-6.003 -16.006,-14.422 -0.685,-4.201 0.288,-8.215 2.669,-11.016 2.189,-2.574 5.311,-3.646 9.031,-3.646 6.385,0 9.927,4.102 9.927,4.102 l -0.321,-1.993 c -0.12,-0.758 0.466,-1.443 1.233,-1.443 h 6.457 c 1.024,0 1.896,0.744 2.055,1.756 l 3.876,24.545 c 0.12,0.757 -0.466,1.442 -1.233,1.442 m -116.7913,-13.956 c -0.693,-4.097 -3.945,-6.847 -8.093,-6.847 -2.08,0 -3.744,0.669 -4.815,1.935 -1.06,1.256 -1.46,3.045 -1.123,5.037 0.645,4.06 3.95,6.899 8.035,6.899 2.036,0 3.689,-0.675 4.78,-1.954 1.099,-1.287 1.531,-3.088 1.216,-5.07 m 9.992,13.956 h -7.169 c -0.615,0 -1.138,-0.447 -1.233,-1.054 l -0.316,-2.004 -0.501,0.726 c -1.553,2.254 -5.014,3.007 -8.469,3.007 -7.921,0 -14.689,-6.003 -16.006,-14.422 -0.685,-4.201 0.288,-8.215 2.669,-11.016 2.189,-2.574 5.311,-3.646 9.031,-3.646 6.385,0 9.927,4.102 9.927,4.102 l -0.321,-1.993 c -0.12,-0.758 0.466,-1.443 1.233,-1.443 h 6.457 c 1.024,0 1.896,0.744 2.055,1.756 l 3.876,24.545 c 0.12,0.757 -0.466,1.442 -1.233,1.442 m -43.0269,-0.172 c -0.818,-5.375 -4.924,-5.375 -8.894,-5.375 h -2.259 l 1.585,10.035 c 0.096,0.607 0.618,1.054 1.233,1.054 h 1.035 c 2.703,0 5.256,0 6.572,-1.54 0.787,-0.922 1.026,-2.287 0.728,-4.174 m -1.728,14.023 h -14.974 c -1.024,0 -1.896,-0.745 -2.055,-1.756 l -6.055,-38.396 c -0.119,-0.757 0.466,-1.442 1.233,-1.442 h 7.149 c 1.024,0 1.896,0.745 2.055,1.756 l 1.634,10.358 c 0.16,1.012 1.031,1.757 2.055,1.757 h 4.739 c 9.863,0 15.555,4.773 17.043,14.233 0.669,4.138 0.027,7.389 -1.911,9.665 -2.129,2.502 -5.904,3.825 -10.913,3.825 m 108.5272,-14.023 c -0.818,-5.375 -4.923,-5.375 -8.894,-5.375 h -2.259 l 1.585,10.035 c 0.096,0.607 0.619,1.054 1.233,1.054 h 1.035 c 2.703,0 5.256,0 6.572,-1.54 0.787,-0.922 1.026,-2.287 0.728,-4.174 m -1.728,14.023 h -14.974 c -1.024,0 -1.896,-0.745 -2.055,-1.756 l -6.055,-38.396 c -0.119,-0.757 0.466,-1.442 1.233,-1.442 h 7.683 c 0.717,0 1.327,0.521 1.438,1.229 l 1.717,10.885 c 0.16,1.012 1.031,1.757 2.055,1.757 h 4.739 c 9.863,0 15.555,4.773 17.043,14.233 0.669,4.138 0.027,7.389 -1.911,9.665 -2.129,2.502 -5.903,3.825 -10.913,3.825 m -161.6161,-40.475 -4.55,18.557 h 3.561 l 3.442,-14.442 7.914,14.442 h 3.798 l -15.748,-27.656 h -3.758 z M 82.525,-65.6994 c -0.989,1.121 -2.328,1.681 -4.016,1.681 -1.319,0 -2.546,-0.356 -3.679,-1.068 -1.135,-0.712 -2.045,-1.701 -2.731,-2.967 -0.686,-1.267 -1.028,-2.691 -1.028,-4.274 0,-1.767 0.5,-3.205 1.503,-4.313 1.002,-1.107 2.242,-1.661 3.719,-1.661 1.346,0 2.612,0.369 3.799,1.108 1.187,0.738 2.136,1.746 2.848,3.026 0.713,1.28 1.069,2.672 1.069,4.175 0,1.74 -0.495,3.171 -1.484,4.293 m -8.527,12.206 -1.661,-10.604 c 0.791,0.976 1.806,1.761 3.047,2.354 1.239,0.594 2.65,0.891 4.233,0.891 1.529,0 2.908,-0.376 4.135,-1.128 1.226,-0.752 2.182,-1.787 2.868,-3.106 0.686,-1.319 1.029,-2.809 1.029,-4.472 0,-2.162 -0.515,-4.153 -1.543,-5.974 -1.029,-1.819 -2.388,-3.264 -4.075,-4.332 -1.689,-1.068 -3.469,-1.602 -5.342,-1.602 -1.635,0 -2.981,0.329 -4.036,0.988 -1.055,0.659 -1.912,1.623 -2.571,2.889 l -0.515,-3.205 h -3.403 l 4.313,27.301 z M 39.4576,-76.5416 c 0.976,-1.121 2.308,-1.681 3.996,-1.681 1.319,0 2.552,0.356 3.699,1.069 1.148,0.712 2.064,1.701 2.751,2.967 0.685,1.266 1.028,2.691 1.028,4.273 0,1.767 -0.501,3.198 -1.503,4.293 -1.003,1.095 -2.256,1.642 -3.759,1.642 -1.32,0 -2.572,-0.37 -3.759,-1.108 -1.187,-0.738 -2.136,-1.741 -2.849,-3.007 -0.712,-1.266 -1.068,-2.651 -1.068,-4.155 0,-1.741 0.488,-3.171 1.464,-4.293 m 9.892,-4.253 0.474,2.968 c -0.844,-1.108 -1.899,-1.986 -3.165,-2.631 -1.266,-0.647 -2.704,-0.969 -4.313,-0.969 -1.53,0 -2.902,0.369 -4.115,1.107 -1.214,0.738 -2.163,1.767 -2.848,3.086 -0.687,1.319 -1.029,2.823 -1.029,4.51 0,2.111 0.507,4.083 1.523,5.916 1.016,1.833 2.347,3.29 3.996,4.372 1.648,1.081 3.357,1.622 5.124,1.622 3.297,0 5.553,-1.279 6.766,-3.837 l 1.781,11.157 h 3.521 l -4.313,-27.301 z m -28.8284,15.3321 c -1.253,-1.094 -2.104,-2.421 -2.552,-3.976 h 11.474 c 0.026,0.21 0.04,0.501 0.04,0.87 0,1.478 -0.395,2.638 -1.187,3.482 -0.792,0.844 -1.913,1.266 -3.363,1.266 -1.688,0 -3.159,-0.548 -4.412,-1.642 m 10.406,2.454 c 1.306,-1.439 1.958,-3.305 1.958,-5.6 0,-0.764 -0.039,-1.397 -0.118,-1.899 -0.079,-0.501 -0.212,-1.095 -0.396,-1.78 h -14.877 c -0.079,-1.979 0.435,-3.502 1.543,-4.57 1.108,-1.068 2.612,-1.602 4.511,-1.602 1.319,0 2.519,0.164 3.601,0.494 1.081,0.33 2.149,0.824 3.205,1.484 l -0.476,-2.968 c -2.031,-1.371 -4.431,-2.057 -7.201,-2.057 -1.82,0 -3.396,0.39 -4.728,1.167 -1.332,0.777 -2.348,1.854 -3.046,3.225 -0.699,1.371 -1.049,2.914 -1.049,4.629 0,1.688 0.422,3.435 1.266,5.243 0.845,1.806 2.124,3.323 3.839,4.55 1.714,1.226 3.824,1.84 6.33,1.84 2.453,0 4.333,-0.719 5.638,-2.156 m -18.0138,-1.4448 c -1.556,0 -2.875,-0.561 -3.956,-1.681 -1.082,-1.122 -1.794,-2.751 -2.137,-4.888 l -1.543,-9.772 h -3.522 l 3.047,19.308 h 3.403 l -0.515,-3.283 c 1.583,2.268 3.483,3.402 5.698,3.402 0.554,0 1.068,-0.039 1.543,-0.119 l -0.475,-3.086 c -0.474,0.079 -0.989,0.119 -1.543,0.119 m -24.5657,-1.0092 c -1.253,-1.094 -2.104,-2.421 -2.552,-3.976 h 11.474 c 0.026,0.21 0.04,0.501 0.04,0.87 0,1.478 -0.396,2.638 -1.187,3.482 -0.792,0.844 -1.913,1.266 -3.363,1.266 -1.689,0 -3.159,-0.548 -4.412,-1.642 m 10.406,2.454 c 1.305,-1.439 1.958,-3.305 1.958,-5.6 0,-0.764 -0.039,-1.397 -0.118,-1.899 -0.079,-0.501 -0.212,-1.095 -0.396,-1.78 h -14.877 c -0.079,-1.979 0.435,-3.502 1.543,-4.57 1.108,-1.068 2.612,-1.602 4.511,-1.602 1.319,0 2.519,0.164 3.601,0.494 1.081,0.33 2.149,0.824 3.204,1.484 l -0.475,-2.968 c -2.031,-1.371 -4.431,-2.057 -7.201,-2.057 -1.82,0 -3.396,0.39 -4.728,1.167 -1.332,0.777 -2.348,1.854 -3.046,3.225 -0.699,1.371 -1.049,2.914 -1.049,4.629 0,1.688 0.422,3.435 1.266,5.243 0.844,1.806 2.124,3.323 3.838,4.55 1.715,1.226 3.824,1.84 6.331,1.84 2.453,0 4.333,-0.719 5.638,-2.156 m -24.4869,-17.7856 h -3.561 l -2.057,14.837 -6.766,-14.837 h -3.522 l -2.77,19.308 h 3.522 l 1.741,-15.193 6.805,15.193 h 3.324 l 2.017,-15.154 6.529,15.154 h 3.6 z M -59.063,-65.225 c -1.201,-0.778 -2.124,-1.807 -2.77,-3.086 -0.647,-1.28 -0.969,-2.619 -0.969,-4.017 0,-1.741 0.494,-3.171 1.484,-4.292 0.988,-1.122 2.261,-1.682 3.817,-1.682 1.53,0 2.889,0.402 4.076,1.207 1.187,0.805 2.11,1.852 2.769,3.146 0.659,1.292 0.99,2.637 0.99,4.035 0,1.715 -0.495,3.12 -1.484,4.215 -0.989,1.093 -2.262,1.641 -3.818,1.641 -1.53,0 -2.896,-0.389 -4.095,-1.167 M -50.28,-62 c 1.332,-0.766 2.368,-1.827 3.106,-3.185 0.738,-1.359 1.108,-2.896 1.108,-4.61 0,-1.952 -0.482,-3.825 -1.444,-5.618 -0.963,-1.794 -2.321,-3.251 -4.075,-4.372 -1.755,-1.122 -3.766,-1.682 -6.034,-1.682 -1.688,0 -3.199,0.383 -4.531,1.148 -1.331,0.764 -2.374,1.833 -3.125,3.205 -0.752,1.37 -1.128,2.914 -1.128,4.628 0,1.979 0.481,3.859 1.444,5.639 0.963,1.781 2.321,3.224 4.076,4.332 1.753,1.108 3.764,1.663 6.033,1.663 1.715,0 3.238,-0.383 4.57,-1.148 m -20.7559,4.1545 c -0.897,0.87 -2.255,1.305 -4.075,1.305 h -4.471 l -1.82,-11.513 h 4.668 c 2.401,0 4.175,0.639 5.322,1.919 1.148,1.279 1.721,2.894 1.721,4.847 0,1.424 -0.448,2.571 -1.345,3.442 m 3.027,2.373 c 1.464,-1.318 2.196,-3.112 2.196,-5.38 0,-3.113 -0.944,-5.599 -2.829,-7.459 -1.887,-1.859 -4.715,-2.789 -8.487,-2.789 h -4.748 l -1.543,-9.694 h -3.759 l 4.313,27.301 h 8.309 c 2.901,0 5.084,-0.66 6.548,-1.979\" />\n                                </g>\n                            </g>\n                        </svg>\n                    );\n                default:\n                    return (\n                        <svg width=\"95\" height=\"32\" viewBox=\"0 0 95 32\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill={ primary } d=\"M 52.732 6.347 C 52.83 5.963 53.122 5.675 53.512 5.675 L 60.626 5.675 C 66.571 5.675 70.664 10.187 69.69 15.851 C 68.813 21.515 63.16 25.931 57.313 25.931 L 50.004 25.931 C 49.711 25.931 49.516 25.739 49.614 25.451 L 52.732 6.347 Z M 55.753 21.515 L 57.02 21.515 C 60.236 21.515 63.355 19.787 64.037 15.851 C 64.622 12.203 62.478 10.187 58.97 10.187 L 57.995 10.187 C 57.8 10.187 57.605 10.283 57.605 10.475 L 55.753 21.515 Z\" />\n                            <path fill={ primary } d=\"M 43.571 10.763 L 43.084 13.547 L 48.737 13.547 C 49.029 13.547 49.224 13.739 49.224 14.027 L 48.639 17.387 C 48.542 17.771 48.249 17.963 47.859 17.963 L 42.987 17.963 C 42.597 17.963 42.304 18.251 42.207 18.635 L 41.72 21.515 L 47.762 21.515 C 48.054 21.515 48.249 21.707 48.152 21.995 L 47.665 25.355 C 47.567 25.643 47.275 25.931 46.885 25.931 L 36.067 25.931 C 35.775 25.931 35.58 25.643 35.58 25.451 L 38.699 6.347 C 38.796 5.963 39.186 5.675 39.478 5.675 L 50.393 5.675 C 50.588 5.675 50.881 5.963 50.783 6.155 L 50.296 9.515 C 50.198 9.899 49.906 10.091 49.516 10.091 L 44.254 10.091 C 43.864 10.187 43.571 10.379 43.571 10.763 Z\" />\n                            <path fill={ primary } d=\"M 74.563 25.931 L 70.274 25.931 C 69.982 25.931 69.787 25.739 69.787 25.451 L 73.003 6.347 C 73.003 5.963 73.393 5.675 73.685 5.675 L 78.071 5.675 C 78.266 5.675 78.558 5.963 78.461 6.251 L 75.342 25.355 C 75.245 25.643 74.952 25.931 74.563 25.931 Z\" />\n                            <path fill={ primary } d=\"M 34.118 25.931 L 28.466 25.931 C 28.173 25.931 27.978 25.835 27.881 25.643 L 24.178 18.155 L 24.08 18.155 L 22.911 25.451 C 22.813 25.739 22.618 25.931 22.326 25.931 L 17.843 25.931 C 17.551 25.931 17.356 25.739 17.453 25.451 L 20.572 6.251 C 20.669 5.963 20.864 5.675 21.156 5.675 L 28.855 5.675 C 33.046 5.675 35.97 7.595 35.288 11.915 C 34.8 14.699 32.754 17.195 29.635 17.675 L 34.508 25.355 C 34.703 25.547 34.411 25.931 34.118 25.931 Z M 24.665 14.795 L 25.152 14.795 C 27.004 14.795 29.05 14.411 29.44 12.203 C 29.83 10.091 28.661 9.707 26.711 9.707 L 25.932 9.707 C 25.639 9.707 25.445 9.899 25.445 10.091 L 24.665 14.795 Z\" />\n                            <path fill={ primary } d=\"M 86.16 25.931 L 81.872 25.931 C 81.579 25.931 81.384 25.739 81.482 25.451 L 83.918 10.187 L 79.923 10.187 C 79.63 10.187 79.435 9.899 79.533 9.611 L 80.02 6.347 C 80.118 5.963 80.41 5.675 80.8 5.675 L 94.249 5.675 C 94.444 5.675 94.736 5.963 94.639 6.251 L 94.054 9.515 C 94.054 9.899 93.761 10.187 93.372 10.187 L 89.473 10.187 L 86.939 25.355 C 86.939 25.643 86.647 25.931 86.16 25.931 Z\" />\n                            <path fill={ primary } d=\"M 17.648 11.435 C 17.648 11.819 17.161 12.011 16.868 11.723 C 15.894 10.763 14.529 10.283 13.068 10.283 C 9.657 10.283 7.025 12.779 6.441 15.851 C 5.953 19.019 7.902 21.323 11.313 21.323 C 12.678 21.323 14.237 20.843 15.407 19.979 C 15.796 19.787 16.284 20.075 16.186 20.459 L 15.407 25.067 C 15.309 25.355 15.114 25.547 14.822 25.643 C 13.165 26.123 11.898 26.507 10.339 26.507 C 1.178 26.507 -0.284 19.019 0.203 15.851 C 1.47 6.923 9.072 4.907 13.652 5.195 C 15.114 5.195 16.479 5.387 17.745 5.867 C 18.233 6.059 18.428 6.443 18.33 6.923 L 17.648 11.435 Z\" />\n                        </svg>\n                    );\n\n                }\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#c8036f',\n        secondary: '#71706f'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff',\n        secondary: '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#71706F',\n        secondary: '#C8036F'\n    }\n};\n\nexport function EpsLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n    \n    const { primary, secondary } = getLogoColors(LOGO.EPS, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.EPS }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"52px\" height=\"32px\" viewBox=\"0 0 52 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <title>Page 1</title>\n                        <desc>Created with Sketch.</desc>\n                        <defs>\n                            <polygon id=\"path-1\" points=\"0 0.0330469345 12.6787834 0.0330469345 12.6787834 12.7180364 0 12.7180364\" />\n                            <polygon id=\"path-3\" points=\"0.0103575649 0.00128879493 1.81575683 0.00128879493 1.81575683 2.2832981 0.0103575649 2.2832981\" />\n                        </defs>\n                        <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" transform=\"matrix(1.333759, 0, 0, 1.333759, 0.000008, -0.000005)\">\n                            <g id=\"SPB_&amp;_AltPay_NewAssets\" transform=\"translate(-100.000000, -159.000000)\">\n                                <g id=\"Page-1\" transform=\"translate(100.000000, 159.000000)\">\n                                    <path d=\"M30.5812744,12.0000152 L27.4748661,12.0000152 C27.129394,12.0000152 26.8482796,11.7245987 26.8482796,11.3798207 C26.8482796,11.0350427 27.129394,10.7315163 27.4748661,10.7315163 L32.2041612,10.7315163 L32.2041612,8.39747822 L27.4748661,8.39747822 C25.824238,8.39747822 24.4812484,9.74381226 24.4812484,11.3911357 C24.4812484,13.0384592 25.824238,14.3847932 27.4748661,14.3847932 L30.5390793,14.3847932 C30.8846021,14.3847932 31.1657165,14.6590934 31.1657165,15.0038715 C31.1657165,15.3486495 30.8846021,15.6025522 30.5390793,15.6025522 L23.9683147,15.6025522 C23.4104473,16.6680913 22.8679974,17.5814106 21.7668179,18.0380702 L30.5812744,18.0380702 C32.2041612,18.0146791 33.5316827,16.6405903 33.5316827,15.0078292 C33.5316827,13.3751696 32.2041612,12.0234063 30.5812744,12.0000152\" id=\"Fill-1\" fill={  secondary } />\n                                    <path d=\"M18.6731848,15.6025522 L16.2795788,15.6025522 L16.2795788,13.1992034 C16.2795788,11.8562182 17.3483005,10.7635839 18.6731848,10.7635839 C19.9980691,10.7635839 21.0759195,11.8562182 21.0759195,13.1992034 C21.0759195,14.5422393 19.9980691,15.6025522 18.6731848,15.6025522 M18.6731848,8.39747822 C16.0403551,8.39747822 13.8959637,10.5557023 13.8959637,13.2076262 L13.8959637,13.3091061 L13.8959637,23.2135459 L16.2795788,23.2135459 L16.2795788,18.0380702 L18.6682147,18.0380702 C21.3010951,18.0380702 23.4379299,15.8511273 23.4379299,13.1992034 C23.4379299,10.5472795 21.3060651,8.39747822 18.6731848,8.39747822\" id=\"Fill-3\" fill={  secondary } />\n                                    <g id=\"Group-7\" transform=\"translate(0.000000, 6.842233)\">\n                                        <mask id=\"mask-2\" fill=\"#ffffff\">\n                                            <polygon id=\"\" points=\"0 0.0330469345 12.6787834 0.0330469345 12.6787834 12.7180364 0 12.7180364\" transform=\"matrix(1, 0, 0, 1, 0, 0)\" />\n                                        </mask>\n                                        <g id=\"Clip-6\" />\n                                        <path d=\"M6.34967672,11.1958376 C4.09589259,11.1958376 2.20112146,9.58905539 1.68833992,7.48994334 C1.68833992,7.48994334 1.54020078,6.7959222 1.54020078,6.3389074 C1.54020078,5.8818926 1.68042835,5.18071712 1.68042835,5.18071712 C2.19686138,3.08678055 4.08935033,1.52754165 6.33943225,1.52754165 C8.98580286,1.52754165 11.1573269,3.67982918 11.1573269,6.32744017 L11.1573269,7.49182072 L4.12642315,7.49182072 C4.54162861,8.30366004 5.38137113,8.76031966 6.34967672,8.76031966 L12.6701111,8.76031966 L12.6787834,1.89423932 C12.6787834,0.870560677 11.8417287,0.0330469345 10.8185493,0.0330469345 L1.86031521,0.0330469345 C0.837135761,0.0330469345 -2.02860858e-05,0.845190698 -2.02860858e-05,1.86886934 L-2.02860858e-05,10.831474 C-2.02860858e-05,11.8551526 0.837135761,12.7180364 1.86031521,12.7180364 L10.8185493,12.7180364 C11.7367482,12.7180364 12.5027001,12.0584169 12.6506871,11.1958376 L6.34967672,11.1958376 Z\" id=\"Fill-5\" fill={  primary } mask=\"url(#mask-2)\" />\n                                    </g>\n                                    <path d=\"M6.33943732,10.6481099 C5.37483394,10.6481099 4.53595358,11.238926 4.11907451,12.0000254 L8.55990156,12.0000254 C8.1430225,11.238926 7.30419285,10.6481099 6.33943732,10.6481099\" id=\"Fill-8\" fill={  primary } />\n                                    <path d=\"M10.396619,3.96072558 C10.396619,1.77327526 8.57959428,1.52219873e-05 6.33823537,1.52219873e-05 C4.134,1.52219873e-05 2.34126788,1.71527949 2.28238752,3.85259873 C2.28142393,3.86163044 2.28218466,3.87040846 2.28218466,3.87969387 L2.28218466,5.0699518 C2.28218466,5.21232812 2.39806892,5.35308076 2.54392588,5.35308076 L4.03703251,5.35308076 C4.18288947,5.35308076 4.31079324,5.21232812 4.31079324,5.0699518 L4.31079324,3.96072558 C4.31079324,2.86839577 5.22011704,1.97968541 6.33940182,1.97968541 C7.45868661,1.97968541 8.3680104,2.86839577 8.3680104,3.96072558 L8.3680104,5.0699518 C8.3680104,5.21232812 8.486329,5.35308076 8.63218596,5.35308076 L10.1253433,5.35308076 C10.2712003,5.35308076 10.396619,5.21232812 10.396619,5.0699518 L10.396619,3.96072558 Z\" id=\"Fill-10\" fill={  primary } />\n                                    <path d=\"M20.7598572,20.7474063 C20.7598572,20.8523366 20.8407987,20.9002858 20.9277753,20.9002858 C21.0206856,20.9002858 21.1436192,20.8253429 21.1436192,20.687381 C21.1436192,20.5884888 21.0716036,20.5345015 20.9907129,20.5345015 C20.8827909,20.5345015 20.7598572,20.6034063 20.7598572,20.7474063 Z M20.0403098,20.7504 C20.0403098,20.8523366 20.1183098,20.9002858 20.2022434,20.9002858 C20.3071732,20.9002858 20.4211303,20.8253429 20.4211303,20.6843873 C20.4211303,20.5854444 20.3550991,20.5345015 20.2681732,20.5345015 C20.160302,20.5345015 20.0403098,20.6034063 20.0403098,20.7504 Z M21.3474437,21.133233 L21.1315997,22.3559645 C21.0236778,22.9739772 20.6189196,23.2570047 20.0702824,23.2570047 C19.6056296,23.2570047 19.2458559,22.9539856 19.3508364,22.3569793 L19.5666296,21.133233 L19.8994736,21.133233 L19.6835282,22.3559645 C19.6175984,22.7370723 19.7885087,22.9540364 20.1122746,22.9540364 C20.4450679,22.9540364 20.7298845,22.7559983 20.7988065,22.3569793 L21.0146505,21.133233 L21.3474437,21.133233 Z\" id=\"Fill-12\" fill={  secondary } />\n                                    <path d=\"M21.9179189,22.5590867 C21.9059501,22.8050233 22.0647901,22.9639915 22.2956458,22.9639915 C22.5864468,22.9639915 22.8682205,22.7389598 22.8862244,22.3971247 C22.898244,22.1481438 22.736361,22.0011501 22.511439,22.0011501 C22.2236302,22.0011501 21.9358213,22.2321691 21.9179189,22.5590867 Z M22.1517667,21.1331924 L22.0018525,21.9781142 C22.1307199,21.8042283 22.388556,21.7122368 22.5684429,21.7122368 C22.9401854,21.7122368 23.1980216,21.9302156 23.1980216,22.3350698 C23.1980216,22.9079746 22.7992479,23.2524989 22.2896614,23.2524989 C22.0917706,23.2524989 21.9238525,23.178926 21.8219657,22.9930148 L21.7650125,23.2135307 L21.4741607,23.2135307 L21.8429111,21.1331924 L22.1517667,21.1331924 Z\" id=\"Fill-14\" fill={  secondary } />\n                                    <path d=\"M24.7516112,22.3509666 C24.7755995,22.0972668 24.6256853,21.994011 24.3768257,21.994011 C24.1520559,21.994011 23.9451886,22.0972668 23.8551691,22.3509666 L24.7516112,22.3509666 Z M23.804251,22.6046664 C23.7922315,22.8076262 23.9511222,22.9733429 24.2209779,22.9733429 C24.3708921,22.9733429 24.5686814,22.9146875 24.6766034,22.812751 L24.8445215,23.006882 C24.6616931,23.1747298 24.3918375,23.2582985 24.1640247,23.2582985 C23.7383212,23.2582985 23.4894616,23.0032288 23.4894616,22.6132922 C23.4894616,22.0943746 23.8971612,21.7076854 24.4188179,21.7076854 C24.895541,21.7076854 25.1653459,21.9957869 25.0034629,22.6046664 L23.804251,22.6046664 Z\" id=\"Fill-16\" fill={  secondary } />\n                                    <path d=\"M25.8283814,21.7420871 L25.8133697,21.9376896 C25.9573502,21.7485311 26.131202,21.7099687 26.290042,21.7099687 C26.4339718,21.7099687 26.5628391,21.7610638 26.6318118,21.8360068 L26.4459913,22.1059941 C26.3800108,22.0461717 26.314081,22.0161844 26.2001239,22.0161844 C25.9872215,22.0161844 25.7774633,22.1438968 25.729436,22.4168778 L25.5885999,23.2135459 L25.2797442,23.2135459 L25.5405726,21.7420871 L25.8283814,21.7420871 Z\" id=\"Fill-18\" fill={  secondary } />\n                                    <polygon id=\"Fill-20\" fill={  secondary } points=\"28.1192941 21.7420871 28.275142 22.9057573 28.8387909 21.7420871 29.1835529 21.7420871 28.4100952 23.2135459 28.0473293 23.2135459 27.900458 22.2428397 27.6635672 22.7250723 27.4057818 23.2135459 27.0460081 23.2135459 26.7851797 21.7420871 27.1329847 21.7420871 27.285891 22.9057573 27.8524307 21.7420871\" />\n                                    <path d=\"M30.5274503,22.3509666 C30.5513879,22.0972668 30.4015244,21.994011 30.1526649,21.994011 C29.9278951,21.994011 29.7210277,22.0972668 29.6310082,22.3509666 L30.5274503,22.3509666 Z M29.5800901,22.6046664 C29.5680706,22.8076262 29.7269614,22.9733429 29.996817,22.9733429 C30.1467312,22.9733429 30.3445205,22.9146875 30.4524425,22.812751 L30.6203606,23.006882 C30.4375322,23.1747298 30.1676766,23.2582985 29.9398638,23.2582985 C29.5141603,23.2582985 29.2653008,23.0032288 29.2653008,22.6132922 C29.2653008,22.0943746 29.6730004,21.7076854 30.1946571,21.7076854 C30.6713801,21.7076854 30.941185,21.9957869 30.7793021,22.6046664 L29.5800901,22.6046664 Z\" id=\"Fill-22\" fill={  secondary } />\n                                    <path d=\"M31.3524449,21.3412364 C31.3524449,21.4461666 31.4304449,21.5003569 31.5144293,21.5003569 C31.63432,21.5003569 31.7452342,21.4222173 31.7452342,21.2753759 C31.7452342,21.1762808 31.6702264,21.119249 31.5892849,21.119249 C31.4783707,21.119249 31.3524449,21.1913505 31.3524449,21.3412364 Z M31.625242,21.742082 L31.3645151,23.2135408 L31.0556594,23.2135408 L31.3164878,21.742082 L31.625242,21.742082 Z\" id=\"Fill-24\" fill={  secondary } />\n                                    <path d=\"M32.9955925,22.1060753 C32.8996393,21.9981006 32.7767563,21.9681133 32.629885,21.9681133 C32.4259085,21.9681133 32.2820801,22.0371704 32.2820801,22.1661006 C32.2820801,22.2740753 32.398928,22.3191831 32.5728811,22.3341006 C32.8426861,22.3580499 33.1874481,22.4481133 33.1154832,22.8290182 C33.0645651,23.1049421 32.7887251,23.266904 32.4049631,23.266904 C32.1651815,23.266904 31.9342752,23.2129167 31.7784273,22.9939738 L31.9792596,22.7750309 C32.0901737,22.9279104 32.2850723,22.9909801 32.4589241,22.9939738 C32.6057953,22.9939738 32.7797485,22.9399865 32.806729,22.8020245 C32.8337095,22.6700499 32.7167602,22.619107 32.5009163,22.5979992 C32.2490645,22.5739992 31.9733259,22.481145 31.9733259,22.202126 C31.9733259,21.833145 32.3719475,21.7042148 32.6718265,21.7042148 C32.8996393,21.7042148 33.0675573,21.7551577 33.2055027,21.9022021 L32.9955925,22.1060753 Z\" id=\"Fill-26\" fill={  secondary } />\n                                    <path d=\"M33.9703034,21.7420871 L33.8294672,22.534493 C33.7844828,22.7865184 33.8984399,22.9606579 34.1562254,22.9606579 C34.3990498,22.9606579 34.6059172,22.7593725 34.6478079,22.5134359 L34.7827104,21.7420871 L35.0915153,21.7420871 L34.8307884,23.2135459 L34.5519562,23.2135459 L34.5729016,23.0003366 C34.3990498,23.1652922 34.2280888,23.2430765 34.0213229,23.2430765 C33.658557,23.2430765 33.442713,22.982882 33.5206116,22.5361167 L33.6615492,21.7420871 L33.9703034,21.7420871 Z\" id=\"Fill-28\" fill={  secondary } />\n                                    <path d=\"M36.4472345,23.2135459 L36.588172,22.4259603 C36.633055,22.1709412 36.5462813,22.0020279 36.2644061,22.0020279 C36.0185895,22.0020279 35.8116207,22.199863 35.7697299,22.4428059 L35.6348274,23.2135459 L35.3260225,23.2135459 L35.5869016,21.7420871 L35.8686246,21.7420871 L35.8476792,21.957123 C36.0185895,21.7981548 36.1953827,21.7197615 36.3872384,21.7197615 C36.7470121,21.7197615 36.9809614,21.9701632 36.9000199,22.4231696 L36.7590823,23.2135459 L36.4472345,23.2135459 Z\" id=\"Fill-30\" fill={  secondary } />\n                                    <g id=\"Group-34\" transform=\"translate(37.174252, 21.709040)\">\n                                        <mask id=\"mask-4\" fill=\"white\">\n                                            <polygon id=\"\" points=\"0.0103575649 0.00128879493 1.81575683 0.00128879493 1.81575683 2.2832981 0.0103575649 2.2832981\" transform=\"matrix(1, 0, 0, 1, 0, 0)\" />\n                                        </mask>\n                                        <g id=\"Clip-33\" />\n                                        <path d=\"M0.406639662,0.85909852 C0.406639662,1.11092093 0.571514824,1.26400338 0.808507022,1.26400338 C1.44691014,1.26400338 1.61787113,0.2832 0.979214434,0.2832 C0.676444603,0.2832 0.406639662,0.508028753 0.406639662,0.85909852 Z M0.319663069,1.70747061 C0.298717685,1.91043044 0.45456554,1.9925277 0.715495319,1.9925277 C0.943358778,1.9925277 1.18922614,1.86522114 1.24617932,1.54134799 L1.291113,1.288663 C1.15621053,1.4776186 0.910343173,1.55220634 0.72756554,1.55220634 C0.349686476,1.55220634 0.085916645,1.32717463 0.085916645,0.91912389 C0.085916645,0.337339535 0.517553836,0.00128879493 1.00619493,0.00128879493 C1.21316372,0.00128879493 1.39903498,0.099572093 1.46501547,0.267572093 L1.51598427,0.0330520085 L1.8157619,0.0330520085 L1.55787503,1.54824863 C1.46202328,2.1092296 1.04524564,2.28331839 0.664526528,2.28331839 C0.208748895,2.28331839 -0.0429507152,2.06265032 0.0198854356,1.70747061 L0.319663069,1.70747061 Z\" id=\"Fill-32\" fill={  secondary } mask=\"url(#mask-4)\" />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#ED1C24',\n        secondary: '#ffffff',\n        tertiary:  '#003a7d'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff',\n        secondary: '#000000',\n        tertiary:  '#2C2E2F'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:    '#FFFFFF',\n        secondary:  '#003A7D',\n        tertiary:   '#ED1C24'\n    }\n};\n\nexport function GiropayLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary, tertiary } = getLogoColors(LOGO.GIROPAY, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.GIROPAY }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"75px\" height=\"32px\" viewBox=\"0 0 75 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <title>logo giropay</title>\n                        <desc>Created with Sketch.</desc>\n                        <defs>\n                            <polygon id=\"path-1\" points=\"0 0.017902439 46.0918699 0.017902439 46.0918699 19.8373984 0 19.8373984\" />\n                            <polygon id=\"path-3\" points=\"0 19.9821138 46.0918699 19.9821138 46.0918699 0.162601626 0 0.162601626\" />\n                        </defs>\n                        <g id=\"SPB_&amp;_AltPay_NewAssets\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" transform=\"matrix(1.614571, 0, 0, 1.614571, -161.457123, -256.816772)\">\n                            <g id=\"logo-giropay\" transform=\"translate(100.000000, 159.000000)\">\n                                <g id=\"Group-3\" transform=\"translate(0.000000, 0.144715)\">\n                                    <mask id=\"mask-2\" fill={  secondary }>\n                                        <polygon id=\"\" points=\"0 0.017902439 46.0918699 0.017902439 46.0918699 19.8373984 0 19.8373984\" transform=\"matrix(1, 0, 0, 1, 0, 0)\" />\n                                    </mask>\n                                    <g id=\"Clip-2\" />\n                                    <path d=\"M0,3.5735122 C0,1.60977236 1.5998374,0.017902439 3.57349593,0.017902439 L42.5182114,0.017902439 C44.4918699,0.017902439 46.0918699,1.60977236 46.0918699,3.5735122 L46.0918699,16.2818049 C46.0918699,18.2455447 44.4918699,19.8374146 42.5182114,19.8374146 L3.57349593,19.8374146 C1.5998374,19.8374146 0,18.2455447 0,16.2818049 L0,3.5735122 Z\" id=\"Fill-1\" fill={  tertiary } mask=\"url(#mask-2)\" />\n                                </g>\n                                <path d=\"M1.46738211,3.84021138 L1.46738211,16.3065528 C1.46738211,17.5338699 2.46738211,18.5288293 3.70087805,18.5288293 L24.1036423,18.5288293 L24.1036423,1.61793496 L3.70087805,1.61793496 C2.46738211,1.61793496 1.46738211,2.61289431 1.46738211,3.84021138\" id=\"Fill-4\" fill={  secondary } />\n                                <path d=\"M5.67102439,10.0205528 C5.67102439,9.34152846 6.00582114,8.77730081 6.64663415,8.77730081 C7.42126829,8.77730081 7.74630894,9.39892683 7.74630894,9.95356098 C7.74630894,10.7187642 7.25866667,11.235187 6.64663415,11.235187 C6.13004878,11.235187 5.67102439,10.795187 5.67102439,10.0205528 Z M9.41053659,7.57226016 L7.8515122,7.57226016 L7.8515122,8.47112195 L7.8324878,8.47112195 C7.46907317,7.85908943 6.87606504,7.45746341 6.13964228,7.45746341 C4.59021138,7.45746341 3.8921626,8.56689431 3.8921626,10.0491707 C3.8921626,11.5221789 4.74321951,12.5550244 6.11102439,12.5550244 C6.79964228,12.5550244 7.37346341,12.2872195 7.78468293,11.7038049 L7.80370732,11.7038049 L7.80370732,11.9716098 C7.80370732,12.9472195 7.26826016,13.4158374 6.27362602,13.4158374 C5.55622764,13.4158374 5.11622764,13.2628293 4.59021138,13.0046179 L4.50419512,14.3626667 C4.90582114,14.5060813 5.58500813,14.6782764 6.40744715,14.6782764 C8.41590244,14.6782764 9.41053659,14.0182764 9.41053659,11.9716098 L9.41053659,7.57226016 Z\" id=\"Fill-6\" fill={  primary } />\n                                <mask id=\"mask-4\" fill={  secondary }>\n                                    <polygon id=\"\" points=\"0 19.9821138 46.0918699 19.9821138 46.0918699 0.162601626 0 0.162601626\" transform=\"matrix(1, 0, 0, 1, 0, 0)\" />\n                                </mask>\n                                <g id=\"Clip-9\" />\n                                <path d=\"M10.5985366,6.75918699 L12.32,6.75918699 L12.32,5.49674797 L10.5985366,5.49674797 L10.5985366,6.75918699 Z M10.598374,12.5549593 L12.3198374,12.5549593 L12.3198374,7.57219512 L10.598374,7.57219512 L10.598374,12.5549593 Z\" id=\"Fill-8\" fill={  primary } mask=\"url(#mask-4)\" />\n                                <path d=\"M17.1133333,7.51479675 C16.9411382,7.48617886 16.7307317,7.45739837 16.5299187,7.45739837 C15.7839024,7.45739837 15.3534959,7.85918699 15.0570732,8.4904065 L15.0380488,8.4904065 L15.0380488,7.57219512 L13.4694309,7.57219512 L13.4694309,12.5549593 L15.1910569,12.5549593 L15.1910569,10.4508943 C15.1910569,9.47544715 15.6404878,8.89203252 16.4439024,8.89203252 C16.6447154,8.89203252 16.835935,8.89203252 17.0273171,8.94943089 L17.1133333,7.51479675 Z\" id=\"Fill-10\" fill={  primary } mask=\"url(#mask-4)\" />\n                                <path d=\"M20.0773496,11.4647154 C19.2835285,11.4647154 18.9583252,10.804878 18.9583252,10.0682927 C18.9583252,9.32243902 19.2835285,8.66243902 20.0773496,8.66243902 C20.8711707,8.66243902 21.196374,9.32243902 21.196374,10.0682927 C21.196374,10.804878 20.8711707,11.4647154 20.0773496,11.4647154 M20.0773496,12.6697561 C21.7223902,12.6697561 22.9752358,11.7133333 22.9752358,10.0682927 C22.9752358,8.41382114 21.7223902,7.45739837 20.0773496,7.45739837 C18.4323089,7.45739837 17.1794634,8.41382114 17.1794634,10.0682927 C17.1794634,11.7133333 18.4323089,12.6697561 20.0773496,12.6697561\" id=\"Fill-11\" fill={  primary } mask=\"url(#mask-4)\" />\n                                <path d=\"M29.3757073,10.0110244 C29.3757073,10.8048455 28.9836748,11.3500488 28.3332683,11.3500488 C27.7594472,11.3500488 27.2812358,10.8048455 27.2812358,10.0780163 C27.2812358,9.332 27.7020488,8.77720325 28.3332683,8.77720325 C29.0026992,8.77720325 29.3757073,9.35102439 29.3757073,10.0110244 Z M25.5597724,14.5633821 L27.2812358,14.5633821 L27.2812358,11.856878 L27.3002602,11.856878 C27.6254634,12.4498862 28.2758699,12.6697236 28.8783089,12.6697236 C30.360748,12.6697236 31.1545691,11.4456585 31.1545691,9.97265041 C31.1545691,8.76777236 30.399122,7.45736585 29.0218862,7.45736585 C28.2376585,7.45736585 27.5106667,7.77297561 27.166439,8.47118699 L27.147252,8.47118699 L27.147252,7.5721626 L25.5597724,7.5721626 L25.5597724,14.5633821 Z\" id=\"Fill-12\" fill={  secondary } mask=\"url(#mask-4)\" />\n                                <path d=\"M33.505252,10.9769919 C33.505252,10.4987805 33.9642764,10.3169919 34.5476911,10.3169919 C34.8059024,10.3169919 35.0546829,10.3361789 35.2745203,10.3457724 C35.2745203,10.929187 34.8633008,11.5221951 34.2128943,11.5221951 C33.8112683,11.5221951 33.505252,11.3212195 33.505252,10.9769919 Z M36.9769593,12.5550407 C36.900374,12.1628455 36.8813496,11.770813 36.8813496,11.3786179 L36.8813496,9.52317073 C36.8813496,8.00252033 35.7815122,7.45747967 34.5094797,7.45747967 C33.7730569,7.45747967 33.1322439,7.56268293 32.5202114,7.81130081 L32.5488293,8.97813008 C33.0270407,8.7103252 33.5816748,8.60512195 34.1364715,8.60512195 C34.7580976,8.60512195 35.2650894,8.78674797 35.2745203,9.46577236 C35.0546829,9.42756098 34.7485041,9.39894309 34.4711057,9.39894309 C33.5530569,9.39894309 31.8984228,9.58056911 31.8984228,11.1013821 C31.8984228,12.1820325 32.7784228,12.6698374 33.7634634,12.6698374 C34.4711057,12.6698374 34.9493171,12.392439 35.3415122,11.770813 L35.3606992,11.770813 C35.3606992,12.0290244 35.3893171,12.2872358 35.3989106,12.5550407 L36.9769593,12.5550407 Z\" id=\"Fill-13\" fill={  secondary } mask=\"url(#mask-4)\" />\n                                <path d=\"M37.750748,14.5634634 C38.1045691,14.6398862 38.4583902,14.6782602 38.8218049,14.6782602 C40.3998537,14.6782602 40.7728618,13.463626 41.2606667,12.2107805 L43.0873333,7.5722439 L41.3658699,7.5722439 L40.3426179,10.8239512 L40.3234309,10.8239512 L39.2522114,7.5722439 L37.3967642,7.5722439 L39.414813,12.6698049 C39.2904228,13.1098049 38.9653821,13.3584228 38.5445691,13.3584228 C38.3053821,13.3584228 38.0949756,13.3296423 37.8655447,13.2532195 L37.750748,14.5634634 Z\" id=\"Fill-14\" fill={  secondary } mask=\"url(#mask-4)\" />\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","\n/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#000000',\n        secondary: '#cd0067',\n        tertiary:  '#ffffff'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff',\n        secondary: '#B4B4B4',\n        tertiary:  '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#000000',\n        secondary: '#B4B4B4',\n        tertiary:  '#000000'\n    }\n};\n\nexport function IdealLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary, tertiary } = getLogoColors(LOGO.IDEAL, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.IDEAL }\n            render={ () => {\n                return (\n                    <svg width=\"38\" height=\"32\" viewBox=\"0 0 38 32\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <polygon id=\"Fill-1\" fill={  primary } points=\"4.47 27.632 10.452 27.632 10.452 17.982 4.47 17.982\" />\n                        <g id=\"Group-9\" transform=\"matrix(0.952642, 0, 0, 0.930979, 0.31993, 0.181113)\">\n                            <path d=\"M11.1102604,13.937999 C11.1102604,15.8893766 9.51859887,17.4723289 7.55546104,17.4723289 C5.59238806,17.4723289 4.00066169,15.8893766 4.00066169,13.937999 C4.00066169,11.9865569 5.59238806,10.4043136 7.55546104,10.4043136 C9.51859887,10.4043136 11.1102604,11.9865569 11.1102604,13.937999\" id=\"Fill-2\" fill={  primary } />\n                            <g id=\"Group-6\">\n                                <mask id=\"mask-2\" fill={ tertiary }>\n                                    <polygon id=\"\" points=\"39.1898554 33.9678282 0 33.9678282 0 0.001572704 39.1898554 0.001572704\" transform=\"matrix(1, 0, 0, 1, 0, 0)\" />\n                                </mask>\n                                <g id=\"Clip-5\" />\n                                <path d=\"M22.1049929,2.25750057 C26.4717361,2.25750057 30.1110886,3.433548 32.6296578,5.65853743 C35.476843,8.17370364 36.9204068,11.9843525 36.9204068,16.9847134 C36.9204068,26.8945533 32.0742264,31.7119261 22.1049929,31.7119261 L2.26942909,31.7119261 L2.26942909,2.25750057 L22.1049929,2.25750057 Z M22.531325,0.001572704 L-1.9452416e-05,0.001572704 L-1.9452416e-05,33.967854 L22.531325,33.967854 L22.531325,33.9614085 C27.4529808,33.8947619 31.3518934,32.6793969 34.1187402,30.3394196 C37.4837488,27.4935988 39.1898554,23.0003706 39.1898554,16.9847134 C39.1898554,14.1090499 38.7410881,11.5297509 37.8560681,9.31836144 C37.0093692,7.2028812 35.758125,5.40419768 34.13722,3.97219912 C31.2823834,1.45020067 27.2749912,0.0865245021 22.531325,0.00904949351 L22.531325,0.001572704 Z\" id=\"Fill-4\" fill={  primary } mask=\"url(#mask-2)\" />\n                            </g>\n                            <path d=\"M21.4851352,29.4975138 L13.5194356,29.4975138 L13.5194356,5.00387361 L21.4851352,5.00387361 L21.1636516,5.00387361 C27.8067813,5.00387361 34.8779291,7.60998594 34.8779291,17.282889 C34.8779291,27.5088167 27.8067813,29.4975138 21.1636516,29.4975138 L21.4851352,29.4975138 Z\" id=\"Fill-7\" fill={  secondary } />\n                        </g>\n                        <g id=\"Group-30\" transform=\"matrix(0.952642, 0, 0, 0.930979, 11.685725, 10.562208)\" fill={  tertiary }>\n                            <path d=\"M1.41115607,1.17495169 L1.41115607,5.07048794 L2.30681015,5.07048794 C2.64178075,5.07048794 2.88357428,5.05173151 3.03219074,5.0142831 C3.2267149,4.96613516 3.38810511,4.88459948 3.51649106,4.76961161 C3.64474732,4.65455929 3.749531,4.46538363 3.83058274,4.20189125 C3.91163447,3.93846333 3.95216034,3.57944852 3.95216034,3.12471792 C3.95216034,2.67005177 3.91163447,2.3210275 3.83058274,2.07764511 C3.749531,1.83426272 3.63605858,1.64437805 3.49016546,1.5079911 C3.34420749,1.37160414 3.15915018,1.27930447 2.93492866,1.23109207 C2.76737852,1.19370812 2.43915142,1.17495169 1.95018252,1.17495169 L1.41115607,1.17495169 Z M0.215675421,0.175897919 L2.40271056,0.175897919 C2.89589415,0.175897919 3.27190935,0.213410777 3.53069132,0.288436492 C3.878306,0.390275522 4.17612249,0.571265392 4.42407595,0.831212737 C4.67202941,1.09116008 4.86065301,1.40950373 4.99001157,1.78598587 C5.11937014,2.16253246 5.18408185,2.62686687 5.18408185,3.1789891 C5.18408185,3.66407805 5.12345515,4.08213371 5.00220176,4.433285 C4.85397434,4.86210466 4.6423969,5.20919527 4.36753426,5.47449239 C4.15997698,5.67552779 3.87966767,5.832347 3.52660632,5.94488558 C3.26244251,6.02796818 2.90938115,6.06954171 2.46742226,6.06954171 L0.215675421,6.06954171 L0.215675421,0.175897919 Z\" id=\"Fill-10\" />\n                            <path d=\"M2.40271056,0.337035624 C2.87825729,0.337035624 3.24247136,0.372743739 3.48523751,0.443128689 C3.80302515,0.536201827 4.07944398,0.704171771 4.30645367,0.942075479 C4.53702965,1.18384649 4.7154083,1.48530291 4.83666169,1.83813003 C4.95966581,2.19611355 5.02197838,2.64723467 5.02197838,3.1789891 C5.02197838,3.64390361 4.96375081,4.04829479 4.84885188,4.38094747 C4.70970226,4.78359837 4.50973142,5.11264156 4.25458057,5.35892443 C4.06589213,5.54165459 3.80438682,5.68712971 3.47713234,5.79148248 C3.23060538,5.86895749 2.89070683,5.908404 2.46742226,5.908404 L0.377778888,5.908404 L0.377778888,0.337035624 L2.40271056,0.337035624 Z M0.0535719538,0.0147602138 L0.0535719538,6.23067941 L2.46742226,6.23067941 C2.92390562,6.23067941 3.2967436,6.18614095 3.57549672,6.09848204 C3.95157676,5.97866004 4.25594223,5.80759625 4.48061764,5.58993144 C4.77246872,5.30819828 4.9996081,4.93661473 5.15548679,4.48562252 C5.28205718,4.11919538 5.34618531,3.67954727 5.34618531,3.1789891 C5.34618531,2.61178438 5.27797217,2.12559969 5.1434263,1.73390616 C5.00706486,1.33699177 4.80456521,0.995959927 4.54169823,0.720349996 C4.27494076,0.440679396 3.9502151,0.243317935 3.57646934,0.133873205 C3.29992083,0.0536910833 2.91612466,0.0147602138 2.40271056,0.0147602138 L0.0535719538,0.0147602138 Z\" id=\"Fill-12\" />\n                            <path d=\"M1.9501501,1.33608939 C2.54124418,1.33608939 2.79263424,1.36451409 2.899428,1.38836247 C3.09466542,1.43032272 3.25566658,1.50998921 3.37905974,1.6253638 C3.50439814,1.74254314 3.60457808,1.91180219 3.6766817,2.12824235 C3.75189771,2.35415741 3.79002445,2.68945275 3.79002445,3.12471792 C3.79002445,3.56127219 3.75150867,3.90784717 3.67551456,4.15477459 C3.60360546,4.38861762 3.51354078,4.55523401 3.40791416,4.64991853 C3.30014777,4.74647224 3.16054427,4.81647046 2.99299412,4.85797953 C2.85754047,4.89207627 2.62683481,4.90935023 2.30677773,4.90935023 L1.57329196,4.90935023 L1.57329196,1.33608939 L1.9501501,1.33608939 Z M1.24902018,1.01381398 L1.24902018,5.23162564 L2.30677773,5.23162564 C2.65860709,5.23162564 2.90889484,5.21158011 3.07203577,5.17052222 C3.29100514,5.1163155 3.47729444,5.02163098 3.62500312,4.88924025 C3.77699133,4.7529822 3.89493781,4.54356764 3.98558607,4.24900792 C4.07214932,3.96766148 4.11423138,3.59988078 4.11423138,3.12471792 C4.11423138,2.64833041 4.07176027,2.2893156 3.98441893,2.02698342 C3.89519718,1.75904364 3.76622766,1.54492386 3.60120633,1.39061839 C3.43423976,1.23450819 3.22162485,1.12789948 2.96919733,1.0736283 C2.78932733,1.03347278 2.45558871,1.01381398 1.9501501,1.01381398 L1.24902018,1.01381398 Z\" id=\"Fill-14\" />\n                            <polygon id=\"Fill-16\" points=\"6.53678989 6.06950948 6.53678989 0.175865691 10.9257088 0.175865691 10.9257088 1.17491946 7.73227054 1.17491946 7.73227054 2.48013487 10.702849 2.48013487 10.702849 3.47918864 7.73227054 3.47918864 7.73227054 5.07045571 11.0391813 5.07045571 11.0391813 6.06950948\" />\n                            <path d=\"M10.7636378,0.337035624 L10.7636378,1.01381398 L7.57019949,1.01381398 L7.57019949,2.64130481 L10.5407779,2.64130481 L10.5407779,3.31808317 L7.57019949,3.31808317 L7.57019949,5.23162564 L10.8771102,5.23162564 L10.8771102,5.908404 L6.69892578,5.908404 L6.69892578,0.337035624 L10.7636378,0.337035624 Z M6.37471884,0.0147602138 L6.37471884,6.23067941 L11.2013172,6.23067941 L11.2013172,4.90935023 L7.89440643,4.90935023 L7.89440643,3.64035858 L10.8649849,3.64035858 L10.8649849,2.3190294 L7.89440643,2.3190294 L7.89440643,1.33608939 L11.0878447,1.33608939 L11.0878447,0.0147602138 L6.37471884,0.0147602138 Z\" id=\"Fill-18\" />\n                            <path d=\"M15.5303032,3.73301276 L14.7130424,1.54959685 L13.9121864,3.73301276 L15.5303032,3.73301276 Z M17.7341971,6.06950948 L16.431793,6.06950948 L15.9144884,4.73206653 L13.5458326,4.73206653 L13.055113,6.06950948 L11.7849999,6.06950948 L14.0890089,0.175865691 L15.363207,0.175865691 L17.7341971,6.06950948 Z\" id=\"Fill-20\" />\n                            <path d=\"M15.2534629,0.337035624 C15.3291976,0.525244463 17.332991,5.50626875 17.4947703,5.908404 L16.5431581,5.908404 C16.4751395,5.73244163 16.0257887,4.57096105 16.0257887,4.57096105 L13.4323926,4.57096105 C13.4323926,4.57096105 13.0075518,5.72876769 12.9417378,5.908404 L12.0218979,5.908404 C12.1781008,5.50884695 14.1252876,0.527951577 14.1999201,0.337035624 L15.2534629,0.337035624 Z M13.9780328,0.0147602138 L11.5481019,6.23067941 L13.168553,6.23067941 C13.168553,6.23067941 13.5933289,5.07280832 13.6592077,4.89323646 L15.8031882,4.89323646 C15.871142,5.06913438 16.3204928,6.23067941 16.3204928,6.23067941 L17.9736239,6.23067941 L15.472951,0.0147602138 L13.9780328,0.0147602138 Z\" id=\"Fill-22\" />\n                            <path d=\"M14.7145337,2.01579402 C14.8921991,2.49044124 15.1926093,3.29290701 15.2970039,3.57186861 L14.1437998,3.57186861 C14.2457305,3.2940672 14.5401752,2.49134361 14.7145337,2.01579402 L14.7145337,2.01579402 Z M13.680573,3.89414402 L15.7636025,3.89414402 L14.7114862,1.0833868 L13.680573,3.89414402 Z\" id=\"Fill-24\" />\n                            <polygon id=\"Fill-26\" points=\"18.7343171 6.06950948 18.7343171 0.224207003 19.9297978 0.224207003 19.9297978 5.07045571 22.9084814 5.07045571 22.9084814 6.06950948\" />\n                            <path d=\"M19.7677267,0.385376935 L19.7677267,5.23162564 L22.7464104,5.23162564 L22.7464104,5.908404 L18.8963882,5.908404 L18.8963882,0.385376935 L19.7677267,0.385376935 Z M18.5722461,0.0631015253 L18.5722461,6.23067941 L23.0706173,6.23067941 L23.0706173,4.90935023 L20.0919337,4.90935023 L20.0919337,0.0631015253 L18.5722461,0.0631015253 Z\" id=\"Fill-28\" />\n                        </g>\n                    </svg>\n                    \n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#00C0EE',\n        secondary: '#1a4b67'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff',\n        secondary: '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#1A4B67',\n        secondary: '#00C0EE'\n    }\n};\n\nexport function MybankLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary } = getLogoColors(LOGO.MYBANK, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.MYBANK }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"58px\" height=\"32px\" viewBox=\"0 0 58 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <title>MyBank</title>\n                        <desc>Created with Sketch.</desc>\n                        <defs>\n                            <polygon id=\"path-1\" points=\"3.086436e-05 0.00960615385 42.6159033 0.00960615385 42.6159033 24 3.086436e-05 24\" />\n                        </defs>\n                        <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" transform=\"matrix(1.333867, 0, 0, 1.333867, -0.00001, -0.00321)\">\n                            <g id=\"SPB_&amp;_AltPay_NewAssets\" transform=\"translate(-100.000000, -159.000000)\">\n                                <g id=\"MyBank\" transform=\"translate(100.000000, 159.000000)\">\n                                    <path d=\"M29.010016,14.6206556 C29.010016,14.6206556 27.947442,14.8389924 27.9585564,14.0777038 C27.9698571,13.3164773 29.8942008,13.3619719 30.0914038,13.4236258 C30.0914038,13.4236258 30.1519432,14.2874637 29.010016,14.6206556 M29.3297879,9.81836571 C27.677716,9.80301439 26.9053582,10.753926 26.9053582,10.753926 C26.4037199,11.2864986 26.7253546,12.0076376 27.2173686,12.0597202 C27.924406,12.1345501 27.9170171,11.5413802 29.0022546,11.2784811 C29.9542434,11.0477763 29.9954723,11.9305703 29.9954723,11.9305703 C25.9352386,11.8295126 26.1290887,15.239929 27.5113104,15.9642377 C28.8367183,16.658714 30.0756326,15.7825701 30.0756326,15.7825701 C30.0756326,15.7825701 30.1222013,16.2545455 30.777951,16.2545455 C31.5283904,16.2545455 31.5272727,15.5049412 31.5272727,15.5049412 L31.5242302,12.1853897 C31.4748674,9.75671183 29.3297879,9.81836571 29.3297879,9.81836571\" id=\"Fill-1\" fill={  secondary } />\n                                    <path d=\"M42.4169651,14.9132636 L40.766254,12.4266353 L41.9794586,11.2784792 C41.9794586,11.2784792 42.5394372,10.7597112 42.0797024,10.2455911 C41.5701862,9.67606803 40.9629029,10.2382165 40.9629029,10.2382165 L39.4383789,11.6556411 L39.4383789,8.81056644 C39.4383789,8.40291433 39.1083605,8.07272727 38.7011934,8.07272727 C38.2936547,8.07272727 37.9636364,8.40291433 37.9636364,8.81056644 L37.9636364,15.5050966 C37.9636364,15.9126248 38.2936547,16.2429358 38.7011934,16.2429358 C39.1083605,16.2429358 39.4383789,15.9126248 39.4383789,15.5050966 L39.4383789,13.7227806 L39.7172538,13.4440304 L41.2106953,15.7865117 C41.2106953,15.7865117 41.697426,16.5998328 42.4143027,16.0821803 C42.9532914,15.6931198 42.4169651,14.9132636 42.4169651,14.9132636\" id=\"Fill-3\" fill={  secondary } />\n                                    <path d=\"M37.0887651,12.0920353 C37.0887651,9.6760941 35.0962232,9.33568291 33.7411943,10.1020724 C33.7401529,10.1029393 33.7389278,10.1056016 33.7382539,10.1063446 C33.6363205,9.81249385 33.362313,9.6 33.0365425,9.6 C32.6248269,9.6 32.2909091,9.93768691 32.2909091,10.3541303 L32.2909091,15.3913243 C32.2909091,15.8078915 32.6248269,16.1454545 33.0365425,16.1454545 C33.4485644,16.1454545 33.7826048,15.8078915 33.7826048,15.3913243 L33.7723134,11.9929705 C33.7723134,11.9929705 33.9532086,11.7752139 34.2436332,11.5669922 C34.9412403,11.0671487 35.6063806,11.2374162 35.6063806,12.0917257 L35.6234716,15.4035835 C35.6234716,15.8135877 35.9518762,16.1454545 36.3573435,16.1454545 C36.7625045,16.1454545 37.0909091,15.8135877 37.0909091,15.4035835 L37.0887651,12.0920353 Z\" id=\"Fill-5\" fill={  secondary } />\n                                    <path d=\"M15.5613016,16.2862697 C15.7330634,15.9971851 15.762994,15.7935853 15.762994,15.7935853 L14.0695172,11.3349218 C14.0695172,11.3349218 13.7622674,10.4721348 14.4393994,10.2166114 C15.1567468,9.94557914 15.4157136,10.6357839 15.4696009,10.7805123 C15.5234881,10.9252407 16.5395249,13.6504516 16.5395249,13.6504516 L17.5177483,10.7867779 C17.5177483,10.7867779 17.7979621,9.89638514 18.5815138,10.2138818 C19.2290232,10.4764773 18.8964002,11.3498103 18.8964002,11.3498103 C18.8964002,11.3498103 17.8952671,14.3335844 17.0561037,16.4983684 C16.5548597,17.7916804 16.1267792,17.9191009 15.6376676,18.0403799 C14.9830758,18.2027884 13.7454545,18.1223286 13.7454545,17.30247 C13.7454545,16.655814 14.4027561,16.615491 14.6992284,16.6251065 C14.7151175,16.6254167 15.3279543,16.6788911 15.5613016,16.2862697\" id=\"Fill-7\" fill={  primary } />\n                                    <path d=\"M11.5669215,8.85710249 L10.0137262,13.1590392 L8.3203761,8.88327934 C8.3203761,8.88327934 8.06948196,8.07272727 7.36345596,8.07272727 C6.54545455,8.07272727 6.57202708,8.72317872 6.55361169,8.88327934 C6.53525811,9.04350403 6.55361169,15.569481 6.55361169,15.569481 C6.55361169,15.569481 6.54545455,16.2545455 7.29591229,16.2545455 C8.06280792,16.2545455 8.02603896,15.56334 8.03209502,15.56334 C8.03821288,15.56334 8.03209502,12.1182301 8.03209502,12.1182301 L9.27754342,15.56334 C9.27754342,15.56334 9.46151186,16.2407127 10.0381976,16.2283686 C10.6148833,16.2161486 10.7804982,15.56334 10.7804982,15.56334 L11.823501,12.1244331 L11.823501,15.56334 C11.823501,15.56334 11.823501,16.2545455 12.5780991,16.2545455 C13.3081022,16.2545455 13.3081022,15.56334 13.3081022,15.56334 L13.3090909,8.88948239 C13.3090909,8.88948239 13.3090909,8.07272727 12.5166733,8.07663519 C11.8595284,8.07973672 11.609932,8.71207526 11.5669215,8.85710249 C11.5619778,8.8740368 11.5596913,8.88327934 11.5596913,8.88327934\" id=\"Fill-9\" fill={  primary } />\n                                    <g id=\"Group-13\">\n                                        <mask id=\"mask-2\" fill=\"white\">\n                                            <polygon id=\"\" points=\"3.086436e-05 0.00960615385 42.6159033 0.00960615385 42.6159033 24 3.086436e-05 24\" transform=\"matrix(1, 0, 0, 1, 0, 0)\" />\n                                        </mask>\n                                        <g id=\"Clip-12\" />\n                                        <path d=\"M42.6159341,18.6971754 L29.5208652,18.6971754 L19.9057529,18.6956369 L19.9124196,18.7062215 C18.0119775,20.9263446 15.1892466,22.3382831 12.0318843,22.3382831 C6.30740974,22.3382831 1.66682976,17.7116369 1.66682976,12.0048677 C1.66682976,6.29803692 6.30740974,1.67182154 12.0318843,1.67182154 C15.2027652,1.67182154 18.0390147,3.09182154 19.9398272,5.32819077 L22.0210727,5.32819077 C19.8613082,2.12277538 16.1963507,0.00960615385 12.0318843,0.00960615385 C5.38703452,0.00960615385 3.086436e-05,5.38012923 3.086436e-05,12.0048677 C3.086436e-05,18.6296062 5.38703452,24.0000062 12.0318843,24.0000062 C15.5178286,24.0000062 18.6504994,22.5164985 20.846622,20.1542215 L41.6296327,20.1336062 L42.6159341,18.6971754 Z\" id=\"Fill-11\" fill={  primary } mask=\"url(#mask-2)\" />\n                                    </g>\n                                    <path d=\"M23.5642714,14.6942333 L21.476941,14.6942333 L21.476941,12.703212 L23.5642714,12.703212 C24.0691167,12.729228 24.5593003,12.986305 24.5593003,13.698846 C24.5593003,14.4306215 24.1135333,14.6942333 23.5642714,14.6942333 Z M21.476941,9.5856756 L23.4225205,9.5856756 C23.8122278,9.59572442 24.2213404,9.80372869 24.2213404,10.3852036 C24.2213404,10.9910915 23.8636056,11.1846082 23.4225205,11.1846082 L21.476941,11.1846082 L21.476941,9.5856756 Z M25.2086687,11.7878453 C25.2484033,11.7332241 25.7477042,11.3284357 25.7082776,10.252103 C25.6287468,8.0729285 23.7375637,8.09777311 23.3189641,8.08507338 C22.644646,8.06479081 22.2387368,8.0729285 21.0010496,8.08507338 C19.9559983,8.09543044 19.9636372,9.0459372 19.9636372,9.0459372 L19.9636364,16.1454545 L23.4862807,16.1454545 C25.3714882,16.1454545 26.0727273,15.1069128 26.0727273,13.6549518 C26.0727273,12.1940516 25.2086687,11.7878453 25.2086687,11.7878453 Z\" id=\"Fill-14\" fill={  secondary } />\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#d03238',\n        secondary: '#b3b1b1'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff',\n        secondary: '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#d03238',\n        secondary: '#b3b1b1'\n    }\n};\n\nexport function P24Logo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary } = getLogoColors(LOGO.P24, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.P24 }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 100 32\" height=\"32\" width=\"100\" preserveAspectRatio=\"xMinYMin meet\">\n                        <g transform=\"matrix(1.2953205,0,0,1.4482638,-127.73674,-229.48747)\">\n                            <g transform=\"translate(99,159)\">\n                                <path transform=\"matrix(0.77200971,0,0,0.69048194,-0.38599675,-0.54304623)\" d=\"M 34.123047 14.666016 L 32.416016 14.667969 L 30.496094 27.771484 L 32.208984 27.773438 L 34.123047 14.666016 z M 2.4082031 14.669922 L 0.5 27.771484 L 2.2753906 27.773438 L 2.9785156 22.916016 L 6.421875 22.933594 C 6.421875 22.933594 7.7610468 22.994689 8.7128906 22.419922 C 9.6646511 21.844634 9.9179688 20.537109 9.9179688 20.537109 C 9.9179688 20.537109 10.021944 20.051453 10.107422 19.458984 C 10.201364 18.808401 10.297704 18.027313 10.347656 17.611328 C 10.369589 17.428799 10.382812 17.316406 10.382812 17.316406 C 10.382812 17.316406 10.406035 17.181738 10.408203 16.972656 C 10.411247 16.680039 10.373345 16.24144 10.173828 15.824219 C 10.107822 15.686199 10.023752 15.551336 9.9179688 15.423828 C 9.7749921 15.251532 9.573657 15.118146 9.3457031 15.015625 C 9.1093266 14.909344 8.8444066 14.836083 8.5878906 14.785156 C 8.2611582 14.720236 7.9481918 14.691729 7.7226562 14.679688 C 7.5151753 14.668598 7.3808594 14.669922 7.3808594 14.669922 L 4.5292969 14.669922 L 2.4082031 14.669922 z M 3.9023438 16.636719 L 6.5097656 16.644531 C 6.5097656 16.644531 6.6871684 16.640189 6.9335938 16.644531 C 7.2136679 16.6496 7.5842469 16.667097 7.8886719 16.712891 C 8.149399 16.752066 8.3620627 16.811675 8.4277344 16.90625 C 8.5143382 17.03109 8.5484972 17.190294 8.5605469 17.335938 C 8.5776425 17.542977 8.5477921 17.723762 8.546875 17.736328 C 8.5451652 17.758038 8.3882592 18.81021 8.1777344 20.056641 C 8.0971356 20.533644 7.7783765 20.790093 7.4101562 20.878906 C 6.8022654 21.025453 6.1484375 21 6.1484375 21 L 3.2695312 20.990234 L 3.9023438 16.636719 z M 27.246094 18.195312 C 26.565902 18.205016 26.253806 18.2403 26 18.302734 C 26 18.302734 24.790129 18.501565 24.103516 19.472656 C 23.416902 20.4437 23.212891 22.568359 23.212891 22.568359 C 23.212891 22.568359 22.804576 24.916796 22.923828 25.699219 C 23.042829 26.481642 23.256401 27.206424 24.033203 27.546875 C 24.810173 27.88723 25.46875 27.873047 25.46875 27.873047 C 25.46875 27.873047 26.853325 27.996517 27.896484 27.714844 C 28.939685 27.433792 29.490234 26.595703 29.490234 26.595703 C 29.490234 26.595703 29.735609 26.235379 29.912109 25.804688 C 30.088777 25.374043 30.140682 25.073949 30.148438 25.037109 L 30.257812 24.53125 L 28.484375 24.533203 C 28.484375 24.533203 28.385914 25.868868 27.429688 25.992188 C 26.473716 26.115218 25.960314 26.068498 25.775391 26.060547 C 25.593178 26.052871 24.567122 26.102566 24.650391 25.125 C 24.650808 25.111821 24.651179 25.091912 24.652344 25.064453 C 24.69996 23.94948 24.808594 23.660156 24.808594 23.660156 L 30.375 23.642578 L 30.613281 22.072266 C 30.883598 20.286624 30.683916 18.929319 29.257812 18.398438 C 28.779056 18.220288 27.947801 18.185366 27.246094 18.195312 z M 37.748047 18.197266 C 37.067855 18.206824 36.755758 18.242238 36.501953 18.304688 C 36.501953 18.304688 35.292082 18.503803 34.605469 19.474609 C 33.918854 20.445938 33.714844 22.570313 33.714844 22.570312 C 33.714844 22.570312 33.306572 24.918749 33.425781 25.701172 C 33.545028 26.483643 33.758145 27.207998 34.535156 27.548828 C 35.311959 27.889232 35.970703 27.875 35.970703 27.875 C 35.970703 27.875 37.355488 27.998135 38.398438 27.716797 C 39.441597 27.435412 39.992187 26.597656 39.992188 26.597656 C 39.992188 26.597656 40.237604 26.237189 40.414062 25.806641 C 40.590771 25.376138 40.642384 25.077855 40.650391 25.041016 L 40.759766 24.533203 L 38.986328 24.535156 C 38.986328 24.535156 38.887867 25.871106 37.931641 25.994141 C 36.975669 26.117315 36.462059 26.072303 36.277344 26.064453 C 36.095172 26.056777 35.06916 26.104467 35.152344 25.126953 C 35.152802 25.113774 35.153175 25.093967 35.154297 25.066406 C 35.201874 23.951433 35.310547 23.662109 35.310547 23.662109 L 40.876953 23.644531 L 41.115234 22.076172 C 41.385759 20.290531 41.185607 18.931462 39.759766 18.400391 C 39.280716 18.222193 38.449796 18.187223 37.748047 18.197266 z M 46.277344 18.304688 L 43.757812 24.96875 L 43.179688 18.316406 L 41.541016 18.318359 L 42.371094 27.773438 L 44.355469 27.765625 L 46.90625 21.148438 L 47.486328 27.765625 L 49.505859 27.765625 L 53.117188 18.316406 L 51.417969 18.318359 L 48.898438 24.996094 L 48.300781 18.3125 L 46.277344 18.304688 z M 11.253906 18.310547 L 9.7929688 27.720703 L 11.617188 27.720703 L 12.427734 22.507812 C 12.596271 21.449811 13.285209 20.144531 14.638672 20.144531 L 15.582031 20.140625 L 15.865234 18.310547 L 14.873047 18.310547 C 14.184891 18.310547 13.533952 18.621542 12.978516 18.96875 L 13.076172 18.310547 L 11.253906 18.310547 z M 23.574219 18.310547 L 17.048828 18.320312 L 16.789062 20.167969 L 20.960938 20.167969 L 15.732422 25.884766 L 15.451172 27.771484 L 22.191406 27.769531 L 22.457031 25.939453 L 17.880859 25.951172 L 23.335938 20.005859 L 23.574219 18.310547 z M 59.283203 18.3125 L 56.183594 25.228516 L 55.087891 18.320312 L 53.347656 18.316406 L 54.962891 27.882812 L 54.755859 28.283203 C 54.755859 28.283203 54.42297 29.081956 54.011719 29.267578 C 53.600426 29.452827 52.910156 29.304688 52.910156 29.304688 L 52.650391 31.068359 L 53.066406 31.152344 C 53.459811 31.231491 53.623329 31.198848 54.033203 31.152344 C 54.443329 31.10608 54.748768 30.903232 55.25 30.449219 C 55.751441 29.99568 56.560547 28.207031 56.560547 28.207031 L 61.027344 18.330078 L 59.283203 18.3125 z M 37.816406 20.023438 C 38.153219 20.022293 38.536406 20.045829 38.880859 20.126953 C 39.109271 20.180351 39.326106 20.327316 39.382812 20.544922 C 39.516491 21.058003 39.375 21.841797 39.375 21.841797 L 35.558594 21.835938 L 35.710938 21.144531 C 35.710938 21.144531 35.842858 20.605552 36.107422 20.375 C 36.372026 20.144305 36.710486 20.103629 37.029297 20.068359 C 37.188702 20.050872 37.479594 20.024582 37.816406 20.023438 z M 27.330078 20.027344 C 27.666911 20.026207 28.050203 20.04988 28.394531 20.130859 C 28.623194 20.184445 28.839945 20.329507 28.896484 20.546875 C 29.030121 21.059954 28.886719 21.84375 28.886719 21.84375 L 25.072266 21.839844 L 25.224609 21.148438 C 25.224609 21.148438 25.35653 20.607886 25.621094 20.376953 C 25.885906 20.146258 26.224367 20.107486 26.542969 20.072266 C 26.702373 20.054561 26.993245 20.028481 27.330078 20.027344 z \" fill={ primary } />\n                                <path d=\"m 18.656138,16.774358 c -0.0046,0.0239 -0.0083,0.04735 -0.01154,0.07058 -0.0065,0.118231 0.01306,-0.07708 0.01154,-0.07058\" fill={ primary } />\n                                <path d=\"m 26.763669,16.775893 c -0.0046,0.02391 -0.0083,0.04743 -0.01154,0.07066 -0.0065,0.118089 0.01306,-0.07731 0.01154,-0.07066\" fill={ primary } />\n                                <path transform=\"matrix(0.77200971,0,0,0.69048194,-0.38599675,-0.54304623)\" d=\"M 51.226562 0.78710938 C 50.728893 0.78574323 50.439453 0.79296875 50.439453 0.79296875 L 48.318359 5.6542969 C 48.318359 5.6542969 49.531198 5.9719517 51.199219 6.5273438 C 54.144731 7.5791572 56.515625 9.2929688 56.515625 9.2929688 L 66.666016 3.234375 C 66.745656 3.1868271 63.084253 2.0998969 59.082031 1.3945312 C 56.08052 0.86568549 52.71957 0.7912078 51.226562 0.78710938 z M 47.589844 0.90820312 C 47.589844 0.90820313 43.781742 1.1966088 40.910156 1.8066406 C 38.038322 2.4166724 34.904297 3.3691406 34.904297 3.3691406 L 35.34375 6.2011719 C 35.34375 6.2011719 37.385444 5.5830734 39.835938 5.25 C 42.979007 4.7627651 46.330078 5.2851562 46.330078 5.2851562 L 47.589844 0.90820312 z M 32.949219 4.0429688 C 32.949219 4.0429687 31.321834 4.6211203 28.267578 6.0117188 C 25.213321 7.4021267 22.914062 8.8925781 22.914062 8.8925781 L 25.453125 10.84375 C 25.453125 10.84375 27.099522 9.6851386 28.839844 8.8378906 C 30.525001 7.9290065 33.464844 6.8066406 33.464844 6.8066406 L 32.949219 4.0429688 z M 71.046875 5.0175781 L 58.333984 10.615234 L 60.566406 12.546875 L 78.900391 12.546875 C 78.900391 12.546875 78.861436 11.867776 78.373047 10.908203 C 78.067288 10.306786 77.515959 9.6724399 76.935547 9.0117188 C 76.724772 8.771647 75.878829 8.0196942 75.248047 7.5527344 C 73.629269 6.3552786 72.725403 5.8908131 71.046875 5.0175781 z M 20.621094 10.361328 C 20.621094 10.361328 18.007768 12.208509 16.898438 13.080078 C 15.819753 13.883157 13.6875 15.744141 13.6875 15.744141 L 19.160156 15.744141 C 19.160156 15.744141 20.387652 14.611026 21.257812 13.884766 C 22.127974 13.158363 23.712891 12.011719 23.712891 12.011719 L 20.621094 10.361328 z M 66.779297 14.519531 C 65.231195 14.543948 64.467235 14.626145 63.683594 14.955078 C 62.899953 15.283726 62.446574 15.882838 62.158203 16.728516 C 61.840059 17.527168 61.65625 19.259766 61.65625 19.259766 L 63.453125 19.261719 L 63.560547 18.464844 C 63.560547 18.464844 63.753461 17.029388 64.181641 16.751953 C 64.31878 16.663088 64.538495 16.579747 64.792969 16.529297 C 65.262594 16.436347 65.860733 16.425312 66.345703 16.445312 C 67.093861 16.476103 67.374266 16.483376 68.134766 16.582031 C 68.895557 16.68089 68.701172 17.517578 68.701172 17.517578 L 68.552734 18.767578 C 68.552734 18.767578 68.488006 19.327955 68.3125 19.677734 C 68.157306 19.987057 67.733373 20.195678 67.488281 20.287109 C 66.896194 20.507571 64.871094 21.095703 64.871094 21.095703 L 63.275391 21.619141 C 63.275391 21.619141 62.297563 21.944394 61.748047 22.636719 C 61.19878 23.329281 60.983257 24.116118 60.908203 24.527344 C 60.833113 24.938283 60.412109 27.769531 60.412109 27.769531 L 69.009766 27.773438 L 69.296875 25.810547 L 62.496094 25.820312 L 62.619141 25.021484 C 62.619141 25.021484 62.697988 24.196554 62.990234 23.927734 C 63.082461 23.842591 63.127078 23.730658 63.669922 23.509766 C 63.993778 23.377829 65.103516 23.039062 65.103516 23.039062 L 67.669922 22.240234 C 67.669922 22.240234 69.069743 21.828553 69.621094 20.957031 C 70.172403 20.085747 70.384766 18.416016 70.384766 18.416016 C 70.384766 18.416016 70.533003 16.793571 70.419922 16.285156 C 70.307099 15.776804 69.886071 15.166455 69.375 14.90625 C 68.863719 14.646045 68.327565 14.495353 66.779297 14.519531 z \" fill={ secondary } />\n                                <g transform=\"translate(53.596306,9.56338)\">\n                                    <path d=\"M 4.7408782,5.7106164 1.839113,5.7061141 5.3711256,1.8647573 Z M 6.112171,5.7095319 7.0417209,0.01876197 5.3948175,0.01774319 0.26289873,5.6444944 0.02981113,7.0693723 4.5178982,7.0688465 4.1894639,9.0682502 l 1.376733,0.00181 0.3251187,-2.001047 1.2714396,0.00269 0.2297076,-1.3639812 z\" fill={ secondary } />\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { type LogoColorMap } from '../../types';\nimport { LOGO, LOGO_COLOR } from '../../constants';\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#003087',\n        secondary: '#009cde'\n    },\n    [ LOGO_COLOR.BLUE ]: {\n        primary:   '#003087',\n        secondary: '#009cde'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff',\n        secondary: '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#333030',\n        secondary: '#636363'\n    }\n};\n\nexport function PayPalLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary } = getLogoColors(LOGO.PAYPAL, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n            { ...props }\n            { ...props }\n            name={ LOGO.PAYPAL }\n            alt='PayPal'\n            logoColor={ logoColor }\n            render={ () => (\n                <svg width=\"100\" height=\"32\" viewBox=\"0 0 100 32\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\">\n                    <path fill={ primary } d=\"M 12 4.917 L 4.2 4.917 C 3.7 4.917 3.2 5.317 3.1 5.817 L 0 25.817 C -0.1 26.217 0.2 26.517 0.6 26.517 L 4.3 26.517 C 4.8 26.517 5.3 26.117 5.4 25.617 L 6.2 20.217 C 6.3 19.717 6.7 19.317 7.3 19.317 L 9.8 19.317 C 14.9 19.317 17.9 16.817 18.7 11.917 C 19 9.817 18.7 8.117 17.7 6.917 C 16.6 5.617 14.6 4.917 12 4.917 Z M 12.9 12.217 C 12.5 15.017 10.3 15.017 8.3 15.017 L 7.1 15.017 L 7.9 9.817 C 7.9 9.517 8.2 9.317 8.5 9.317 L 9 9.317 C 10.4 9.317 11.7 9.317 12.4 10.117 C 12.9 10.517 13.1 11.217 12.9 12.217 Z\" />\n                    <path fill={ primary } d=\"M 35.2 12.117 L 31.5 12.117 C 31.2 12.117 30.9 12.317 30.9 12.617 L 30.7 13.617 L 30.4 13.217 C 29.6 12.017 27.8 11.617 26 11.617 C 21.9 11.617 18.4 14.717 17.7 19.117 C 17.3 21.317 17.8 23.417 19.1 24.817 C 20.2 26.117 21.9 26.717 23.8 26.717 C 27.1 26.717 29 24.617 29 24.617 L 28.8 25.617 C 28.7 26.017 29 26.417 29.4 26.417 L 32.8 26.417 C 33.3 26.417 33.8 26.017 33.9 25.517 L 35.9 12.717 C 36 12.517 35.6 12.117 35.2 12.117 Z M 30.1 19.317 C 29.7 21.417 28.1 22.917 25.9 22.917 C 24.8 22.917 24 22.617 23.4 21.917 C 22.8 21.217 22.6 20.317 22.8 19.317 C 23.1 17.217 24.9 15.717 27 15.717 C 28.1 15.717 28.9 16.117 29.5 16.717 C 30 17.417 30.2 18.317 30.1 19.317 Z\" />\n                    <path fill={ primary } d=\"M 55.1 12.117 L 51.4 12.117 C 51 12.117 50.7 12.317 50.5 12.617 L 45.3 20.217 L 43.1 12.917 C 43 12.417 42.5 12.117 42.1 12.117 L 38.4 12.117 C 38 12.117 37.6 12.517 37.8 13.017 L 41.9 25.117 L 38 30.517 C 37.7 30.917 38 31.517 38.5 31.517 L 42.2 31.517 C 42.6 31.517 42.9 31.317 43.1 31.017 L 55.6 13.017 C 55.9 12.717 55.6 12.117 55.1 12.117 Z\" />\n                    <path fill={ secondary } d=\"M 67.5 4.917 L 59.7 4.917 C 59.2 4.917 58.7 5.317 58.6 5.817 L 55.5 25.717 C 55.4 26.117 55.7 26.417 56.1 26.417 L 60.1 26.417 C 60.5 26.417 60.8 26.117 60.8 25.817 L 61.7 20.117 C 61.8 19.617 62.2 19.217 62.8 19.217 L 65.3 19.217 C 70.4 19.217 73.4 16.717 74.2 11.817 C 74.5 9.717 74.2 8.017 73.2 6.817 C 72 5.617 70.1 4.917 67.5 4.917 Z M 68.4 12.217 C 68 15.017 65.8 15.017 63.8 15.017 L 62.6 15.017 L 63.4 9.817 C 63.4 9.517 63.7 9.317 64 9.317 L 64.5 9.317 C 65.9 9.317 67.2 9.317 67.9 10.117 C 68.4 10.517 68.5 11.217 68.4 12.217 Z\" />\n                    <path fill={ secondary } d=\"M 90.7 12.117 L 87 12.117 C 86.7 12.117 86.4 12.317 86.4 12.617 L 86.2 13.617 L 85.9 13.217 C 85.1 12.017 83.3 11.617 81.5 11.617 C 77.4 11.617 73.9 14.717 73.2 19.117 C 72.8 21.317 73.3 23.417 74.6 24.817 C 75.7 26.117 77.4 26.717 79.3 26.717 C 82.6 26.717 84.5 24.617 84.5 24.617 L 84.3 25.617 C 84.2 26.017 84.5 26.417 84.9 26.417 L 88.3 26.417 C 88.8 26.417 89.3 26.017 89.4 25.517 L 91.4 12.717 C 91.4 12.517 91.1 12.117 90.7 12.117 Z M 85.5 19.317 C 85.1 21.417 83.5 22.917 81.3 22.917 C 80.2 22.917 79.4 22.617 78.8 21.917 C 78.2 21.217 78 20.317 78.2 19.317 C 78.5 17.217 80.3 15.717 82.4 15.717 C 83.5 15.717 84.3 16.117 84.9 16.717 C 85.5 17.417 85.7 18.317 85.5 19.317 Z\" />\n                    <path fill={ secondary } d=\"M 95.1 5.417 L 91.9 25.717 C 91.8 26.117 92.1 26.417 92.5 26.417 L 95.7 26.417 C 96.2 26.417 96.7 26.017 96.8 25.517 L 100 5.617 C 100.1 5.217 99.8 4.917 99.4 4.917 L 95.8 4.917 C 95.4 4.917 95.2 5.117 95.1 5.417 Z\" />\n                </svg>\n            ) }\n        />\n    );\n}\n\nexport function PPLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    return (\n        <SVGLogo\n            { ...props }\n            { ...props }\n            name={ LOGO.PP }\n            alt='PP'\n            logoColor={ logoColor }\n            render={ () => {\n                if (logoColor === LOGO_COLOR.BLUE || logoColor === LOGO_COLOR.DEFAULT) {\n                    return (\n                        <svg width=\"24\" height=\"32\" viewBox=\"0 0 24 32\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\">\n                            <path fill=\"#009cde\" d=\"M 20.905 9.5 C 21.185 7.4 20.905 6 19.782 4.7 C 18.564 3.3 16.411 2.6 13.697 2.6 L 5.739 2.6 C 5.271 2.6 4.71 3.1 4.615 3.6 L 1.339 25.8 C 1.339 26.2 1.62 26.7 2.088 26.7 L 6.956 26.7 L 6.675 28.9 C 6.581 29.3 6.862 29.6 7.236 29.6 L 11.356 29.6 C 11.825 29.6 12.292 29.3 12.386 28.8 L 12.386 28.5 L 13.228 23.3 L 13.228 23.1 C 13.322 22.6 13.79 22.2 14.258 22.2 L 14.821 22.2 C 18.845 22.2 21.935 20.5 22.871 15.5 C 23.339 13.4 23.153 11.7 22.029 10.5 C 21.748 10.1 21.279 9.8 20.905 9.5 L 20.905 9.5\" />\n                            <path fill=\"#012169\" d=\"M 20.905 9.5 C 21.185 7.4 20.905 6 19.782 4.7 C 18.564 3.3 16.411 2.6 13.697 2.6 L 5.739 2.6 C 5.271 2.6 4.71 3.1 4.615 3.6 L 1.339 25.8 C 1.339 26.2 1.62 26.7 2.088 26.7 L 6.956 26.7 L 8.267 18.4 L 8.173 18.7 C 8.267 18.1 8.735 17.7 9.296 17.7 L 11.636 17.7 C 16.224 17.7 19.782 15.7 20.905 10.1 C 20.812 9.8 20.905 9.7 20.905 9.5\" />\n                            <path fill=\"#003087\" d=\"M 9.485 9.5 C 9.577 9.2 9.765 8.9 10.046 8.7 C 10.232 8.7 10.326 8.6 10.513 8.6 L 16.692 8.6 C 17.442 8.6 18.189 8.7 18.753 8.8 C 18.939 8.8 19.127 8.8 19.314 8.9 C 19.501 9 19.688 9 19.782 9.1 C 19.875 9.1 19.968 9.1 20.063 9.1 C 20.343 9.2 20.624 9.4 20.905 9.5 C 21.185 7.4 20.905 6 19.782 4.6 C 18.658 3.2 16.506 2.6 13.79 2.6 L 5.739 2.6 C 5.271 2.6 4.71 3 4.615 3.6 L 1.339 25.8 C 1.339 26.2 1.62 26.7 2.088 26.7 L 6.956 26.7 L 8.267 18.4 L 9.485 9.5 Z\" />\n                        </svg>\n                    );\n                }\n\n                if (logoColor === LOGO_COLOR.WHITE) {\n                    return (\n                        <svg width=\"24\" height=\"32\" viewBox=\"0 0 24 32\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\">\n                            <path fill=\"#ffffff\" opacity=\"0.7\" d=\"M 20.702 9.446 C 20.982 7.347 20.702 5.947 19.578 4.548 C 18.361 3.148 16.208 2.548 13.493 2.548 L 5.536 2.548 C 4.974 2.548 4.506 2.948 4.412 3.548 L 1.136 25.74 C 1.042 26.239 1.323 26.639 1.791 26.639 L 6.753 26.639 L 6.378 28.938 C 6.285 29.238 6.659 29.638 6.94 29.638 L 11.153 29.638 C 11.621 29.638 11.995 29.238 12.089 28.739 L 12.182 28.539 L 12.931 23.341 L 13.025 23.041 C 13.119 22.441 13.493 22.141 13.961 22.141 L 14.616 22.141 C 18.642 22.141 21.731 20.342 22.668 15.443 C 23.042 13.344 22.855 11.545 21.825 10.345 C 21.451 10.046 21.076 9.646 20.702 9.446 L 20.702 9.446\" />\n                            <path fill=\"#ffffff\" opacity=\"0.7\" d=\"M 20.702 9.446 C 20.982 7.347 20.702 5.947 19.578 4.548 C 18.361 3.148 16.208 2.548 13.493 2.548 L 5.536 2.548 C 4.974 2.548 4.506 2.948 4.412 3.548 L 1.136 25.74 C 1.042 26.239 1.323 26.639 1.791 26.639 L 6.753 26.639 L 7.97 18.342 L 7.876 18.642 C 8.063 18.043 8.438 17.643 9.093 17.643 L 11.433 17.643 C 16.021 17.643 19.578 15.643 20.608 9.946 C 20.608 9.746 20.608 9.546 20.702 9.446\" />\n                            <path fill=\"#ffffff\" d=\"M 9.28 9.446 C 9.28 9.146 9.468 8.846 9.842 8.646 C 9.936 8.646 10.123 8.546 10.216 8.546 L 16.489 8.546 C 17.238 8.546 17.893 8.646 18.548 8.746 C 18.736 8.746 18.829 8.746 19.11 8.846 C 19.204 8.946 19.391 8.946 19.578 9.046 C 19.672 9.046 19.672 9.046 19.859 9.146 C 20.14 9.246 20.421 9.346 20.702 9.446 C 20.982 7.347 20.702 5.947 19.578 4.648 C 18.361 3.248 16.208 2.548 13.493 2.548 L 5.536 2.548 C 4.974 2.548 4.506 3.048 4.412 3.548 L 1.136 25.74 C 1.042 26.239 1.323 26.639 1.791 26.639 L 6.753 26.639 L 7.97 18.342 L 9.28 9.446 Z\" />\n                            <g transform=\"matrix(0.497737, 0, 0, 0.52612, 1.10144, 0.638654)\" opacity=\"0.2\">\n                                <path fill=\"#231f20\" d=\"M39.3 16.7c0.9 0.5 1.7 1.1 2.3 1.8 1 1.1 1.6 2.5 1.9 4.1 0.3-3.2-0.2-5.8-1.9-7.8-0.6-0.7-1.3-1.2-2.1-1.7C39.5 14.2 39.5 15.4 39.3 16.7z\" />\n                                <path fill=\"#231f20\" d=\"M0.4 45.2L6.7 5.6C6.8 4.5 7.8 3.7 8.9 3.7h16c5.5 0 9.8 1.2 12.2 3.9 1.2 1.4 1.9 3 2.2 4.8 0.4-3.6-0.2-6.1-2.2-8.4C34.7 1.2 30.4 0 24.9 0H8.9c-1.1 0-2.1 0.8-2.3 1.9L0 44.1C0 44.5 0.1 44.9 0.4 45.2z\" />\n                                <path fill=\"#231f20\" d=\"M10.7 49.4l-0.1 0.6c-0.1 0.4 0.1 0.8 0.4 1.1l0.3-1.7H10.7z\" />\n                            </g>\n                        </svg>\n                    );\n                }\n\n                if (logoColor === LOGO_COLOR.BLACK) {\n                    return (\n                        <svg width=\"24\" height=\"32\" viewBox=\"0 0 24 32\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path opacity=\"0.7\" d=\"M 20.702 9.446 C 20.982 7.347 20.702 5.947 19.578 4.548 C 18.361 3.148 16.208 2.548 13.493 2.548 L 5.536 2.548 C 4.974 2.548 4.506 2.948 4.412 3.548 L 1.136 25.74 C 1.042 26.239 1.323 26.639 1.791 26.639 L 6.753 26.639 L 6.378 28.938 C 6.285 29.238 6.659 29.638 6.94 29.638 L 11.153 29.638 C 11.621 29.638 11.995 29.238 12.089 28.739 L 12.182 28.539 L 12.931 23.341 L 13.025 23.041 C 13.119 22.441 13.493 22.141 13.961 22.141 L 14.616 22.141 C 18.642 22.141 21.731 20.342 22.668 15.443 C 23.042 13.344 22.855 11.545 21.825 10.345 C 21.451 10.046 21.076 9.646 20.702 9.446 L 20.702 9.446\" fill=\"rgb(99, 99, 99)\" />\n                            <path opacity=\"0.7\" d=\"M 20.702 9.446 C 20.982 7.347 20.702 5.947 19.578 4.548 C 18.361 3.148 16.208 2.548 13.493 2.548 L 5.536 2.548 C 4.974 2.548 4.506 2.948 4.412 3.548 L 1.136 25.74 C 1.042 26.239 1.323 26.639 1.791 26.639 L 6.753 26.639 L 7.97 18.342 L 7.876 18.642 C 8.063 18.043 8.438 17.643 9.093 17.643 L 11.433 17.643 C 16.021 17.643 19.578 15.643 20.608 9.946 C 20.608 9.746 20.608 9.546 20.702 9.446\" />\n                            <path d=\"M 9.28 9.446 C 9.28 9.146 9.468 8.846 9.842 8.646 C 9.936 8.646 10.123 8.546 10.216 8.546 L 16.489 8.546 C 17.238 8.546 17.893 8.646 18.548 8.746 C 18.736 8.746 18.829 8.746 19.11 8.846 C 19.204 8.946 19.391 8.946 19.578 9.046 C 19.672 9.046 19.672 9.046 19.859 9.146 C 20.14 9.246 20.421 9.346 20.702 9.446 C 20.982 7.347 20.702 5.947 19.578 4.648 C 18.361 3.248 16.208 2.548 13.493 2.548 L 5.536 2.548 C 4.974 2.548 4.506 3.048 4.412 3.548 L 1.136 25.74 C 1.042 26.239 1.323 26.639 1.791 26.639 L 6.753 26.639 L 7.97 18.342 L 9.28 9.446 Z\" fill=\"rgb(51, 48, 48)\" />\n                            <g transform=\"matrix(0.497737, 0, 0, 0.52612, 1.10144, 0.638654)\" opacity=\"0.2\">\n                                <path fill=\"#231f20\" d=\"M39.3 16.7c0.9 0.5 1.7 1.1 2.3 1.8 1 1.1 1.6 2.5 1.9 4.1 0.3-3.2-0.2-5.8-1.9-7.8-0.6-0.7-1.3-1.2-2.1-1.7C39.5 14.2 39.5 15.4 39.3 16.7z\" />\n                                <path fill=\"#231f20\" d=\"M0.4 45.2L6.7 5.6C6.8 4.5 7.8 3.7 8.9 3.7h16c5.5 0 9.8 1.2 12.2 3.9 1.2 1.4 1.9 3 2.2 4.8 0.4-3.6-0.2-6.1-2.2-8.4C34.7 1.2 30.4 0 24.9 0H8.9c-1.1 0-2.1 0.8-2.3 1.9L0 44.1C0 44.5 0.1 44.9 0.4 45.2z\" />\n                                <path fill=\"#231f20\" d=\"M10.7 49.4l-0.1 0.6c-0.1 0.4 0.1 0.8 0.4 1.1l0.3-1.7H10.7z\" />\n                            </g>\n                        </svg>\n                    );\n                }\n\n                throw new Error(`No ${ logoColor } paypal logo available`);\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]:   {\n        main: '#005DA0',\n        card: '#AEB1BC'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        main: '#FFFFFF',\n        card: '#FFFFFF'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        main: '#333030',\n        card: '#333030'\n    }\n};\n\nexport function SepaLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { main, card } = getLogoColors(LOGO.SEPA, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.SEPA }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"100\" height=\"32\" viewBox=\"0 0 100 32\" preserveAspectRatio=\"xMinYMin meet\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill={ main } d=\"M 39.871 18.772 C 37.78 18.772 35.843 18.278 34.272 17.425 L 34.81 13.935 C 36.409 14.769 38.051 15.263 39.826 15.263 C 41.809 15.263 42.661 14.544 42.661 13.284 C 42.661 10.45 34.34 11.641 34.34 5.59 C 34.34 2.53 36.319 0.055 40.885 0.055 C 42.639 0.055 44.549 0.416 45.946 0.999 L 45.474 4.395 C 43.989 3.926 42.481 3.633 41.108 3.633 C 38.86 3.633 38.275 4.395 38.275 5.364 C 38.275 8.175 46.598 6.895 46.598 13.013 C 46.576 16.569 44.101 18.772 39.871 18.772 Z\" />\n                        <path fill={ main } d=\"M 62.233 14.881 L 62.233 18.413 L 49.951 18.413 L 49.951 0.345 L 62.233 0.345 L 62.233 3.946 L 54.022 3.946 L 54.022 7.549 L 60.705 7.549 L 60.705 10.787 L 54.022 10.787 L 54.022 14.905 L 62.233 14.905 Z\" />\n                        <path fill={ main } d=\"M 72.313 12.565 L 69.905 12.565 L 69.905 18.437 L 65.834 18.437 L 65.834 0.345 L 72.313 0.345 C 77.328 0.345 79.376 2.328 79.376 6.534 C 79.376 10.361 77.355 12.565 72.313 12.565 Z M 72.313 3.766 L 69.905 3.766 L 69.905 9.302 L 72.313 9.302 C 74.314 9.302 75.194 8.808 75.194 6.534 C 75.194 4.352 74.428 3.766 72.313 3.766 Z\" />\n                        <path fill={ main } d=\"M 91.797 14.924 L 85.246 14.924 L 84.234 18.437 L 79.939 18.437 L 86.193 0.345 L 91.031 0.345 L 97.352 18.437 L 92.808 18.437 L 91.797 14.924 Z M 88.04 5.318 L 86.238 11.506 L 90.85 11.506 L 89.118 5.318 L 88.645 3.408 L 88.578 3.408 L 88.04 5.318 Z\" />\n                        <path fill={ main } d=\"M 39.736 30.157 L 39.692 31.867 L 34.382 31.867 L 34.382 23.475 L 36.299 23.475 L 36.299 30.157 L 39.736 30.157 Z\" />\n                        <path fill={ main } d=\"M 44.798 31.215 L 44.778 31.215 C 44.371 31.71 43.722 31.977 42.931 31.977 C 41.648 31.977 40.818 31.257 40.818 29.727 C 40.818 28.468 41.695 27.613 43.222 27.613 C 43.722 27.613 44.168 27.68 44.527 27.796 L 44.527 27.411 C 44.527 26.736 44.168 26.421 43.244 26.421 C 42.505 26.421 42.007 26.534 41.382 26.782 L 41.245 25.387 C 41.919 25.095 42.707 24.936 43.563 24.936 C 45.563 24.936 46.263 25.792 46.263 27.658 L 46.263 31.867 L 44.933 31.867 L 44.798 31.215 Z M 44.549 28.966 C 44.393 28.896 44.056 28.828 43.583 28.828 C 42.819 28.828 42.46 29.12 42.46 29.727 C 42.46 30.38 42.842 30.63 43.427 30.63 C 44.012 30.63 44.549 30.271 44.549 29.842 L 44.549 28.966 Z\" />\n                        <path fill={ main } d=\"M 50.02 32.002 C 49.21 32.002 48.466 31.842 47.883 31.529 L 48.062 30.088 C 48.625 30.405 49.41 30.561 49.996 30.561 C 50.693 30.561 50.986 30.29 50.986 29.887 C 50.986 28.807 47.84 29.436 47.84 27.051 C 47.84 25.838 48.667 24.959 50.403 24.959 C 51.075 24.959 51.752 25.095 52.336 25.32 L 52.201 26.736 C 51.64 26.512 50.897 26.396 50.381 26.396 C 49.816 26.396 49.503 26.625 49.503 26.961 C 49.503 27.995 52.603 27.366 52.603 29.707 C 52.603 31.101 51.862 32.002 50.02 32.002 Z\" />\n                        <path fill={ main } d=\"M 56.026 26.375 L 56.026 29.842 C 56.026 30.36 56.295 30.582 56.836 30.582 C 57.014 30.582 57.239 30.561 57.374 30.514 L 57.464 31.776 C 57.239 31.888 56.789 31.956 56.295 31.956 C 54.946 31.956 54.27 31.169 54.27 29.887 L 54.27 26.352 L 53.506 26.352 L 53.506 25.095 L 54.337 25.095 L 54.631 23.562 L 56.002 23.451 L 56.002 25.116 L 57.51 25.116 L 57.51 26.421 L 56.026 26.421 Z\" />\n                        <path fill={ main } d=\"M 60.885 32.002 C 60.073 32.002 59.331 31.842 58.748 31.529 L 58.929 30.088 C 59.49 30.405 60.275 30.561 60.862 30.561 C 61.561 30.561 61.851 30.29 61.851 29.887 C 61.851 28.807 58.702 29.436 58.702 27.051 C 58.702 25.838 59.534 24.959 61.269 24.959 C 61.943 24.959 62.615 25.095 63.203 25.32 L 63.069 26.736 C 62.505 26.512 61.764 26.396 61.246 26.396 C 60.681 26.396 60.367 26.625 60.367 26.961 C 60.367 27.995 63.47 27.366 63.47 29.707 C 63.47 31.101 62.729 32.002 60.885 32.002 Z\" />\n                        <path fill={ main } d=\"M 69.365 26.736 C 69.028 26.625 68.603 26.534 68.22 26.534 C 66.958 26.534 66.53 27.051 66.53 28.49 C 66.53 29.954 67.116 30.514 68.174 30.514 C 68.623 30.514 69.05 30.425 69.41 30.271 L 69.525 31.616 C 69.119 31.867 68.511 32.002 67.792 32.002 C 65.787 32.002 64.732 30.854 64.732 28.49 C 64.732 26.242 65.653 24.981 67.835 24.981 C 68.397 24.981 69.05 25.095 69.479 25.276 L 69.365 26.736 Z\" />\n                        <path fill={ main } d=\"M 75.078 31.867 L 75.078 27.546 C 75.078 26.849 74.743 26.491 74.001 26.491 C 73.508 26.491 73.055 26.714 72.855 27.008 L 72.855 31.867 L 71.122 31.867 L 71.122 23.16 L 72.855 23.069 L 72.855 24.622 L 72.83 25.52 L 72.855 25.545 C 73.348 25.116 73.979 24.959 74.541 24.959 C 75.98 24.959 76.812 25.926 76.812 27.546 L 76.812 31.867 L 75.078 31.867 Z\" />\n                        <path fill={ main } d=\"M 78.658 31.867 L 78.658 25.139 L 80.052 25.072 L 80.21 26.199 L 80.231 26.199 C 80.66 25.387 81.313 24.981 82.098 24.981 C 82.39 24.981 82.663 25.028 82.84 25.072 L 82.731 26.782 C 82.528 26.714 82.257 26.667 81.985 26.667 C 81.088 26.667 80.413 27.321 80.413 28.468 L 80.413 31.867 L 78.658 31.867 Z\" />\n                        <path fill={ main } d=\"M 85.382 24.35 C 84.708 24.35 84.395 24.172 84.395 23.609 C 84.395 23.136 84.708 22.867 85.382 22.867 C 86.058 22.867 86.375 23.113 86.375 23.609 C 86.354 24.105 86.058 24.35 85.382 24.35 Z M 84.484 31.867 L 84.484 25.139 L 86.259 25.072 L 86.259 31.888 L 84.484 31.888 Z\" />\n                        <path fill={ main } d=\"M 88.757 31.867 L 88.757 26.375 L 87.902 26.375 L 87.902 25.095 L 88.757 25.095 L 88.757 24.798 C 88.757 23.79 89.454 22.935 91.076 22.935 C 91.459 22.935 91.885 22.979 92.178 23.069 L 92.063 24.195 C 91.863 24.147 91.636 24.126 91.411 24.126 C 90.738 24.126 90.466 24.399 90.466 24.825 L 90.466 25.072 L 91.907 25.072 L 91.907 26.352 L 90.466 26.352 L 90.466 31.842 L 88.757 31.842 Z\" />\n                        <path fill={ main } d=\"M 95.486 26.375 L 95.486 29.842 C 95.486 30.36 95.754 30.582 96.296 30.582 C 96.473 30.582 96.698 30.561 96.834 30.514 L 96.924 31.776 C 96.698 31.888 96.249 31.956 95.754 31.956 C 94.406 31.956 93.729 31.169 93.729 29.887 L 93.729 26.352 L 92.965 26.352 L 92.965 25.095 L 93.798 25.095 L 94.09 23.562 L 95.461 23.451 L 95.461 25.116 L 96.969 25.116 L 96.969 26.421 L 95.486 26.421 Z\" />\n                        <path fill={ card } d=\"M 20.357 8.826 L 15.368 5.081 L 10.379 1.334 C 10.033 1.074 9.54 1.146 9.281 1.493 L 4.883 7.322 C 4.811 7.409 4.768 7.51 4.754 7.624 C 4.68 7.93 4.782 8.248 5.043 8.45 L 8.022 10.677 L 12.042 13.698 L 15.021 15.926 C 15.281 16.13 15.629 16.13 15.888 15.97 C 15.991 15.912 16.062 15.854 16.136 15.752 L 20.531 9.91 C 20.763 9.578 20.706 9.087 20.357 8.826 Z M 10.047 1.769 L 13.012 3.995 L 13.012 3.995 L 15.021 5.5 L 17.046 7.017 L 17.046 7.017 L 20.025 9.245 C 20.142 9.332 20.156 9.491 20.082 9.607 L 19.374 10.591 L 16.005 8.058 L 12.36 5.326 L 8.976 2.809 L 9.684 1.826 C 9.772 1.709 9.931 1.682 10.047 1.769 Z M 15.673 15.463 C 15.629 15.507 15.585 15.536 15.528 15.55 C 15.469 15.564 15.398 15.55 15.339 15.507 L 12.345 13.265 L 8.34 10.257 L 5.361 8.001 C 5.302 7.958 5.275 7.9 5.259 7.842 C 5.259 7.785 5.259 7.726 5.302 7.669 L 6.113 6.585 C 6.113 6.585 7.009 5.427 7.791 4.386 L 11.16 6.917 L 14.804 9.65 L 18.173 12.181 C 17.393 13.222 16.496 14.379 16.496 14.379 L 15.673 15.463 Z\" />\n                        <g transform=\"matrix(0.144619, 0, 0, 0.144619, -7.250457, -3.988513)\">\n                            <path fill={ main } d=\"M197.1,150.4l52-69.6l5.3-7c0,0,0.1-0.2,0.2-0.2c0.4-0.5,0.3-1.2-0.2-1.6l-14.7-10.7&#10;&#9;&#9;&#9;c-0.5-0.4-1.2-0.2-1.6,0.3c-0.1,0.1-0.2,0.2-0.2,0.2l-2,2.5l-64.3,86l-70.8,0l-26.5,87.4h177.1l-25-87.4L197.1,150.4z M79.1,234.3&#10;&#9;&#9;&#9;l24.2-80.5l65.7,0l-5.7,7.6l-8.1,11.3l-0.9,1.7l-0.9,1.9l-0.9,2.2l-0.9,2.3l-0.9,2.5l-0.9,2.5l-0.8,2.5l-0.8,2.4l-0.7,2.3&#10;&#9;&#9;&#9;l-0.7,2.1l-0.6,1.9l-0.4,1.6l-0.3,1.2l-0.3,0.7c0,0-0.1,0.2-0.2,0.4c-0.2,0.2-1.2,1.1-2,0.5c-0.8-0.6-0.7-2.6-0.6-3.6&#10;&#9;&#9;&#9;c0.2-3,0.5-6,0.7-8.9c0.1-1-1.2-1.6-2-1.2c-3.6,2.1-5.8,4.6-7.8,7.5c0.2-0.7,0.4-1.4,0.6-2c0.8-3.1,2-6.2,2.5-9.4&#10;&#9;&#9;&#9;c0.3-1.8-0.2-3.9-2.3-4.3c-2.4-0.4-3.9,2.1-5.1,3.7c-3.5,5-5.6,11.2-9.9,15.5c-1.6,1.6-3.5,2.8-5.8,2.1c-2.7-0.8-3.8,2.4,1,2.9&#10;&#9;&#9;&#9;c4.7,0.4,8.3-4.6,10.4-8.1c1.6-2.5,2.9-5.2,4.5-7.8c0.7-1.2,1.5-2.4,2.3-3.6c0.4-0.5,1-1.8,1.7-2c0.8-0.2,0.6,0.3,0.6,0.9&#10;&#9;&#9;&#9;c-0.1,1.5-0.7,3-1.1,4.5c-0.4,1.6-0.9,3.2-1.3,4.7c-0.9,3.4-1.8,6.8-2.8,10.1c-0.4,1.5,1.6,2.2,2.5,1c3.4-4.8,5.1-8.9,9.2-12.1&#10;&#9;&#9;&#9;c-0.1,1.1-0.2,2.1-0.3,3.2c-0.1,1.7-0.5,3.6-0.4,5.3c0.2,2.9,2.4,4.8,5.1,3.6c1.4-0.7,2.4-1.7,2.4-1.7l0.2-0.1l0.6-0.4l1-0.7&#10;&#9;&#9;&#9;l1.4-1l1.6-1.2l1.7-1.2l2.1-1.4l2.1-1.5l2.1-1.5l2.1-1.5l2-1.5l1.9-1.4l1.8-1.4l1.5-1.2l1.2-1.1l1-0.9l0-0.1l0,0l6.5-7.6&#10;&#9;&#9;&#9;l16.6-22.1l29.4,0l22.9,80.5H79.1z\" />\n                            <path fill={ main } d=\"M261.1,77.1l-1.9-1.5c-0.4-0.3-0.9-0.2-1.2,0.2l-24.7,32.9c-0.3,0.4-0.2,0.9,0.2,1.2l1.9,1.5&#10;&#9;&#9;&#9;c0.4,0.3,0.9,0.2,1.2-0.2l24.7-32.9C261.5,77.9,261.5,77.4,261.1,77.1z\" />\n                            <polygon fill={ main } points=\"161.7,217.2 210.9,217.2 209.9,213.3 161.7,213.3 113.6,213.3 112.5,217.2 &#9;&#9;\" />\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#FFFFFF',\n        secondary: '#EB6F93'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#2C2E2F',\n        secondary: '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#EB6F93',\n        secondary: '#FFFFFF'\n    }\n};\n\nexport function SofortLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary } = getLogoColors(LOGO.SOFORT, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.SOFORT }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"138px\" height=\"32px\" viewBox=\"0 0 138 44\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                            <g transform=\"translate(-24.000000, -436.000000)\">\n                                <g transform=\"translate(24.000000, 436.000000)\">\n                                    <g stroke-width=\"1\">\n                                        <g mask=\"url(#mask-2)\" fill-rule=\"evenodd\" fill={ secondary }>\n                                            <rect x=\"0\" y=\"0\" width=\"138\" height=\"44\" />\n                                        </g>\n                                        <g transform=\"translate(16.000000, 5.000000)\" fill-rule=\"nonzero\" fill={ primary }>\n                                            <path d=\"M8.55107133,24.0386247 C9.22879411,24.6861671 9.24327745,25.7425763 8.58354713,26.4073957 L8.45110904,26.5423627 C7.79086355,27.1983175 6.69897696,27.2144066 6.01224032,26.5722566 L2.17289107,22.8768054 C1.11590922,21.8458618 0.96410333,20.5754632 1.63678914,19.9042365 L1.77159366,19.7668966 C2.32598975,19.2126062 3.22970309,19.1541252 3.86016464,19.6360673 C4.15990129,19.8651943 4.59424066,19.8150784 4.83028878,19.5241303 C5.0663369,19.2331822 5.01470714,18.8115781 4.7149705,18.5824512 C3.5284497,17.675442 1.82767241,17.7855026 0.775688111,18.8373698 L0.64137931,18.9742146 C-0.604692328,20.2175294 -0.354282964,22.3130983 1.19683948,23.8259789 L5.04656839,27.5313427 C6.28726435,28.6915831 8.24857838,28.6626828 9.44549924,27.4733999 L9.58132339,27.3350447 C10.7636633,26.1435999 10.7376475,24.2460125 9.52028002,23.0828568 C9.24837962,22.8230647 8.81099605,22.8264175 8.54335646,23.0903455 C8.27571687,23.3542735 8.27917094,23.7788325 8.55107133,24.0386247 Z\" />\n                                            <path d=\"M6.25316137,4.00463901 L7.82450265,16.5582851 C7.87051944,16.9259191 8.21485204,17.1877352 8.59359104,17.1430676 C8.97233003,17.0984001 9.24205468,16.7641637 9.19603789,16.3965297 L7.61982167,3.8039371 L7.60423898,3.7221812 C7.33535457,2.67817937 8.00377183,1.50751858 8.89431251,1.32322405 C9.39350944,1.21977105 9.9143927,1.3151232 10.3403167,1.58785163 C10.7662406,1.86058007 11.0615522,2.28785533 11.1600097,2.7738347 L13.8959914,14.1304918 C13.9828807,14.4910975 14.3544774,14.7150537 14.7259757,14.6307121 C15.097474,14.5463704 15.3281952,14.1856693 15.2413059,13.8250637 L12.5104951,2.49173037 C12.3457557,1.67638792 11.8361294,0.939028727 11.1011021,0.468374716 C10.3660749,-0.00227929421 9.46717414,-0.16683078 8.60603358,0.0116310396 C6.93120471,0.358231477 5.83076908,2.26447015 6.25316137,4.00463901 Z\" />\n                                            <path d=\"M20.6946385,18.7562157 L23.8016655,3.70806757 C24.1627527,2.08823591 23.171098,0.461930237 21.5243733,-0.0131380565 C19.6806639,-0.465927398 17.8331452,0.588982967 17.3518411,2.34622562 L13.9119445,13.7963592 C13.8051409,14.1518899 14.01548,14.5241472 14.3817501,14.6278193 C14.7480201,14.7314913 15.1315221,14.5273196 15.2383257,14.1717889 L18.6826501,2.70623335 C18.9740354,1.64312835 20.0755418,1.01418179 21.1583367,1.27975309 C22.0849843,1.54768368 22.6596154,2.49007404 22.4491321,3.43451398 L19.3399561,18.4926732 C19.2649826,18.8557898 19.5074605,19.20915 19.8815457,19.2819253 C20.2556309,19.3547006 20.6196649,19.1193324 20.6946385,18.7562157 Z\" />\n                                            <path d=\"M12.8691892,33.2538889 C7.94394615,33.2538889 3.83027027,29.7443025 3.83027027,24.757037 C3.83027027,24.3866994 3.52098374,24.0864815 3.13945946,24.0864815 C2.75793518,24.0864815 2.44864865,24.3866994 2.44864865,24.757037 C2.44864865,30.5262551 7.21772847,34.595 12.8691892,34.595 C13.2507135,34.595 13.56,34.2947821 13.56,33.9244444 C13.56,33.5541068 13.2507135,33.2538889 12.8691892,33.2538889 Z\" />\n                                            <path d=\"M10.432735,21.523985 C10.32527,21.8997898 10.0848456,22.2268322 9.75367873,22.4476857 L9.6059963,22.5431752 C8.81135162,23.0620226 7.73737824,22.860771 7.20041193,22.0943828 L4.18000129,17.7280455 C3.35596459,16.5133712 3.46371228,15.2353866 4.25688098,14.7069262 L4.40481451,14.6112693 C5.42222949,14.0388226 6.28666557,14.4731364 7.17531296,15.7298428 L9.70102318,19.3822431 C9.91366027,19.6897297 10.3428334,19.7716746 10.6596081,19.5652723 C10.9763829,19.3588699 11.0608031,18.9422806 10.848166,18.634794 L8.31843628,14.9766458 C7.06906995,13.2097547 5.52101546,12.4319743 3.67452351,13.4735669 L3.48275305,13.5961381 C1.99799965,14.5853027 1.82065576,16.6887608 3.02954142,18.4706511 L6.05567438,22.8452879 C7.02249844,24.2252138 8.95163568,24.5867144 10.3747579,23.6575027 L10.5280578,23.5583063 C11.1349164,23.1536749 11.5696876,22.5622681 11.7640218,21.8826817 C11.8660652,21.5258361 11.650769,21.1562586 11.2831443,21.0572072 C10.9155196,20.9581559 10.5347784,21.1671394 10.432735,21.523985 Z\" />\n                                            <path d=\"M15.0071132,23.7451482 C13.5716937,24.5235597 12.6792061,25.9892512 12.5683793,28.2063913 C12.5498892,28.5762937 12.8438232,28.8907086 13.2248991,28.9086565 C13.6059751,28.9266044 13.9298874,28.6412889 13.9483774,28.2713865 C14.048744,26.2635083 14.8525076,25.179561 16.152515,24.704555 C16.8482268,24.4503509 17.6046979,24.3996276 18.2711038,24.4684707 C18.3606758,24.477724 18.4201821,24.4863334 18.4442402,24.4906858 C19.3337661,24.6516105 19.6045203,23.3685934 18.7214531,23.1770635 L13.4090206,22.0248413 C10.9225036,21.3638621 10.5472361,20.4704561 11.0076227,18.9808309 C11.2064187,18.3317669 11.6147718,17.9986147 12.2306776,17.865687 C12.6373189,17.7779238 13.0941226,17.7888366 13.5282841,17.8626882 C13.6538003,17.8840387 13.7420731,17.9043308 13.7811352,17.9152244 L21.8451208,19.7433694 C21.8985237,19.7533496 21.9361525,19.763479 22.0020154,19.7924494 C22.1354002,19.8511201 22.2742678,19.9453829 22.4097247,20.0858789 C22.9502905,20.6465543 23.2485509,21.7041959 23.09758,23.4414127 C22.571614,29.5314735 19.6483005,33.3130406 12.7195863,33.2539148 C12.3380768,33.2506592 12.0260833,33.5482264 12.0227294,33.9185497 C12.0193755,34.288873 12.3259312,34.5917185 12.7074407,34.5949741 C20.4944029,34.6614237 23.8949457,30.262518 24.474342,23.5537955 C24.6558214,21.4655214 24.2521788,20.0341915 23.4184922,19.1694909 C22.9588119,18.69271 22.4737204,18.4793376 22.1015974,18.4267977 L14.1289333,16.6177417 C14.0788208,16.6028791 13.9434651,16.5717637 13.7667652,16.5417067 C13.169132,16.4400483 12.5401983,16.4250234 11.9308051,16.5565455 C10.8493625,16.7899475 10.0333579,17.4556796 9.68377867,18.5970598 C9.0191343,20.7475737 9.72889785,22.4373206 13.0761134,23.3260543 L15.0071132,23.7451482 Z\" />\n                                        </g>\n                                    </g>\n                                    <path d=\"M60.72,30.286 C63.712,30.286 66,28.284 66,25.336 C66,22.608 64.064,21.42 61.688,20.716 C60.17,20.276 59.224,19.946 59.224,18.868 C59.224,17.966 59.884,17.262 60.918,17.262 C61.798,17.262 62.458,17.768 62.92,18.538 L65.406,16.976 C64.636,15.26 62.898,14.38 61.006,14.38 C58.014,14.38 56.122,16.536 56.122,19.022 C56.122,21.002 57.31,22.542 60.258,23.4 C61.864,23.862 62.876,24.17 62.876,25.446 C62.876,26.634 62.018,27.382 60.764,27.382 C59.422,27.382 58.41,26.524 57.794,25.732 L55.726,27.822 C56.826,29.318 58.63,30.286 60.72,30.286 Z M73.546,30.286 C70.378,30.286 67.804,27.756 67.804,24.676 C67.804,21.596 70.378,19.066 73.546,19.066 C76.714,19.066 79.288,21.596 79.288,24.676 C79.288,27.756 76.714,30.286 73.546,30.286 Z M73.546,27.47 C75.086,27.47 76.296,26.26 76.296,24.676 C76.296,23.092 75.086,21.882 73.546,21.882 C72.006,21.882 70.796,23.092 70.796,24.676 C70.796,26.26 72.006,27.47 73.546,27.47 Z M87.428,17.416 L87.428,14.6 L86.988,14.6 C83.336,14.6 81.554,17.02 81.554,19.88 L81.554,30 L84.546,30 L84.546,25.556 C84.546,24.082 85.69,23.026 87.34,22.982 L87.34,20.122 C86.152,20.122 85.206,20.474 84.546,21.178 L84.546,20.034 C84.546,18.186 85.756,17.35 87.428,17.416 Z M95.018,30.286 C91.85,30.286 89.276,27.756 89.276,24.676 C89.276,21.596 91.85,19.066 95.018,19.066 C98.186,19.066 100.76,21.596 100.76,24.676 C100.76,27.756 98.186,30.286 95.018,30.286 Z M95.018,27.47 C96.558,27.47 97.768,26.26 97.768,24.676 C97.768,23.092 96.558,21.882 95.018,21.882 C93.478,21.882 92.268,23.092 92.268,24.676 C92.268,26.26 93.478,27.47 95.018,27.47 Z M106.018,20.562 L106.018,19.352 L103.114,19.352 L103.114,30 L106.106,30 L106.106,25.138 C106.106,23.378 107.14,22.388 108.944,22.388 L108.944,19.176 C107.58,19.132 106.612,19.594 106.018,20.562 Z M114.378,24.566 L114.378,21.97 C115.038,22.674 115.984,23.026 117.172,23.026 L117.172,20.166 C115.544,20.122 114.378,19.044 114.378,17.592 L114.378,15.92 L111.386,15.92 L111.386,24.72 C111.386,27.58 113.168,30 116.82,30 L117.26,30 L117.26,27.184 C115.588,27.25 114.378,26.414 114.378,24.566 Z M121.572,30.176 C122.672,30.176 123.574,29.274 123.574,28.174 C123.574,27.074 122.672,26.172 121.572,26.172 C120.472,26.172 119.57,27.074 119.57,28.174 C119.57,29.274 120.472,30.176 121.572,30.176 Z\" fill={ primary } />\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","\n/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#3D93CE'\n    },\n    [ LOGO_COLOR.BLUE ]: {\n        primary:   '#3D93CE'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#333030'\n    }\n};\n\nexport function VenmoLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary } = getLogoColors(LOGO.SOFORT, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.VENMO }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"101\" height=\"32\" viewBox=\"0 0 101 32\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\">\n                        <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                            <g id=\"Blue\" fill={ primary }>\n                                <g id=\"Logo\" transform=\"translate(0.000000, 6.000000)\">\n                                    <path d=\"M16.6660484,0.18 C17.3466626,1.3390991 17.6535069,2.53297297 17.6535069,4.04108108 C17.6535069,8.85117117 13.671346,15.0998198 10.439346,19.4875676 L3.05725952,19.4875676 L0.0966314879,1.23315315 L6.56045675,0.60036036 L8.12578201,13.5895495 C9.58835986,11.1326126 11.3932543,7.27153153 11.3932543,4.6390991 C11.3932543,3.1981982 11.1538599,2.21675676 10.7797405,1.40864865 L16.6660484,0.18 Z M24.9071592,11.6938739 C24.9071592,13.8367568 26.062718,14.6774775 27.5946678,14.6774775 C29.2629152,14.6774775 30.860218,14.2571171 32.9363097,13.1691892 L32.154346,18.6445045 C30.6915934,19.3814414 28.4119291,19.8731532 26.1991903,19.8731532 C20.5863512,19.8731532 18.5775346,16.3632432 18.5775346,11.9753153 C18.5775346,6.28810811 21.8451817,0.249369369 28.5819516,0.249369369 C32.2909931,0.249369369 34.3649879,2.39207207 34.3649879,5.37567568 C34.3653374,10.1855856 28.3783789,11.6590991 24.9071592,11.6938739 Z M25.0434567,8.2181982 C26.2329152,8.2181982 29.2274429,7.65711712 29.2274429,5.90216216 C29.2274429,5.05945946 28.6495761,4.6390991 27.9686125,4.6390991 C26.7772318,4.6390991 25.2138287,6.11225225 25.0434567,8.2181982 Z M53.0187093,4.4636036 C53.0187093,5.16558559 52.9154377,6.18378378 52.8126903,6.84918919 L50.8730709,19.4873874 L44.5790934,19.4873874 L46.3483408,7.90216216 C46.381891,7.58792793 46.4849879,6.95531532 46.4849879,6.60432432 C46.4849879,5.76162162 45.9743962,5.55135135 45.3605329,5.55135135 C44.5451938,5.55135135 43.7279325,5.93711712 43.1836159,6.21873874 L41.1768962,19.4875676 L34.8474464,19.4875676 L37.7390519,0.565945946 L43.2171661,0.565945946 L43.2865381,2.07621622 C44.5789187,1.19873874 46.2807163,0.24972973 48.6952803,0.24972973 C51.8942543,0.249369369 53.0187093,1.93495495 53.0187093,4.4636036 Z M71.7037093,2.32072072 C73.5063322,0.988108108 75.2084792,0.249369369 77.5554187,0.249369369 C80.7872439,0.249369369 81.9113495,1.93495495 81.9113495,4.4636036 C81.9113495,5.16558559 81.8084273,6.18378378 81.7056799,6.84918919 L79.7683322,19.4873874 L73.4726073,19.4873874 L75.2755796,7.6572973 C75.3087803,7.34108108 75.3785017,6.95531532 75.3785017,6.71063063 C75.3785017,5.7618018 74.8677353,5.55135135 74.2540467,5.55135135 C73.4722578,5.55135135 72.6908183,5.90234234 72.1106799,6.21873874 L70.1043097,19.4875676 L63.8101574,19.4875676 L65.6131298,7.65747748 C65.6463304,7.34126126 65.713955,6.9554955 65.713955,6.71081081 C65.713955,5.76198198 65.2030138,5.55153153 64.5914221,5.55153153 C63.7743356,5.55153153 62.9588218,5.9372973 62.4145052,6.21891892 L60.4062128,19.4877477 L54.0788599,19.4877477 L56.9701159,0.566126126 L62.3813045,0.566126126 L62.551327,2.14576577 C63.8101574,1.1990991 65.5105571,0.25009009 67.7900467,0.25009009 C69.7637405,0.249369369 71.0559464,1.12702703 71.7037093,2.32072072 Z M83.55059,11.7998198 C83.55059,5.83279279 86.6120433,0.249369369 93.6558322,0.249369369 C98.9633997,0.249369369 100.903543,3.47981982 100.903543,7.93873874 C100.903543,13.8365766 97.8751159,19.9443243 90.6614792,19.9443243 C85.3196626,19.9443243 83.55059,16.3281081 83.55059,11.7998198 Z M94.4374464,7.83279279 C94.4374464,6.28810811 94.0628028,5.23495495 92.9409689,5.23495495 C90.4570329,5.23495495 89.9469654,9.76306306 89.9469654,12.0794595 C89.9469654,13.8367568 90.4238322,14.9243243 91.5453166,14.9243243 C93.8931298,14.9243243 94.4374464,10.149009 94.4374464,7.83279279 Z\" />\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","\n/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#ffffff'\n    },\n    [ LOGO_COLOR.BLUE ]: {\n        primary:   '#003087'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#ffffff'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#333030'\n    }\n};\n\nexport function ItauLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary } = getLogoColors(LOGO.SOFORT, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.ITAU }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg\n                        version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n                        viewBox=\"0 0 181 33\" preserveAspectRatio=\"xMinYMin meet\">\n                        <path\n                            fill=\"#FF7900\" d=\"M136.5,5.6L153,1.8c2.2-0.5,4.4,0.8,5,2.9l4,15.2c0.5,2.1-0.8,4.2-3,4.7l-16.5,3.8c-2.2,0.5-4.4-0.8-5-2.9\n                            l-4-15.2C132.8,8.3,134.2,6.1,136.5,5.6z\" />\n                        <path\n                            fill=\"#004995\" d=\"M144.5,6.1h10.1c1.5,0,2.7,1.2,2.7,2.5v9.7c0,1.3-1.2,2.5-2.7,2.5h-10.1c-1.5,0-2.7-1.2-2.7-2.5V8.6\n                            C141.9,7.2,143.1,6.1,144.5,6.1z\" />\n                        <path\n                            fill={ primary } d=\"M108.2,19.9c-0.1-1-0.5-1.9-1.1-2.8c-1.1-1.3-2.8-2-4.6-1.9c-1.6,0.1-3.9,0.3-5.3,1.3L98,19\n                            c0,0,1.3-1.1,3.9-1.1c1.1,0,2.1,0.6,2.3,1.3v0.2c-1.4,0-5.7,0.3-7.4,2.8c-2,3,1.1,5.8,3.1,5.8c1.6,0,3.2,0.1,4.6-1.3l0.2,1.1h3.4\n                            v-7.3c0-0.1,0-0.2,0-0.2L108.2,19.9L108.2,19.9z M100.4,24.1c0.2-1.8,2.7-1.9,3.9-1.9v2.1C103,26,100.2,25.8,100.4,24.1z\" />\n                        <path\n                            fill={ primary } d=\"M95.2,16.1c0,0-7.6-2-10,3c-1.3,2.8-0.7,5.7,0.8,7.3c0.7,0.7,1.6,1.2,2.6,1.5c2,0.6,5.4,0.4,6.5-0.2l-0.4-2.8\n                            c0,0-3.4,1.1-5.2-0.6c-2.2-2.2-0.2-5.7,2.1-5.7c2.3,0,3.1,0.4,3.1,0.4L95.2,16.1z\" />\n                        <rect\n                            fill={ primary } x=\"42.3\" y=\"11.7\"  width=\"3.9\" height=\"16.3\" />\n                        <path\n                            fill={ primary } d=\"M55.7,18.7v-3h-2.1v-4.1h-3.9v4.1h-2v3h2v6.2c0,1.7,1.3,3,3,3l0,0h3.1v-3h-1.1c-0.7,0-1.1-0.5-1.1-1.1l0,0v-5.2\n                            L55.7,18.7L55.7,18.7z\" />\n                        <path\n                            fill={ primary } d=\"M69,19.9c-0.1-1-0.5-1.9-1.1-2.8c-1.2-1.3-2.8-2-4.6-1.9c-1.6,0.1-3.9,0.3-5.3,1.3l0.8,2.5c0,0,1.3-1.1,3.9-1.1\n                            c1.1,0,2.1,0.6,2.3,1.3v0.2c-1.4,0-5.8,0.3-7.4,2.8c-2,3,1.1,5.8,3.1,5.8c1.6,0,3.2,0.1,4.6-1.3l0.2,1.1H69V19.9L69,19.9z\n                            M61.1,24.1c0.2-1.8,2.7-1.9,3.9-1.9v2.1C63.8,26,60.9,25.8,61.1,24.1L61.1,24.1z\" />\n                        <path\n                            fill={ primary } d=\"M79.1,15.7v7.2c0,0.3-0.1,0.5-0.2,0.7c-0.5,0.7-1.1,1.3-2,1.3c-0.9,0.1-1.8-0.5-2.1-1.3\n                            c-0.1-0.2-0.1-0.4-0.1-0.6v-7.3h-3.9V24c0,2.1,1.8,4.1,3.9,4.1c3.9,0.2,4.6-1.8,4.6-1.8v-0.1l0.4,1.5H83V15.6L79.1,15.7z\" />\n                        <rect fill=\"#FFF100\" x=\"143.1\" y=\"13.5\" width=\"1.2\" height=\"5\" />\n                        <path\n                            fill=\"#FFF100\" d=\"M147.3,15.7v-0.9h-0.7v-1.3h-1.2v1.3h-0.6v0.9h0.6v1.9c0,0.5,0.4,0.9,1,0.9h1v-0.9H147c-0.2,0-0.4-0.2-0.4-0.3\n                            l0,0v-1.6C146.6,15.7,147.3,15.7,147.3,15.7z\" />\n                        <path\n                            fill=\"#FFF100\" d=\"M151.6,16c0-0.3-0.2-0.6-0.4-0.8c-0.4-0.4-0.9-0.6-1.5-0.6s-1.1,0.2-1.7,0.4l0.3,0.8c0.4-0.3,0.8-0.3,1.2-0.3\n                            c0.3,0,0.6,0.2,0.7,0.3v0.1c-0.4,0-1.9,0.1-2.3,0.8c-0.4,0.6-0.2,1.3,0.4,1.6c0.2,0.1,0.4,0.2,0.5,0.2c0.5,0.1,1.1-0.1,1.5-0.3\n                            l0.1,0.3h1.1L151.6,16L151.6,16z M149.1,17.3c0.1-0.6,0.9-0.6,1.2-0.6v0.7C149.9,17.9,149,17.8,149.1,17.3L149.1,17.3z\" />\n                        <path\n                            fill=\"#FFF100\" d=\"M154.8,14.8V17c-0.1,0.3-0.4,0.4-0.7,0.5c-0.4,0-0.6-0.2-0.7-0.5v-2.3h-1.2v2.5c0,0.7,0.5,1.2,1.2,1.3\n                            c1.2,0.1,1.5-0.5,1.5-0.5l0,0l0.2,0.4h1.1v-3.8L154.8,14.8L154.8,14.8z\" />\n                        <path fill={ primary } d=\"M113.5,17.9l-0.2-2.1H110V28h3.9v-6.8c0.4-0.8,1.2-2.1,3.4-2.1v-3.6C115.9,15.4,114.4,16.3,113.5,17.9z\" />\n                        <path\n                            fill={ primary } d=\"M128.1,10.4v6.4c-0.7-0.6-1.7-1.4-3.7-1.4c-3.6,0-6.1,3.2-6.1,6.8c-0.1,3.2,2.6,5.9,5.9,6\n                            c1.5-0.1,3-0.6,4.2-1.4L129,28h3.1V10.5L128.1,10.4L128.1,10.4z M125.4,25.1c-2.3,0-2.8-1.9-2.8-3.4s0.7-3.2,2.8-3.2\n                            c1.3,0,2.1,0.9,2.7,1.8v3C127.5,24.1,126.6,25.1,125.4,25.1z\" />\n                        <polygon fill=\"#FFF100\" points=\"154.6,14.4 153.5,14.4 154.4,13.5 155.7,13.5 \" />\n                        <line fill=\"none\" x1=\"35.6\" y1=\"8.3\" x2=\"35.6\" y2=\"28.2\" />\n                        <rect fill=\"#D8D8D8\" x=\"22.4\" y=\"32.2\" width=\"0.1\" height=\"0.1\" />\n                        <path\n                            fill={ primary } opacity=\"0.7\" enable-background=\"new    \" d=\"M25.3,12.9c0.2-1.6,0-2.6-0.9-3.7s-2.6-1.5-4.6-1.5h-6.1c-0.4,0-0.8,0.3-0.9,0.8l-2.5,16.8\n                            c-0.1,0.4,0.1,0.7,0.5,0.7h3.8l-0.3,1.7c-0.1,0.2,0.2,0.5,0.4,0.5H18c0.4,0,0.6-0.3,0.7-0.7l0.1-0.2l0.6-3.9l0.1-0.2\n                            c0.1-0.5,0.4-0.7,0.7-0.7h0.5c3.1,0,5.4-1.4,6.1-5.1c0.3-1.6,0.1-2.9-0.6-3.8C25.9,13.4,25.6,13.1,25.3,12.9L25.3,12.9\" />\n                        <path\n                            fill={ primary } opacity=\"0.7\" enable-background=\"new    \" d=\"M25.3,12.9c0.2-1.6,0-2.6-0.9-3.7s-2.6-1.5-4.6-1.5h-6.1c-0.4,0-0.8,0.3-0.9,0.8l-2.5,16.8\n                            c-0.1,0.4,0.1,0.7,0.5,0.7h3.8l0.9-6.3l-0.1,0.2c0.1-0.5,0.4-0.8,0.9-0.8h1.8c3.5,0,6.2-1.5,7-5.8C25.2,13.2,25.2,13,25.3,12.9\" />\n                        <path\n                            fill={ primary } d=\"M16.6,12.9c0-0.2,0.1-0.5,0.4-0.6c0.1,0,0.2-0.1,0.3-0.1h4.8c0.6,0,1.1,0.1,1.6,0.1c0.1,0,0.2,0,0.4,0.1\n                            c0.1,0.1,0.2,0.1,0.4,0.2c0.1,0,0.1,0,0.2,0.1c0.2,0.1,0.4,0.2,0.6,0.2c0.2-1.6,0-2.6-0.9-3.6c-0.9-1.1-2.6-1.6-4.6-1.6h-6.1\n                            c-0.4,0-0.8,0.4-0.9,0.8l-2.5,16.8c-0.1,0.4,0.1,0.7,0.5,0.7h3.8l0.9-6.3L16.6,12.9z\" />\n                        <g transform=\"matrix(0.379173, 0, 0, 0.397443, 9.686229, 4.778377)\" opacity=\"0.2\" >\n                            <path\n                                fill=\"#231F20\" d=\"M41.1,20.5c0.9,0.5,1.7,1.1,2.3,1.8c1,1.1,1.6,2.5,1.9,4.1c0.3-3.2-0.2-5.8-1.9-7.8c-0.6-0.7-1.3-1.2-2.1-1.7\n                                C41.3,18,41.3,19.2,41.1,20.5z\" />\n                            <path\n                                fill=\"#231F20\"  d=\"M2.2,49L8.5,9.4c0.1-1.1,1.1-1.9,2.2-1.9h16c5.5,0,9.8,1.2,12.2,3.9c1.2,1.4,1.9,3,2.2,4.8\n                                c0.4-3.6-0.2-6.1-2.2-8.4c-2.4-2.8-6.7-4-12.2-4h-16c-1.1,0-2.1,0.8-2.3,1.9L1.8,47.9C1.8,48.3,1.9,48.7,2.2,49z\" />\n                            <path fill=\"#231F20\"  d=\"M12.5,53.2l-0.1,0.6c-0.1,0.4,0.1,0.8,0.4,1.1l0.3-1.7C13.1,53.2,12.5,53.2,12.5,53.2z\" />\n                        </g>\n                        <rect fill={ primary } x=\"35.5\" y=\"6.7\" width=\"1.1\" height=\"21.5\" />\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:   '#1AAD19',\n        secondary: '#4D4D4D'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:   '#FFFFFF',\n        secondary: '#FFFFFF'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#333030',\n        secondary: '#333030'\n    }\n};\n\nexport function WechatpayLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary } = getLogoColors(LOGO.WECHATPAY, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.WECHATPAY }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"81px\" height=\"15px\" viewBox=\"0 0 81 15\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" >\n                        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                            <g transform=\"translate(-100.000000, -159.000000)\">\n                                <g transform=\"translate(100.000000, 159.000000)\">\n                                    <path d=\"M6.14570881,9.41936066 C6.06938663,9.45772131 5.98346261,9.48009836 5.89212219,9.48009836 C5.68112827,9.48009836 5.49746261,9.36378689 5.40095198,9.19214754 L5.36402188,9.1114918 L3.82600669,5.74042623 C3.80926505,5.70354098 3.79892462,5.66222951 3.79892462,5.62190164 C3.79892462,5.4664918 3.92497933,5.34059016 4.08057812,5.34059016 C4.14385167,5.34059016 4.20220122,5.3612459 4.24922553,5.39640984 L6.06421641,6.68714754 C6.19691854,6.77370492 6.35522553,6.82460656 6.52559635,6.82460656 C6.6272772,6.82460656 6.72428024,6.80567213 6.81438967,6.77272131 L15.3506571,2.97821311 C13.8205204,1.17698361 11.3006571,9.83606557e-05 8.4489155,9.83606557e-05 C3.78267538,9.83606557e-05 4.92401216e-05,3.14837705 4.92401216e-05,7.03239344 C4.92401216e-05,9.15157377 1.13823465,11.0587869 2.91924985,12.3480492 C3.0622924,12.4498525 3.15584863,12.6173115 3.15584863,12.8061639 C3.15584863,12.868623 3.1425538,12.925918 3.12605836,12.9854262 C2.98400061,13.5155902 2.75601884,14.3644426 2.74543222,14.4040328 C2.72770578,14.4706721 2.70013131,14.5400164 2.70013131,14.6096066 C2.70013131,14.7650164 2.82618602,14.890918 2.9817848,14.890918 C3.04284255,14.890918 3.09282128,14.8682951 3.1445234,14.838541 L4.99422857,13.7720656 C5.13333191,13.6916557 5.28055988,13.6422295 5.44280608,13.6422295 C5.52922249,13.6422295 5.6124383,13.6552623 5.69122249,13.6793607 C6.55415562,13.9272295 7.48504012,14.0651803 8.4489155,14.0651803 C13.1151556,14.0651803 16.898028,10.9164098 16.898028,7.03239344 C16.898028,5.856 16.5491617,4.74821311 15.9356298,3.77370492 L6.20750517,9.38370492 L6.14570881,9.41936066 Z\" fill={ primary } />\n                                    <path d=\"M29.5311474,7.78413934 C29.4695973,8.00446721 29.4090319,8.21864754 29.3499438,8.42741803 C29.1195,9.24086066 28.9178617,9.9529918 28.7610319,10.6688115 C28.6071565,9.81012295 28.3429833,8.80143443 28.0625608,7.75807377 L26.7178131,2.69422131 L26.0208191,2.69422131 L24.5423845,7.79594262 C24.2043511,8.89659836 23.9096489,9.88020492 23.7515881,10.6766803 C23.601652,9.98348361 23.388196,9.1429918 23.1634149,8.2575 L21.7290502,2.69422131 L20.9618891,2.69422131 L23.3652994,11.7837295 L24.0485061,11.7837295 L25.5941535,6.57528689 C25.9632082,5.35881148 26.2020228,4.52004098 26.3514666,3.76856557 C26.4819529,4.57340164 26.6959012,5.42446721 27.009807,6.57331967 L28.3676033,11.7837295 L29.0643511,11.7837295 L31.7917614,2.69422131 L31.0236155,2.69422131 L29.5311474,7.78413934 Z\" fill={ secondary } />\n                                    <path d=\"M34.628214,5.77482787 C35.1580377,5.77482787 35.5859343,5.93638525 35.9000863,6.25507377 C36.4119374,6.77368033 36.4798888,7.54482787 36.481366,7.90384426 L32.5428948,7.90384426 C32.6832292,6.90769672 33.3071015,5.77482787 34.628214,5.77482787 Z M36.5818158,10.9372869 C36.2093143,11.109418 35.7368553,11.2616311 34.8950954,11.2616311 C33.3940103,11.2616311 32.5266456,10.2630246 32.5089191,8.51958197 L37.220214,8.51958197 L37.2295696,8.47679508 C37.2576365,8.35089344 37.2576365,8.2542541 37.2576365,8.07843443 C37.2576365,7.83695902 37.2236608,6.99228689 36.7878857,6.2602377 C36.3425088,5.51195902 35.6428067,5.13277869 34.7082292,5.13277869 C32.9520802,5.13277869 31.7722869,6.54671311 31.7722869,8.65163115 C31.7722869,10.6048279 32.9949191,11.9172049 34.814834,11.9172049 C35.9744389,11.9172049 36.6283477,11.6233525 36.8558371,11.4972049 L36.8935058,11.4763033 L36.5818158,10.9372869 Z\" fill={ secondary } />\n                                    <path d=\"M42.8043392,11.2616066 C40.4580474,11.2616066 39.057166,9.7827541 39.057166,7.30578689 C39.057166,4.73709836 40.4979319,3.20340984 42.9111903,3.20340984 C43.5806097,3.20340984 44.2094061,3.32931148 44.6939289,3.55677049 L45.0334395,2.96955738 L45.0051264,2.95406557 C44.831555,2.85865574 44.1660748,2.54783607 42.8978954,2.54783607 C40.1362632,2.54783607 38.2808954,4.45455738 38.2808954,7.2925082 C38.2808954,10.7058689 40.6028134,11.9171803 42.5908833,11.9171803 C43.7216827,11.9171803 44.5991416,11.6801311 45.0432875,11.4583279 L45.077017,11.4413607 L44.751786,10.8787377 C44.2308255,11.1184918 43.5099502,11.2616066 42.8043392,11.2616066\" fill={ secondary } />\n                                    <path d=\"M49.1547392,5.13265574 C48.6780948,5.13265574 48.2204079,5.26445902 47.8336267,5.51281967 C47.5150432,5.69478689 47.2255112,5.98347541 47.0216571,6.31839344 L47.0216571,2.5477377 L46.2719763,2.5477377 L46.2719763,11.7838033 L47.0216571,11.7838033 L47.0216571,7.82527869 C47.0216571,7.56634426 47.033721,7.39888525 47.0984717,7.20413115 C47.3929277,6.37814754 48.1669824,5.8015082 48.981414,5.8015082 C50.4657574,5.8015082 50.6875842,7.14462295 50.6875842,7.94527869 L50.6875842,11.7838033 L51.437265,11.7838033 L51.437265,7.87863934 C51.437265,5.26519672 49.5358578,5.13265574 49.1547392,5.13265574\" fill={ secondary } />\n                                    <path d=\"M61.0768805,11.2239836 C60.9456556,11.2517705 60.7622362,11.2748852 60.5106191,11.2748852 C59.9106283,11.2748852 59.6314368,10.873082 59.6314368,10.010459 L59.6314368,5.90808197 L61.4589839,5.90808197 L61.4589839,5.27906557 L59.6314368,5.27906557 L59.6314368,3.8425082 L58.8815097,3.8425082 L58.8815097,5.27906557 L57.8011815,5.27906557 L57.8011815,5.90808197 L58.8815097,5.90808197 L58.8815097,9.89070492 C58.8815097,10.6298852 59.0169201,11.1428361 59.2936495,11.4566066 C59.5366495,11.7666885 59.9295857,11.930459 60.4303578,11.930459 C60.7880872,11.930459 61.0960842,11.8751311 61.346224,11.7659508 L61.3811845,11.750459 L61.0768805,11.2239836 Z\" fill={ secondary } />\n                                    <path d=\"M68.8747432,5.2672377 C68.8747432,6.62977869 67.9564149,7.4110082 66.3548799,7.4110082 C66.0161079,7.4110082 65.5899347,7.3972377 65.2622416,7.29297541 L65.2622416,3.36617213 C65.4183328,3.33518852 65.8238252,3.27002459 66.4747796,3.27002459 C67.9999924,3.27002459 68.8747432,3.99789344 68.8747432,5.2672377 M66.5016155,2.62772951 C65.8550927,2.62772951 65.2009377,2.6862541 64.5576155,2.80182787 L64.5125608,2.80994262 L64.5125608,11.783877 L65.2622416,11.783877 L65.2622416,7.96354918 C65.5552204,8.03756557 65.8809438,8.05305738 66.3014544,8.05305738 C67.4544119,8.05305738 68.4072082,7.69158197 68.9830714,7.0360082 C69.4146611,6.56338525 69.6241778,5.96289344 69.6241778,5.20059836 C69.6241778,4.46018852 69.3784696,3.83830328 68.9141353,3.40281148 C68.3926824,2.8957623 67.5583085,2.62772951 66.5016155,2.62772951\" fill={ secondary } />\n                                    <path d=\"M79.9828222,5.27906557 L78.4091079,9.45791803 C78.2636033,9.83537705 78.1402568,10.2032459 78.03119,10.528082 C78.0050927,10.6060328 77.979734,10.6812787 77.9553602,10.753082 C77.8268435,10.3370164 77.6687827,9.87644262 77.5235243,9.49701639 L75.8427128,5.3132459 L75.8289255,5.27906557 L75.0307432,5.27906557 L77.4356307,11.2832459 C77.4984119,11.4401311 77.5114605,11.5109508 77.5114605,11.5426721 C77.5114605,11.6011967 77.4848708,11.6789016 77.4358769,11.8013607 C77.1103997,12.5732459 76.6822568,13.0945574 76.3811535,13.3952951 C75.9648283,13.7961148 75.5120653,14.0024262 75.2791596,14.0897213 L75.2348435,14.1061967 L75.5795243,14.7025082 C75.7501413,14.6378361 76.1772994,14.4507049 76.6551748,14.0486557 C77.4873328,13.3232459 78.0198647,12.2048852 78.8308495,10.1240656 L80.7819894,5.27906557 L79.9828222,5.27906557 Z\" fill={ secondary } />\n                                    <path d=\"M56.4250185,9.67738525 C56.4250185,9.77279508 56.4139395,9.91394262 56.3610064,10.0462377 C56.1564137,10.6467295 55.5650398,11.2882869 54.518441,11.2882869 C53.9531644,11.2882869 53.2926082,10.9536148 53.2926082,10.0103361 C53.2926082,9.60804098 53.4260489,9.27459836 53.6889912,9.01935246 C54.1434775,8.57820492 54.981052,8.35517213 56.1815261,8.35517213 C56.2610489,8.35517213 56.3422951,8.35615574 56.4250185,8.35812295 L56.4250185,9.67738525 Z M57.2672708,11.720582 C57.1857784,11.2186967 57.1744532,10.698123 57.1744532,10.2102541 L57.1744532,7.7055 C57.1744532,6.02230328 56.3898119,5.13263115 54.9054684,5.13263115 C54.2370337,5.13263115 53.5225596,5.34017213 52.9947055,5.68787705 L52.9917511,5.68984426 L53.297286,6.21804098 C53.7170581,5.93279508 54.2614076,5.77492623 54.8392404,5.77492623 C54.8468726,5.77492623 54.8545049,5.77468033 54.8621371,5.77468033 C55.3363195,5.77468033 55.70759,5.90451639 55.9663468,6.1607459 C56.2748362,6.46615574 56.4250185,6.93681148 56.4250185,7.59902459 L56.4250185,7.71705738 C54.8549973,7.70427049 53.7414319,8.02492623 53.1015565,8.65787705 C52.713052,9.04172951 52.5163377,9.53254918 52.5163377,10.1170574 C52.5163377,10.9905 53.1219912,11.930582 54.4519669,11.930582 C55.4200277,11.930582 56.1258848,11.4289426 56.4902617,10.9295164 L56.5769243,11.7837787 L57.2776112,11.7837787 L57.2672708,11.720582 Z\" fill={ secondary } />\n                                    <path d=\"M73.6282614,9.67738525 C73.6282614,9.77279508 73.6174286,9.91369672 73.5644954,10.0462377 C73.3596565,10.6467295 72.7682827,11.2882869 71.7219301,11.2882869 C71.1564073,11.2882869 70.4958511,10.9536148 70.4958511,10.0103361 C70.4958511,9.60804098 70.6292918,9.27459836 70.892234,9.01935246 C71.3467204,8.57820492 72.1842948,8.35517213 73.384769,8.35517213 C73.4642918,8.35517213 73.545538,8.35615574 73.6282614,8.35812295 L73.6282614,9.67738525 Z M74.4705137,11.720582 C74.3892675,11.2184508 74.3779422,10.697877 74.3779422,10.2102541 L74.3779422,7.7055 C74.3779422,6.02230328 73.5933009,5.13263115 72.1087112,5.13263115 C71.4708055,5.13263115 70.7930152,5.32320492 70.2732857,5.64263115 L70.5775897,6.16886066 C70.9857903,5.91509016 71.4991185,5.77492623 72.0427295,5.77492623 C72.0506079,5.77492623 72.0579939,5.77468033 72.0656261,5.77468033 C72.5395623,5.77468033 72.9108328,5.90451639 73.1695897,6.1605 C73.4783252,6.46615574 73.6282614,6.93681148 73.6282614,7.59902459 L73.6282614,7.71705738 C72.0646413,7.70427049 70.9446748,8.02492623 70.3047994,8.65787705 C69.9162948,9.04172951 69.7195805,9.53254918 69.7195805,10.1170574 C69.7195805,10.9905 70.325234,11.930582 71.6552097,11.930582 C72.6232705,11.930582 73.3291277,11.4291885 73.6935046,10.9295164 L73.7801672,11.7837787 L74.4808541,11.7837787 L74.4705137,11.720582 Z\" fill={ secondary } />\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary: '#00A599'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary: '#FFFFFF'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:   '#00A599'\n    }\n};\n\nexport function ZimplerLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary } = getLogoColors(LOGO.ZIMPLER, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n            { ...props }\n            name={ LOGO.ZIMPLER }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"127\" height=\"32\" viewBox=\"0 0 127 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMinYMin meet\">\n                        <g transform=\"matrix(2.2546708,0,0,2.0580615,0.70028058,1.3242473)\" fill={ primary } >\n                            <path d=\"m 44.363387,6.5973104 c 0.2184,-1.0706901 1.091377,-1.9895312 2.0692,-1.9895312 0.550355,0 0.9492,0.4072031 0.806711,0.8621302 L 44.211564,7.544662 c 0.05693,-0.5305417 0.151823,-0.9473516 0.151823,-0.9473516 z m -14.0476,2.5296797 0.474755,-2.719026 c 0.208756,-0.6442735 0.968178,-1.5064037 1.755911,-1.5538178 0.303645,-0.018904 0.664534,-0.00961 1.006134,0.2652709 0.294311,0.3315885 0.446133,0.8243229 0.446133,1.4400859 0,1.9421172 -0.9492,3.287375 -2.2876,3.287375 -0.664222,-0.0093 -1.186267,-0.3504922 -1.395333,-0.719888 z M 55.857698,2.8454016 c -1.138978,-0.056711 -2.6292,1.3359609 -2.6292,1.3359609 l -0.474756,-1.184112 h -1.300133 l -0.626578,3.543349 c -0.04729,0.2460573 -0.1708,0.4642239 -0.370222,0.615763 l -1.717956,1.3452578 c 0,0 -0.702177,0.5401484 -1.68,1.1652083 -0.445822,0.2181667 -0.806711,0.3126849 -1.176933,0.3126849 -0.787733,0 -1.281156,-0.3030781 -1.508889,-0.8243229 -0.03827,-0.094518 -0.06658,-0.1989531 -0.0952,-0.2934713 l 4.404089,-2.975 C 49.317831,5.441399 49.308498,4.8352427 49.222942,4.5318547 48.938276,3.5845031 48.083964,2.873912 46.669964,2.873912 c -2.638844,0 -4.451688,2.2455052 -4.451688,5.438362 0,0.2178567 0.0096,0.4261067 0.03795,0.6250599 l -1.252844,0.8813437 c -0.246711,0.1515391 -0.597956,0.2841744 -0.816356,0.2841744 -0.379555,0 -0.541022,-0.2937812 -0.417511,-0.9284478 L 41.40192,0.04115417 39.361342,0.02225052 38.544987,4.5699719 c -0.03796,0.1893463 -0.1232,0.3693958 -0.256045,0.5113281 l -2.249644,2.3685338 c 0.05693,-0.3882994 0.08555,-0.8051093 0.08555,-1.2408229 0,-1.9235234 -0.892266,-3.3443958 -2.391822,-3.3443958 -1.452267,0 -2.534311,1.2219193 -2.534311,1.2219193 L 30.629076,2.9972505 H 29.34792 L 28.645431,7.0048234 C 28.616809,7.184563 28.540898,7.3457088 28.417698,7.4783443 L 27.10792,9.0225552 C 26.747031,9.4111646 26.367476,9.8942922 26.177698,9.903899 25.835787,9.96061 25.683964,9.837581 25.797831,9.2026047 l 0.522045,-2.8990755 c 0.408177,-2.2926094 -0.294,-3.4485209 -2.268312,-3.4485209 -1.176933,0 -2.562622,1.3170573 -2.562622,1.3170573 -0.294311,-0.8624401 -1.015778,-1.3170573 -2.107155,-1.3170573 -1.195911,0 -2.487023,1.3926719 -2.487023,1.3926719 L 16.363387,3.0065474 H 15.062942 L 14.39872,6.7962635 C 14.370098,6.976313 14.294187,7.1374588 14.170987,7.2700943 L 12.680764,9.032162 c -0.360888,0.3886094 -0.740444,0.871737 -0.930222,0.8810338 -0.3416,0.057021 -0.493733,-0.066318 -0.379555,-0.7009843 L 12.50032,3.0065474 h -2.059556 l -0.332266,1.8286953 c -0.0476,0.2367604 -0.1518224,0.464224 -0.3132891,0.6439635 L 6.7864533,8.9469406 C 6.0080533,9.7805604 5.0305422,9.903899 4.83112,9.9131958 H 2.7049867 L 7.5362311,4.4562401 7.7829422,2.978037 H 1.5756533 L 1.2813422,4.6362896 H 4.8880533 L 0.22792,10.093245 -1.2444444e-4,11.637456 c 0,0 4.36613334444,0.01921 4.44204444444,0 1.2814667,0 2.4204444,-1.127401 2.8759111,-1.591625 L 9.6433867,7.3079016 9.2258756,9.6101177 c -0.266,1.4967973 0.3129777,2.2073883 1.5471554,2.1791873 0.759111,-0.01921 1.281156,-0.521245 1.8032,-1.04218 l 1.404667,-1.6390385 -0.465111,2.6431015 h 2.059866 l 0.9016,-5.182388 c 0.113867,-0.6442734 0.939556,-1.7335573 1.803511,-1.7335573 0.911245,0 1.347734,0.4450104 1.138978,1.6672396 l -0.920889,5.2394087 h 2.040889 l 0.987156,-5.5709973 c 0.05693,-0.3693958 0.721155,-1.4115755 1.642044,-1.4115755 0.958534,0 1.271822,0.5209349 1.063067,1.7431641 l -0.569645,3.0980286 c -0.265688,1.4971071 0.313289,2.2076981 1.547156,2.1791871 0.759422,-0.0189 1.281467,-0.520934 1.803511,-1.042179 l 1.214889,-1.4211825 -0.427156,2.4348515 -0.493733,2.813854 h 2.059867 l 0.664222,-3.827523 c 0.284667,0.360099 0.683511,0.65388 1.176933,0.805419 0.113867,0.03781 0.227734,0.06632 0.351245,0.08522 1.328755,0.06632 2.515333,-0.577955 3.568755,-1.676846 l 0.0096,-0.00961 2.989778,-3.0887317 -0.484089,2.7004323 c -0.265689,1.4967974 0.303644,2.1788774 1.547155,2.1884844 0.806711,0 1.556489,-0.397906 2.344222,-0.928448 l 1.044089,-0.748708 c 0.01898,0.03812 0.03796,0.08553 0.05693,0.123338 0.474755,0.918842 1.348044,1.525308 2.638844,1.534915 h 0.0093 c 1.357378,0 2.686134,-1.279251 3.454889,-1.8190892 0.199423,-0.1422422 0.939867,-0.7391016 1.736934,-1.383375 L 49.906371,11.73228 h 2.059556 L 52.86792,6.5498963 c 0.113867,-0.6442734 0.939556,-1.7338671 1.8032,-1.7338671 0.332267,0 0.597956,0.057021 0.797378,0.1896562 z\" />\n                            <g transform=\"translate(10.577778,-0.309896)\">\n                                <path d=\"m 1.0778133,2.4638268 c 0.6835111,0 1.3287556,-0.5401484 1.4332889,-1.2033255 C 2.6153244,0.59732422 2.1502133,0.05748568 1.4670133,0.04787891 c -0.68351108,0 -1.32875552,0.54014843 -1.43328886,1.20332549 -0.11386666,0.672474 0.35124445,1.2126224 1.04408886,1.2126224\" />\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:    '#A6d71c',\n        secondary:  '#3C932A',\n        tertiary:   '#6CC62E',\n        quaternary: '#278D30'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:    '#333030',\n        secondary:  '#333030',\n        tertiary:   '#ffffff',\n        quaternary: '#333030'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:    '#FFFFFF',\n        secondary:  '#FFFFFF',\n        tertiary:   '#000000',\n        quaternary: '#FFFFFF'\n    }\n};\n\nexport function PayuLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary, tertiary, quaternary } = getLogoColors(LOGO.P24, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.P24 }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 385.6 192.4\"  width=\"70\" height=\"32\" >\n                        <style type=\"text/css\" />\n                        <g>\n                            <path\n                                fill={ primary } d=\"M382.2,40.3l-17.1,0c-1.9,0-3.4-1.5-3.4-3.4l0-17.3c0-1.9,1.5-3.4,3.4-3.4l17.1,0c1.9,0,3.4,1.5,3.4,3.4\n                            l0,17.3C385.6,38.8,384.1,40.3,382.2,40.3\" />\n                            <path\n                                fill={ primary } d=\"M359.5,16.3l-11.6,0c-1.3,0-2.3-1-2.3-2.3l0-11.7c0-1.3,1-2.3,2.3-2.3l11.6,0c1.3,0,2.3,1,2.3,2.3l0,11.7\n                            C361.8,15.3,360.8,16.3,359.5,16.3\" />\n                            <g>\n                                <g>\n                                    <path\n                                        fill={ primary } d=\"M178.3,192.4c-3.9,0-5.1-2.1-5.8-5.6l-0.3-1.5c-0.3-1.6-0.5-3.3,0.4-4.6c0.9-1.2,2.5-1.5,4.9-1.7\n                                  c12.1-1.2,16.2-6.8,20.2-19.5c-1.9,0.6-4.2,1-6.7,1c-13.3,0-16.8-9.2-19.8-20.4l-15.9-58.3c-0.5-2-0.9-4,0.2-5.3\n                                  c1-1.3,3-1.5,5.1-1.5h1.3c5,0,6.9,1.5,8.2,6.3l15.8,57.8c2,7.2,4.1,8.4,9.2,8.4c4.2,0,6.6-1.3,8.4-8.4l13.9-57.8\n                                  c1.1-4.8,3.1-6.3,8.1-6.3h1.5c2,0,4,0.2,5.1,1.5c1.1,1.3,0.8,3.3,0.3,5.3L213,158.9c-5.7,22.6-15.3,32.3-33.3,33.5\n                                  C179.2,192.4,178.7,192.4,178.3,192.4 M113.5,160.6c-21,0-32.6-9.3-32.6-26.2c0-17.4,11.2-25.5,35.3-25.5h18.7v-9\n                                  c0-10.1-6.1-14.2-20.9-14.2c-8.3,0-15.8,1.2-18.2,1.8c-1,0.2-1.8,0.4-2.6,0.4c-1.5,0-2.6-0.5-3.3-1.6c-0.6-0.9-0.9-2.2-0.9-4\n                                  v-1.3c0-4.7,1.7-5.8,5.9-6.7c2.3-0.5,8.5-1.7,18.3-1.7c24.4,0,36.3,9,36.3,27.4V133C149.6,152.1,138.5,160.6,113.5,160.6\n                                  M116.4,120.8c-14.9,0-20.7,3.8-20.7,13.5c0,8.9,5.8,13.2,17.7,13.2c18,0,21.6-5.5,21.6-15v-11.7H116.4 M294.3,160.5\n                                  L294.3,160.5h-0.2c-21.8,0-37.1-6.6-45.1-19.1c-4.1-6.4-6.2-14.4-6.2-23.8v-12.8V81.4V59.2c0-9.4,3.9-11.2,14.2-11.2h3.3\n                                  c10.4,0,14.2,1.7,14.2,11.2v22.1l0,0.1v4.8c0,0.2,0,0.3,0,0.5v30.9c0,3.8,0.7,6.8,2.2,9.1c2.8,4.4,8.4,6.3,17.4,6.3\n                                  c9,0,14.6-2,17.4-6.3c1.5-2.3,2.2-5.3,2.2-9.1V86.8c0-0.2,0-0.3,0-0.5v-4.8l0-0.1V59.2c0-9.4,3.9-11.2,14.2-11.2h1.7l0,20\n                                  c0,2.5,2,4.5,4.5,4.5l11.3,0v8.8v23.4v12.8c0,9.4-2.1,17.4-6.2,23.8C331.5,153.9,316.1,160.5,294.3,160.5 M8.4,159.1H6.8\n                                  c-5.1,0-6.8-1.6-6.8-6.8V67.2C0,53.9,5.9,48,19.2,48H44c25.5,0,37.4,11.3,37.4,35.6c0,24.3-11.9,35.6-37.4,35.6H15.2v33.1\n                                  C15.2,157.5,13.6,159.1,8.4,159.1 M22,62.4c-5,0-6.8,1.8-6.8,6.8V105H44c18.7,0,22.2-7.5,22.2-21.4c0-17.8-8.2-21.2-22.2-21.2\n                                  H22\" />\n                                    <g >\n                                \n                                        <linearGradient id=\"SVGID_3_\" gradientUnits=\"userSpaceOnUse\" x1=\"-487.0462\" y1=\"484.3289\" x2=\"-486.0462\" y2=\"484.3289\" gradientTransform=\"matrix(0 146.8947 146.8947 0 -70972.5312 71622.9766)\">\n                                            <stop  offset=\"0\" stop-color={ primary } />\n                                            <stop  offset=\"1\" stop-color={ secondary } />\n                                        </linearGradient>\n                                        <path\n                                            style=\"fill:url(#SVGID_3_)\" d=\"M178.3,192.4c-3.9,0-5.1-2.1-5.8-5.6l-0.3-1.5c-0.3-1.6-0.5-3.3,0.4-4.6c0.9-1.2,2.5-1.5,4.9-1.7\n                                  c12.1-1.2,16.2-6.8,20.2-19.5c-1.9,0.6-4.2,1-6.7,1c-13.3,0-16.8-9.2-19.8-20.4l-15.9-58.3c-0.5-2-0.9-4,0.2-5.3\n                                  c1-1.3,3-1.5,5.1-1.5h1.3c5,0,6.9,1.5,8.2,6.3l15.8,57.8c2,7.2,4.1,8.4,9.2,8.4c4.2,0,6.6-1.3,8.4-8.4l13.9-57.8\n                                  c1.1-4.8,3.1-6.3,8.1-6.3h1.5c2,0,4,0.2,5.1,1.5c1.1,1.3,0.8,3.3,0.3,5.3L213,158.9c-5.7,22.6-15.3,32.3-33.3,33.5\n                                  C179.2,192.4,178.7,192.4,178.3,192.4 M113.5,160.6c-21,0-32.6-9.3-32.6-26.2c0-17.4,11.2-25.5,35.3-25.5h18.7v-9\n                                  c0-10.1-6.1-14.2-20.9-14.2c-8.3,0-15.8,1.2-18.2,1.8c-1,0.2-1.8,0.4-2.6,0.4c-1.5,0-2.6-0.5-3.3-1.6c-0.6-0.9-0.9-2.2-0.9-4\n                                  v-1.3c0-4.7,1.7-5.8,5.9-6.7c2.3-0.5,8.5-1.7,18.3-1.7c24.4,0,36.3,9,36.3,27.4V133C149.6,152.1,138.5,160.6,113.5,160.6\n                                  M116.4,120.8c-14.9,0-20.7,3.8-20.7,13.5c0,8.9,5.8,13.2,17.7,13.2c18,0,21.6-5.5,21.6-15v-11.7H116.4 M294.3,160.5\n                                  L294.3,160.5h-0.2c-21.8,0-37.1-6.6-45.1-19.1c-4.1-6.4-6.2-14.4-6.2-23.8v-12.8V81.4V59.2c0-9.4,3.9-11.2,14.2-11.2h3.3\n                                  c10.4,0,14.2,1.7,14.2,11.2v22.1l0,0.1v4.8c0,0.2,0,0.3,0,0.5v30.9c0,3.8,0.7,6.8,2.2,9.1c2.8,4.4,8.4,6.3,17.4,6.3\n                                  c9,0,14.6-2,17.4-6.3c1.5-2.3,2.2-5.3,2.2-9.1V86.8c0-0.2,0-0.3,0-0.5v-4.8l0-0.1V59.2c0-9.4,3.9-11.2,14.2-11.2h1.7l0,20\n                                  c0,2.5,2,4.5,4.5,4.5l11.3,0v8.8v23.4v12.8c0,9.4-2.1,17.4-6.2,23.8C331.5,153.9,316.1,160.5,294.3,160.5 M8.4,159.1H6.8\n                                  c-5.1,0-6.8-1.6-6.8-6.8V67.2C0,53.9,5.9,48,19.2,48H44c25.5,0,37.4,11.3,37.4,35.6c0,24.3-11.9,35.6-37.4,35.6H15.2v33.1\n                                  C15.2,157.5,13.6,159.1,8.4,159.1 M22,62.4c-5,0-6.8,1.8-6.8,6.8V105H44c18.7,0,22.2-7.5,22.2-21.4c0-17.8-8.2-21.2-22.2-21.2\n                                  H22\" />\n                                    </g>\n                                </g>\n                            </g>\n                            <path\n                                fill={ primary } d=\"M357.3,72.6C357.3,72.6,357.3,72.6,357.3,72.6l-11.7,0V59.2c0-9.4-3.9-11.2-14.2-11.2h-1.6l0-3.2\n                            c0-2.5,2-4.5,4.5-4.5l23,0c2.5,0,4.5,2,4.5,4.5l0,23.3C361.8,70.6,359.8,72.6,357.3,72.6\" />\n                            <g>\n                            \n                                <linearGradient id=\"SVGID_4_\" gradientUnits=\"userSpaceOnUse\" x1=\"-487.0462\" y1=\"485.4514\" x2=\"-486.0462\" y2=\"485.4514\" gradientTransform=\"matrix(0 146.8947 146.8947 0 -70972.5312 71622.9766)\">\n                                    <stop  offset=\"0\" stop-color={ tertiary } />\n                                    <stop  offset=\"1\" stop-color={ quaternary } />\n                                </linearGradient>\n                                <path style=\"fill:url(#SVGID_4_)\" d=\"M345.6,72.6l-11.3,0c-2.5,0-4.5-2-4.5-4.5l0-20h1.6c10.4,0,14.2,1.7,14.2,11.2V72.6\" />\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:    '#FFFFFF',\n        secondary:  '#CACCC8',\n        tertiary:   '#2D59A1',\n        quaternary: '#1F3364',\n        quinary:    '#4E4E4E',\n        senary:     '#1B4482'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:    '#000000',\n        secondary:  '#000000',\n        tertiary:   '#FFFFFF',\n        quaternary: '#FFFFFF',\n        quinary:    '#000000',\n        senary:     '#000000'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:    '#FFFFFF',\n        secondary:  '#FFFFFF',\n        tertiary:   '#000000',\n        quaternary: '#000000',\n        quinary:    '#FFFFFF',\n        senary:     '#FFFFFF'\n    }\n};\n\nexport function VerkkopankkiLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary, tertiary, quaternary, quinary, senary  } = getLogoColors(LOGO.VERKKOPANKKI, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.VERKKOPANKKI }\n            logoColor={ logoColor }\n            render={ () => {\n                return (\n                    <svg width=\"83px\" height=\"32px\" viewBox=\"0 0 83 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <defs>\n                            <path d=\"M6.75,0.0879407407 C3.0375,0.0879407407 0,2.96794074 0,6.48794074 L0,6.48794074 L0,24.5027556 C0,28.0227556 3.0375,30.9027556 6.75,30.9027556 L6.75,30.9027556 L25.75025,30.9027556 C29.4625,30.9027556 32.5,28.0227556 32.5,24.5027556 L32.5,24.5027556 L32.5,6.48794074 C32.5,2.96794074 29.4625,0.0879407407 25.75025,0.0879407407 L25.75025,0.0879407407 L6.75,0.0879407407 Z\" id=\"path-1\" />\n                            <linearGradient x1=\"80.3415915%\" y1=\"2.75555705%\" x2=\"19.6584085%\" y2=\"97.2445831%\" id=\"linearGradient-3\">\n                                <stop stop-color={ primary } offset=\"0%\" />\n                                <stop stop-color={ secondary } offset=\"100%\" />\n                            </linearGradient>\n                            <path d=\"M6.6155,0.206459259 C3.04575,0.206459259 0.125,2.97576296 0.125,6.36041481 L0.125,6.36041481 L0.125,23.6821333 C0.125,27.0670222 3.04575,29.8360889 6.6155,29.8360889 L6.6155,29.8360889 L24.8845,29.8360889 C28.45425,29.8360889 31.375,27.0670222 31.375,23.6821333 L31.375,23.6821333 L31.375,6.36041481 C31.375,2.97576296 28.45425,0.206459259 24.8845,0.206459259 L24.8845,0.206459259 L6.6155,0.206459259 Z\" id=\"path-4\" />\n                            <linearGradient x1=\"6.10096128%\" y1=\"89.4646408%\" x2=\"93.8990386%\" y2=\"10.5354941%\" id=\"linearGradient-6\">\n                                <stop stop-color={ primary } offset=\"0%\" />\n                                <stop stop-color={ secondary } offset=\"100%\" />\n                            </linearGradient>\n                            <polygon id=\"path-7\" points=\"6.5 0.206459259 6.5 10.8330667 0.125 10.8330667 0.125 19.129363 6.5 19.129363 6.5 29.8360889 15.25 29.8360889 15.25 19.129363 31.375 19.129363 31.375 10.8330667 15.25 10.8330667 15.25 0.206459259\" />\n                            <linearGradient x1=\"6.26612168%\" y1=\"82.243184%\" x2=\"78.1338463%\" y2=\"17.635184%\" id=\"linearGradient-9\">\n                                <stop stop-color={ tertiary } offset=\"0%\" />\n                                <stop stop-color={ quaternary } offset=\"100%\" />\n                            </linearGradient>\n                            <polygon id=\"path-10\" points=\"0.106675 0.228266667 3.17249309 0.228266667 3.17249309 6.24822519 0.106675 6.24822519\" />\n                            <polygon id=\"path-12\" points=\"0.2434 0.228266667 3.30921809 0.228266667 3.30921809 6.24822519 0.2434 6.24822519\" />\n                            <polygon id=\"path-14\" points=\"0.0454 0.228266667 3.11102683 0.228266667 3.11102683 6.24822519 0.0454 6.24822519\" />\n                            <polygon id=\"path-16\" points=\"0.181875 0.228266667 3.24775183 0.228266667 3.24775183 6.24822519 0.181875 6.24822519\" />\n                            <polygon id=\"path-18\" points=\"0.1455 0.211057778 0.90525 0.211057778 0.90525 1.20969481 0.1455 1.20969481\" />\n                            <polygon id=\"path-20\" points=\"0 31.762963 82.90525 31.762963 82.90525 0.228266667 0 0.228266667\" />\n                        </defs>\n                        <g  stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                            <g  transform=\"translate(-219.000000, -536.000000)\">\n                                <g  transform=\"translate(219.000000, 536.000000)\">\n                                    <g transform=\"translate(0.000000, 0.482844)\">\n                                        <mask fill={ primary }>\n                                            <use href=\"#path-1\" />\n                                        </mask>\n                                        <path d=\"M6.75,0.0879407407 C3.0375,0.0879407407 0,2.96794074 0,6.48794074 L0,6.48794074 L0,24.5027556 C0,28.0227556 3.0375,30.9027556 6.75,30.9027556 L6.75,30.9027556 L25.75025,30.9027556 C29.4625,30.9027556 32.5,28.0227556 32.5,24.5027556 L32.5,24.5027556 L32.5,6.48794074 C32.5,2.96794074 29.4625,0.0879407407 25.75025,0.0879407407 L25.75025,0.0879407407 L6.75,0.0879407407 Z\" fill=\"url(#linearGradient-3)\" mask=\"url(#mask-2)\" />\n                                    </g>\n                                    <g transform=\"translate(0.500000, 0.956919)\">\n                                        <mask  fill={ primary }>\n                                            <use href=\"#path-4\" />\n                                        </mask>\n                                        <path d=\"M6.6155,0.206459259 C3.04575,0.206459259 0.125,2.97576296 0.125,6.36041481 L0.125,6.36041481 L0.125,23.6821333 C0.125,27.0670222 3.04575,29.8360889 6.6155,29.8360889 L6.6155,29.8360889 L24.8845,29.8360889 C28.45425,29.8360889 31.375,27.0670222 31.375,23.6821333 L31.375,23.6821333 L31.375,6.36041481 C31.375,2.97576296 28.45425,0.206459259 24.8845,0.206459259 L24.8845,0.206459259 L6.6155,0.206459259 Z\" fill=\"url(#linearGradient-6)\" mask=\"url(#mask-5)\" />\n                                    </g>\n                                    <g  transform=\"translate(0.500000, 0.956919)\">\n                                        <mask id=\"mask-8\" fill={ primary }>\n                                            <use href=\"#path-7\" />\n                                        </mask>\n                                        <polygon id=\"Fill-7\" fill=\"url(#linearGradient-9)\" mask=\"url(#mask-8)\" points=\"6.5 0.206459259 6.5 10.8330667 0.125 10.8330667 0.125 19.129363 6.5 19.129363 6.5 29.8360889 15.25 29.8360889 15.25 19.129363 31.375 19.129363 31.375 10.8330667 15.25 10.8330667 15.25 0.206459259\" />\n                                    </g>\n                                    <g  transform=\"translate(0.000000, 0.008770)\">\n                                        <path d=\"M41.86625,0.448142222 L41.4055,0.448142222 C41.353,0.448142222 41.30625,0.480142222 41.2895,0.527312593 L39.593,5.31949037 L37.89675,0.527312593 C37.88,0.480142222 37.83325,0.448142222 37.7805,0.448142222 L37.312,0.448142222 C37.2725,0.448142222 37.2355,0.466157037 37.2125,0.496734815 C37.1895,0.527075556 37.1835,0.566186667 37.196,0.601505185 L39.18525,6.16926815 C39.202,6.21643852 39.24875,6.24820148 39.30125,6.24820148 L39.877,6.24820148 C39.9295,6.24820148 39.97625,6.21643852 39.993,6.16926815 L41.98225,0.601505185 C41.995,0.566186667 41.9887546,0.527075556 41.96575,0.496734815 C41.94275,0.466157037 41.90575,0.448142222 41.86625,0.448142222\" fill={ quinary } />\n                                        <path d=\"M42.770925,3.87662222 C42.776925,3.51656296 42.812175,3.23591111 42.875675,3.04106667 C42.940925,2.84148148 43.045425,2.7058963 43.194675,2.62648889 C43.352175,2.54305185 43.589175,2.50085926 43.899175,2.50085926 C44.163925,2.50085926 44.371675,2.52764444 44.515675,2.58026667 C44.645425,2.62767407 44.736675,2.70684444 44.795175,2.82228148 C44.858175,2.94625185 44.890175,3.12853333 44.890175,3.3632 C44.890175,3.5634963 44.845925,3.69884444 44.758675,3.76616296 C44.663925,3.83964444 44.498675,3.87662222 44.267925,3.87662222 L42.770925,3.87662222 Z M45.209425,4.16983704 C45.430425,3.99845926 45.542675,3.72681481 45.542675,3.3632 C45.542675,3.01238519 45.483675,2.72865185 45.366925,2.52005926 C45.245425,2.30364444 45.058675,2.14767407 44.811175,2.05641481 C44.578175,1.97084444 44.271425,1.92722963 43.899175,1.92722963 C43.455925,1.92722963 43.099425,1.99312593 42.840175,2.12278519 C42.569425,2.25742222 42.372675,2.48995556 42.255175,2.81374815 C42.143675,3.12047407 42.087175,3.55306667 42.087175,4.09896296 C42.087175,4.64035556 42.140925,5.07105185 42.246925,5.37896296 C42.358175,5.70417778 42.548675,5.94168889 42.813175,6.08462222 C43.068925,6.22305185 43.426425,6.29345185 43.876175,6.29345185 C44.339425,6.29345185 44.832675,6.26500741 45.341925,6.2093037 C45.403675,6.20266667 45.450425,6.15312593 45.450425,6.09386667 L45.450425,5.82838519 C45.450425,5.76438519 45.395425,5.71223704 45.327925,5.71223704 L43.975925,5.71223704 C43.640425,5.71223704 43.385175,5.66767407 43.217675,5.57925926 C43.057675,5.49463704 42.949425,5.36260741 42.886925,5.17511111 C42.826425,4.99377778 42.790425,4.74014815 42.780175,4.41991111 L44.298675,4.41991111 C44.689925,4.41991111 44.996175,4.33576296 45.209425,4.16983704 L45.209425,4.16983704 Z\" fill={ quinary } />\n                                        <path d=\"M48.8798,1.97755259 C48.7618,1.94413037 48.6158,1.92730074 48.4458,1.92730074 C48.1323,1.92730074 47.8433,2.00196741 47.58705,2.14893037 C47.40355,2.25441185 47.2248,2.39118222 47.0538,2.55734519 L46.97705,2.0716563 C46.96805,2.01476741 46.9163,1.97257481 46.8558,1.97257481 L46.52555,1.97257481 C46.4578,1.97257481 46.40305,2.02472296 46.40305,2.08896 L46.40305,6.1318637 C46.40305,6.19610074 46.4578,6.24824889 46.52555,6.24824889 L46.97105,6.24824889 C47.0388,6.24824889 47.09355,6.19610074 47.09355,6.1318637 L47.09355,3.20730074 C47.32605,2.99610074 47.5388,2.84178963 47.7263,2.74934519 C47.9178,2.65476741 48.1468,2.60712296 48.40705,2.60712296 C48.5178,2.60712296 48.65755,2.62181926 48.82255,2.65073778 C48.85805,2.65713778 48.8953,2.64789333 48.9233,2.62584889 C48.95105,2.60380444 48.96755,2.57109333 48.96755,2.53648593 L48.96755,2.08896 C48.96755,2.03752296 48.9318,1.99224889 48.8798,1.97755259\" fill={ quinary } />\n                                        <g transform=\"translate(49.500000, 0.000000)\">\n                                            <mask id=\"mask-11\" fill={ primary }>\n                                                <use href=\"#path-10\" />\n                                            </mask>\n                                            <path d=\"M1.301675,3.9731437 L3.039925,2.16715852 C3.072675,2.13302519 3.080925,2.08395852 3.061425,2.04200296 C3.041925,2.00004741 2.997925,1.97278815 2.949425,1.97278815 L2.373425,1.97278815 C2.338925,1.97278815 2.306425,1.98629926 2.283175,2.01047704 L0.797175,3.54979556 L0.797175,0.344343704 C0.797175,0.280343704 0.742425,0.228195556 0.674675,0.228195556 L0.229175,0.228195556 C0.161425,0.228195556 0.106675,0.280343704 0.106675,0.344343704 L0.106675,6.13184 C0.106675,6.19607704 0.161425,6.24822519 0.229175,6.24822519 L0.674675,6.24822519 C0.742425,6.24822519 0.797175,6.19607704 0.797175,6.13184 L0.797175,4.41948444 L2.370925,6.20650667 C2.394175,6.23281778 2.428675,6.24822519 2.464925,6.24822519 L3.049925,6.24822519 C3.097675,6.24822519 3.140675,6.22191407 3.160925,6.18090667 C3.181175,6.14037333 3.174425,6.09178074 3.143925,6.05741037 L1.301675,3.9731437 Z\" fill={ quinary } mask=\"url(#mask-11)\" />\n                                        </g>\n                                        <g transform=\"translate(53.250000, 0.000000)\">\n                                            <mask id=\"mask-13\" fill={ primary }>\n                                                <use href=\"#path-12\" />\n                                            </mask>\n                                            <path d=\"M1.4384,3.9731437 L3.1764,2.16715852 C3.20915,2.13302519 3.2174,2.08395852 3.1979,2.04200296 C3.1784,2.00004741 3.1344,1.97278815 3.0859,1.97278815 L2.51015,1.97278815 C2.47565,1.97278815 2.44315,1.98629926 2.4199,2.01047704 L0.9339,3.54979556 L0.9339,0.344343704 C0.9339,0.280343704 0.87915,0.228195556 0.8114,0.228195556 L0.3659,0.228195556 C0.29815,0.228195556 0.2434,0.280343704 0.2434,0.344343704 L0.2434,6.13184 C0.2434,6.19607704 0.29815,6.24822519 0.3659,6.24822519 L0.8114,6.24822519 C0.87915,6.24822519 0.9339,6.19607704 0.9339,6.13184 L0.9339,4.41948444 L2.5074,6.20650667 C2.53065,6.23281778 2.56515,6.24822519 2.6014,6.24822519 L3.18665,6.24822519 C3.2344,6.24822519 3.2774,6.22191407 3.29765,6.18090667 C3.3179,6.14037333 3.31115,6.09178074 3.28065,6.05741037 L1.4384,3.9731437 Z\" fill={ quinary } mask=\"url(#mask-13)\" />\n                                        </g>\n                                        <g transform=\"translate(74.500000, 0.000000)\">\n                                            <mask id=\"mask-15\" fill={ primary }>\n                                                <use href=\"#path-14\" />\n                                            </mask>\n                                            <path d=\"M1.2404,3.9731437 L2.9784,2.16715852 C3.01115,2.13302519 3.0194,2.08395852 2.9999,2.04200296 C2.9804,2.00004741 2.9364,1.97278815 2.8879,1.97278815 L2.3119,1.97278815 C2.2774,1.97278815 2.2449,1.98629926 2.22165,2.01047704 L0.7359,3.54955852 L0.7359,0.344343704 C0.7359,0.280343704 0.68115,0.228195556 0.6134,0.228195556 L0.1679,0.228195556 C0.10015,0.228195556 0.0454,0.280343704 0.0454,0.344343704 L0.0454,6.13184 C0.0454,6.19607704 0.10015,6.24822519 0.1679,6.24822519 L0.6134,6.24822519 C0.68115,6.24822519 0.7359,6.19607704 0.7359,6.13184 L0.7359,4.41995852 L2.3094,6.20650667 C2.33265,6.23281778 2.36715,6.24822519 2.4034,6.24822519 L2.9884,6.24822519 C3.03615,6.24822519 3.07915,6.22191407 3.09965,6.18090667 C3.11965,6.14037333 3.1129,6.09178074 3.0824,6.05741037 L1.2404,3.9731437 Z\"  fill={ quinary } mask=\"url(#mask-15)\" />\n                                        </g>\n                                        <g transform=\"translate(78.250000, 0.000000)\">\n                                            <mask id=\"mask-17\" fill={ primary }>\n                                                <use href=\"#path-16\" />\n                                            </mask>\n                                            <path d=\"M1.377125,3.9731437 L3.115125,2.16715852 C3.147875,2.13302519 3.156125,2.08395852 3.136625,2.04200296 C3.117125,2.00004741 3.073125,1.97278815 3.024625,1.97278815 L2.448625,1.97278815 C2.414125,1.97278815 2.381625,1.98629926 2.358375,2.01047704 L0.872375,3.54979556 L0.872375,0.344343704 C0.872375,0.280343704 0.817625,0.228195556 0.749875,0.228195556 L0.304375,0.228195556 C0.236625,0.228195556 0.181875,0.280343704 0.181875,0.344343704 L0.181875,6.13184 C0.181875,6.19607704 0.236625,6.24822519 0.304375,6.24822519 L0.749875,6.24822519 C0.817625,6.24822519 0.872375,6.19607704 0.872375,6.13184 L0.872375,4.41948444 L2.446125,6.20650667 C2.469375,6.23281778 2.503875,6.24822519 2.540125,6.24822519 L3.125125,6.24822519 C3.172875,6.24822519 3.215875,6.22191407 3.236375,6.18090667 C3.256375,6.14037333 3.249625,6.09178074 3.219125,6.05741037 L1.377125,3.9731437 Z\" fill={ quinary } mask=\"url(#mask-17)\" />\n                                        </g>\n                                        <path d=\"M58.732575,5.68936296 C58.439825,5.68936296 58.209325,5.65238519 58.047825,5.57937778 C57.899325,5.51253333 57.782075,5.37078519 57.699325,5.15863704 C57.610075,4.9298963 57.564825,4.576 57.564825,4.10642963 C57.564825,3.63733333 57.610075,3.28201481 57.699325,3.05042963 C57.781825,2.83685926 57.898825,2.69534815 58.046575,2.63063704 C58.209075,2.55952593 58.439825,2.52373333 58.732575,2.52373333 C59.020325,2.52373333 59.250075,2.55952593 59.415075,2.63063704 C59.565825,2.69582222 59.685075,2.83757037 59.769575,3.05161481 C59.861575,3.28248889 59.907825,3.63733333 59.907825,4.10642963 C59.907825,4.57576296 59.861575,4.92942222 59.769825,5.15768889 C59.685075,5.37007407 59.565075,5.51205926 59.414325,5.57914074 C59.249825,5.65238519 59.020575,5.68936296 58.732575,5.68936296 M59.771825,2.10512593 C59.508075,1.98731852 59.158325,1.92734815 58.732575,1.92734815 C58.306325,1.92734815 57.958325,1.9858963 57.697825,2.1010963 C57.424575,2.22222222 57.215075,2.44835556 57.075325,2.77333333 C56.942075,3.08432593 56.874325,3.5328 56.874325,4.10642963 C56.874325,4.6701037 56.942075,5.11478519 57.075325,5.42814815 C57.214825,5.7554963 57.425075,5.98542222 57.700075,6.11128889 C57.964575,6.23217778 58.311575,6.29357037 58.732575,6.29357037 C59.158575,6.29357037 59.508575,6.23217778 59.772825,6.11128889 C60.048325,5.98518519 60.258325,5.75668148 60.397325,5.43217778 C60.530575,5.12118519 60.598575,4.67508148 60.598575,4.10642963 C60.598575,3.53848889 60.530575,3.09238519 60.397325,2.78068148 C60.258075,2.45617778 60.047825,2.22885926 59.771825,2.10512593\" fill={ quinary } />\n                                        <path d=\"M64.20645,4.09908148 C64.20645,5.1693037 63.87745,5.68936296 63.19995,5.68936296 C62.8272,5.68936296 62.43195,5.5808 62.0247,5.36651852 L62.0247,2.85771852 C62.2282,2.75958519 62.4192,2.67922963 62.59295,2.61902222 C62.7757,2.5554963 62.97995,2.52373333 63.19995,2.52373333 C63.4832,2.52373333 63.7147,2.64557037 63.90745,2.89682963 C64.10595,3.15591111 64.20645,3.56077037 64.20645,4.09908148 M63.2997,1.92734815 C63.0547,1.92734815 62.78745,1.98115556 62.5057,2.08734815 C62.30445,2.16296296 62.12945,2.24284444 61.9832,2.32533333 L61.92195,2.06364444 C61.9097,2.01031111 61.8597,1.97262222 61.80245,1.97262222 L61.4567,1.97262222 C61.38895,1.97262222 61.3342,2.02477037 61.3342,2.08900741 L61.3342,7.9296 C61.3342,7.99383704 61.38895,8.04574815 61.4567,8.04574815 L61.9022,8.04574815 C61.96995,8.04574815 62.0247,7.99383704 62.0247,7.9296 L62.0247,5.96077037 C62.19345,6.04562963 62.3712,6.11721481 62.55545,6.17386667 C62.8122,6.25327407 63.0627,6.29357037 63.2997,6.29357037 C64.35945,6.29357037 64.8972,5.5552 64.8972,4.09908148 C64.8972,3.49985185 64.77145,2.98808889 64.52345,2.57754074 C64.2632,2.14613333 63.85145,1.92734815 63.2997,1.92734815\" fill={ quinary } />\n                                        <path d=\"M67.38835,5.62915556 C66.91085,5.75265185 66.61485,5.74459259 66.3756,5.56325926 C66.2516,5.46915556 66.19135,5.31531852 66.19135,5.0925037 L66.19135,4.90311111 C66.19135,4.69973333 66.25035,4.54234074 66.37235,4.42216296 C66.4921,4.30364444 66.6886,4.23917037 66.95685,4.23016296 L68.2581,4.18204444 L68.2581,5.35348148 L67.9846,5.45042963 C67.8086,5.51253333 67.6081,5.5725037 67.38835,5.62915556 M67.4206,1.90435556 C66.95785,1.90435556 66.46885,1.93801481 65.96735,2.00414815 C65.90685,2.01220741 65.86185,2.06127407 65.86185,2.11911111 L65.86185,2.38459259 C65.86185,2.44882963 65.9166,2.50097778 65.98435,2.50097778 L67.26685,2.50097778 C67.6521,2.50097778 67.9166,2.56379259 68.05385,2.68847407 C68.18935,2.8114963 68.2581,3.00562963 68.2581,3.26447407 L68.2581,3.70962963 L66.8831,3.70962963 C66.4486,3.70962963 66.1066,3.81700741 65.86635,4.02915556 C65.62385,4.2432 65.50085,4.53475556 65.50085,4.89528889 L65.50085,5.16859259 C65.50085,5.51324444 65.61035,5.7901037 65.8256,5.99087407 C66.04035,6.19164444 66.3211,6.29357037 66.66035,6.29357037 C66.8921,6.29357037 67.14185,6.2546963 67.40285,6.17813333 C67.65735,6.10394074 67.88985,6.02168889 68.0931,5.93422222 C68.1851,5.89463704 68.2541,5.86405926 68.30635,5.83988148 L68.3676,6.15324444 C68.37835,6.208 68.42885,6.24805926 68.48785,6.24805926 L68.82585,6.24805926 C68.8936,6.24805926 68.94835,6.19614815 68.94835,6.13191111 L68.94835,3.24195556 C68.94835,2.79585185 68.8216,2.45712593 68.5716,2.23573333 C68.32385,2.016 67.93635,1.90435556 67.4206,1.90435556\" fill={ quinary } />\n                                        <path d=\"M72.05925,1.90440296 C71.77425,1.90440296 71.48575,1.95702519 71.20125,2.0601363 C70.9805,2.14049185 70.7715,2.2393363 70.5785,2.35477333 L70.50425,2.06179556 C70.49125,2.00941037 70.44175,1.97266963 70.38525,1.97266963 L70.055,1.97266963 C69.9875,1.97266963 69.9325,2.02481778 69.9325,2.08881778 L69.9325,6.13195852 C69.9325,6.19595852 69.9875,6.24810667 70.055,6.24810667 L70.5005,6.24810667 C70.568,6.24810667 70.623,6.19595852 70.623,6.13195852 L70.623,2.91536593 C70.86175,2.78926222 71.07525,2.69515852 71.2585,2.63471407 C71.4525,2.57118815 71.6805,2.53895111 71.9365,2.53895111 C72.18875,2.53895111 72.3835,2.61646222 72.53225,2.77646222 C72.68475,2.94049185 72.75875,3.14481778 72.75875,3.40105481 L72.75875,6.13195852 C72.75875,6.19595852 72.81375,6.24810667 72.88125,6.24810667 L73.3265,6.24810667 C73.39425,6.24810667 73.44925,6.19595852 73.44925,6.13195852 L73.44925,3.3555437 C73.44925,2.9561363 73.33025,2.61243259 73.096,2.33462519 C72.855,2.04923259 72.506,1.90440296 72.05925,1.90440296\" fill={ quinary } />\n                                        <path d=\"M82.751875,1.97269333 L82.306375,1.97269333 C82.238625,1.97269333 82.183875,2.02484148 82.183875,2.08884148 L82.183875,6.13198222 C82.183875,6.19598222 82.238625,6.24813037 82.306375,6.24813037 L82.751875,6.24813037 C82.819625,6.24813037 82.874375,6.19598222 82.874375,6.13198222 L82.874375,2.08884148 C82.874375,2.02484148 82.819625,1.97269333 82.751875,1.97269333\" fill={ quinary } />\n                                        <g transform=\"translate(82.000000, 0.237037)\">\n                                            <mask id=\"mask-19\" fill={ primary }>\n                                                <use href=\"#path-18\" />\n                                            </mask>\n                                            <path d=\"M0.68275,0.211057778 L0.38325,0.211057778 C0.239,0.211057778 0.1455,0.301368889 0.1455,0.441220741 L0.1455,0.979531852 C0.1455,1.0617837 0.1805,1.11393185 0.21,1.14308741 C0.2405,1.17342815 0.29525,1.20969481 0.38325,1.20969481 L0.68275,1.20969481 C0.78525,1.20969481 0.90525,1.14925037 0.90525,0.979531852 L0.90525,0.441220741 C0.90525,0.271502222 0.78525,0.211057778 0.68275,0.211057778 L0.68275,0.211057778 Z\" fill={ quinary } mask=\"url(#mask-19)\" />\n                                        </g>\n                                        <polygon fill={ senary } points=\"54.410575 25.6368119 53.503075 25.6368119 51.980825 27.2138193 51.980825 23.8924563 51.290325 23.8924563 51.290325 29.9122489 51.980825 29.9122489 51.980825 28.0835081 53.591325 29.9122489 54.496075 29.9122489 52.485575 27.6371674\" />\n                                        <path d=\"M38.2935,12.7641126 L40.91225,12.7261867 L40.91225,12.171283 L38.2935,12.133357 L38.2935,10.654957 C38.2935,10.4489719 38.344,10.2948978 38.4435,10.1967644 C38.5435,10.098157 38.68275,10.0505126 38.86975,10.0505126 L41.235,10.0505126 L41.235,9.48233481 L41.1185,9.47688296 C40.2725,9.43658667 39.47975,9.41596444 38.76225,9.41596444 C38.44075,9.41596444 38.16525,9.51149037 37.9435,9.69969778 C37.7175,9.89146074 37.603,10.1948681 37.603,10.6016237 L37.603,15.2160237 L38.2935,15.2160237 L38.2935,12.7641126 Z\" fill={ senary } />\n                                        <path d=\"M42.21085,10.3483733 C42.24135,10.3787141 42.2961,10.4145067 42.3836,10.4145067 L42.68335,10.4145067 C42.78585,10.4145067 42.9056,10.3540622 42.9056,10.1845807 L42.9056,9.64603259 C42.9056,9.47631407 42.78585,9.41586963 42.68335,9.41586963 L42.3836,9.41586963 C42.23935,9.41586963 42.1461,9.50618074 42.1461,9.64603259 L42.1461,10.1845807 C42.1461,10.2665956 42.1811,10.3189807 42.2106,10.3481363 L42.21085,10.3483733 Z\" fill={ senary } />\n                                        <mask id=\"mask-21\" fill={ primary }>\n                                            <use href=\"#path-20\" />\n                                        </mask>\n                                        <polygon  fill={ senary } mask=\"url(#mask-21)\" points=\"42.1845 15.2158815 42.875 15.2158815 42.875 10.9404444 42.1845 10.9404444\" />\n                                        <path d=\"M47.4611,15.2159763 L47.4611,12.3236504 C47.4611,11.9240059 47.3421,11.5805393 47.10785,11.3027319 C46.86635,11.0171022 46.5176,10.8722726 46.07085,10.8722726 C45.78635,10.8722726 45.4976,10.9246578 45.21335,11.0280059 C44.9921,11.1083615 44.7831,11.2072059 44.59035,11.322643 L44.49335,10.9405393 L43.94435,10.9405393 L43.94435,15.2159763 L44.6346,15.2159763 L44.6346,11.8829985 C44.8736,11.7568948 45.08735,11.6627911 45.2701,11.6028207 C45.46435,11.5388207 45.6926,11.5068207 45.9481,11.5068207 C46.20035,11.5068207 46.39535,11.5843319 46.5441,11.7443319 C46.6966,11.9083615 46.7706,12.1126874 46.7706,12.3689244 L46.7706,15.2159763 L47.4611,15.2159763 Z\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M51.33365,15.2159763 L52.02415,15.2159763 L52.02415,12.3236504 C52.02415,11.9240059 51.90515,11.5805393 51.67115,11.3027319 C51.42965,11.0171022 51.0809,10.8722726 50.63415,10.8722726 C50.34915,10.8722726 50.06065,10.9246578 49.7764,11.0280059 C49.5554,11.1083615 49.3464,11.2072059 49.1534,11.322643 L49.05665,10.9405393 L48.50715,10.9405393 L48.50715,15.2159763 L49.1979,15.2159763 L49.1979,11.8829985 C49.4369,11.7568948 49.65065,11.6627911 49.83365,11.6028207 C50.02715,11.5388207 50.2554,11.5068207 50.5114,11.5068207 C50.76365,11.5068207 50.9584,11.5843319 51.10715,11.7443319 C51.25965,11.9083615 51.33365,12.1126874 51.33365,12.3689244 L51.33365,15.2159763 Z\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <polygon  fill={ senary } mask=\"url(#mask-21)\" points=\"53.07025 15.2158815 53.761 15.2158815 53.761 10.9404444 53.07025 10.9404444\" />\n                                        <path d=\"M53.2697,10.4145778 L53.5692,10.4145778 C53.6717,10.4145778 53.7917,10.3541333 53.7917,10.1844148 L53.7917,9.6461037 C53.7917,9.47638519 53.6717,9.41594074 53.5692,9.41594074 L53.2697,9.41594074 C53.12545,9.41594074 53.03195,9.50625185 53.03195,9.6461037 L53.03195,10.1844148 C53.03195,10.2666667 53.06695,10.3190519 53.0967,10.3482074 C53.1272,10.3785481 53.1817,10.4145778 53.2697,10.4145778\" id=\"Fill-52\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M55.15935,13.1527822 C55.3896,13.3137304 55.7216,13.3952711 56.1461,13.3952711 L56.6991,13.3952711 C56.9451,13.3952711 57.12785,13.4412563 57.24285,13.5318044 C57.3526,13.6180859 57.40585,13.7439526 57.40585,13.9165156 L57.40585,14.1137304 C57.40585,14.3467378 57.34735,14.4984415 57.23135,14.5638637 C57.0951,14.6409007 56.87735,14.6800119 56.5836,14.6800119 L54.82535,14.6800119 L54.82535,15.1588267 L54.9261,15.1761304 C55.0501,15.1972267 55.28985,15.2164267 55.65985,15.2346785 C56.0211,15.2522193 56.3111,15.2614637 56.52235,15.2614637 C56.99485,15.2614637 57.36685,15.1813452 57.6286,15.0234785 C57.90835,14.8549452 58.05035,14.5565156 58.05035,14.1362489 L58.05035,13.8785896 C58.05035,13.5313304 57.93135,13.2580267 57.6966,13.0662637 C57.46735,12.8790044 57.15235,12.7837156 56.76035,12.7837156 L56.19985,12.7837156 C55.9266,12.7837156 55.7246,12.7474489 55.59885,12.6751526 C55.49285,12.6147081 55.43935,12.4812563 55.43935,12.2781156 L55.43935,12.1034193 C55.43935,11.8753896 55.4986,11.717997 55.6161,11.6357452 C55.74485,11.54496 55.95435,11.4989748 56.2381,11.4989748 L57.8966,11.4989748 L57.8966,11.0111526 L57.7936,10.9952711 C57.6266,10.9696711 57.3876,10.9473896 57.08285,10.9293748 C56.77935,10.9118341 56.5161,10.9028267 56.29985,10.9028267 C55.78935,10.9028267 55.42085,10.9971674 55.17335,11.1910637 C54.92235,11.3880415 54.79485,11.6950044 54.79485,12.1034193 L54.79485,12.3082193 C54.79485,12.6998044 54.9176,12.9840119 55.15935,13.1527822\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M61.668375,12.3615763 L61.668375,15.2159763 L62.358875,15.2159763 L62.358875,12.3236504 C62.358875,11.9138133 62.238125,11.5672652 62.000375,11.2939615 C61.756875,11.0140207 61.409875,10.8722726 60.968875,10.8722726 C60.683875,10.8722726 60.394125,10.9246578 60.107625,11.0277689 C59.902625,11.1017244 59.709875,11.1910874 59.532625,11.2944356 L59.532625,9.1961837 L58.841875,9.1961837 L58.841875,15.2159763 L59.532625,15.2159763 L59.532625,11.8829985 C59.771625,11.7571319 59.985125,11.6630281 60.167875,11.6028207 C60.361625,11.5388207 60.590125,11.5068207 60.846125,11.5068207 C61.098375,11.5068207 61.293125,11.5843319 61.441625,11.7440948 C61.594125,11.9085985 61.668375,12.1105541 61.668375,12.3615763\"  fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M41.2896,19.6944356 C41.2896,20.3666726 41.2346,20.874643 41.1261,21.2031763 C41.0241,21.5127467 40.8696,21.7208652 40.66735,21.821843 C40.45385,21.9285096 40.13585,21.9825541 39.72235,21.9825541 C39.2936,21.9825541 38.96785,21.9285096 38.7541,21.821843 C38.5526,21.7211022 38.40235,21.515117 38.3076,21.2093393 C38.20635,20.8829393 38.1551,20.3730726 38.1551,19.6944356 C38.1551,19.0020504 38.2151,18.4784356 38.33335,18.1380504 C38.44535,17.815443 38.6046,17.6018726 38.80685,17.5032652 C39.0211,17.3982578 39.3291,17.3453985 39.72235,17.3453985 C40.13585,17.3453985 40.4541,17.3982578 40.6686,17.5032652 C40.86985,17.6013985 41.02385,17.8116504 41.12585,18.1280948 C41.23435,18.4646874 41.2896,18.9916207 41.2896,19.6944356 M41.01035,16.9474133 C40.6946,16.7957096 40.26135,16.7184356 39.72235,16.7184356 C39.19885,16.7184356 38.77185,16.7957096 38.45385,16.9471763 C38.1241,17.1045689 37.87285,17.4070281 37.70635,17.8460207 C37.5461,18.2684207 37.46485,18.8904059 37.46485,19.6944356 C37.46485,20.4982281 37.54485,21.1149985 37.7026,21.527917 C37.86685,21.9579022 38.11535,22.2501689 38.44085,22.3971319 C38.75285,22.5379319 39.18385,22.609517 39.72235,22.609517 C40.2606,22.609517 40.6916,22.5379319 41.00385,22.3971319 C41.3296,22.2499319 41.57785,21.9576652 41.7421,21.527917 C41.89985,21.1149985 41.97985,20.4982281 41.97985,19.6944356 C41.97985,18.8863763 41.90135,18.263443 41.74635,17.8429393 C41.5851,17.406317 41.3376,17.1048059 41.01035,16.9474133\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M45.212575,18.2203733 C44.927325,18.2203733 44.638825,18.2729956 44.354825,18.3761067 C44.133575,18.4564622 43.924825,18.5553067 43.731825,18.6705067 L43.634825,18.28864 L43.085575,18.28864 L43.085575,22.564077 L43.776325,22.564077 L43.776325,19.2313363 C44.015325,19.1049956 44.228825,19.0108919 44.411825,18.9509215 C44.605575,18.8871585 44.833825,18.8549215 45.089825,18.8549215 C45.342325,18.8549215 45.536825,18.9324326 45.685575,19.0924326 C45.838075,19.2566993 45.912325,19.4610252 45.912325,19.7170252 L45.912325,22.564077 L46.602825,22.564077 L46.602825,19.6717511 C46.602825,19.2723437 46.483825,18.928877 46.249075,18.6508326 C46.007825,18.365203 45.658825,18.2203733 45.212575,18.2203733\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M50.09245,16.7641126 L49.79295,16.7641126 C49.64845,16.7641126 49.55495,16.8544237 49.55495,16.9942756 L49.55495,17.5325867 C49.55495,17.6143644 49.5897,17.6665126 49.61895,17.6959052 L49.61995,17.6968533 C49.65045,17.726957 49.70545,17.7627496 49.79295,17.7627496 L50.09245,17.7627496 C50.19495,17.7627496 50.31495,17.7023052 50.31495,17.5325867 L50.31495,16.9942756 C50.31495,16.824557 50.19495,16.7641126 50.09245,16.7641126\" id=\"Fill-57\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <polygon  fill={ senary } mask=\"url(#mask-21)\" points=\"49.59325 22.5640296 50.284 22.5640296 50.284 18.2885926 49.59325 18.2885926\" />\n                                        <polygon  fill={ senary } mask=\"url(#mask-21)\" points=\"47.71725 22.5640296 48.408 22.5640296 48.408 16.544 47.71725 16.544\" />\n                                        <path d=\"M53.753575,18.2203733 C53.468325,18.2203733 53.179825,18.2729956 52.895825,18.3761067 C52.674575,18.4564622 52.465825,18.5553067 52.272825,18.6705067 L52.175825,18.28864 L51.626575,18.28864 L51.626575,22.564077 L52.317325,22.564077 L52.317325,19.2313363 C52.556325,19.1052326 52.769575,19.0111289 52.952575,18.9509215 C53.146325,18.8871585 53.374575,18.8549215 53.630825,18.8549215 C53.883075,18.8549215 54.077575,18.9324326 54.226325,19.0924326 C54.378825,19.2566993 54.453075,19.4610252 54.453075,19.7170252 L54.453075,22.564077 L55.143575,22.564077 L55.143575,19.6717511 C55.143575,19.2723437 55.024575,18.928877 54.790075,18.6508326 C54.548825,18.365203 54.200075,18.2203733 53.753575,18.2203733\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M58.651775,19.6791704 C58.651775,19.8792296 58.607525,20.0148148 58.520275,20.0821333 C58.425525,20.1556148 58.260275,20.1925926 58.029275,20.1925926 L56.532025,20.1925926 C56.538275,19.8330074 56.573525,19.5523556 56.637025,19.357037 C56.702275,19.1572148 56.806525,19.0218667 56.956025,18.9426963 C57.114025,18.8590222 57.351025,18.8168296 57.660775,18.8168296 C57.925525,18.8168296 58.133025,18.8436148 58.276775,18.896237 C58.406775,18.9438815 58.498025,19.0230519 58.556275,19.1382519 C58.619775,19.2629333 58.651775,19.4452148 58.651775,19.6791704 M59.103275,22.5252741 L59.211525,22.5134222 L59.211525,22.0282074 L57.737525,22.0282074 C57.401775,22.0282074 57.146525,21.9836444 56.979025,21.8952296 C56.818775,21.8106074 56.710775,21.6785778 56.648275,21.4913185 C56.588025,21.3095111 56.552275,21.0558815 56.541775,20.7361185 L58.060275,20.7361185 C58.451025,20.7361185 58.757525,20.6519704 58.970775,20.4858074 C59.191775,20.3146667 59.303775,20.0430222 59.303775,19.6791704 C59.303775,19.3285926 59.244775,19.0446222 59.128275,18.8360296 C59.007025,18.6196148 58.820275,18.4636444 58.572775,18.3723852 C58.339025,18.2868148 58.032275,18.2432 57.660775,18.2432 C57.217775,18.2432 56.861275,18.3090963 56.601275,18.4387556 C56.330525,18.5741037 56.133775,18.8064 56.016775,19.1294815 C55.905275,19.4359704 55.848525,19.868563 55.848525,20.4149333 C55.848525,20.9563259 55.902275,21.3867852 56.008275,21.6949333 C56.119775,22.0203852 56.310525,22.2578963 56.574525,22.4008296 C56.830275,22.5392593 57.188025,22.6094222 57.637525,22.6094222 C58.101025,22.6094222 58.594025,22.5809778 59.103275,22.5252741\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M38.2935,26.6307793 L38.2935,24.7392237 L39.707,24.7392237 C40.294,24.7392237 40.5675,25.0253274 40.5675,25.6392533 C40.5675,25.94432 40.489,26.1901274 40.334,26.3700385 C40.183,26.545683 39.993,26.6307793 39.753,26.6307793 L38.2935,26.6307793 Z M38.2935,27.2195793 L39.7685,27.2195793 C40.061,27.2195793 40.29575,27.3034904 40.4865,27.4755793 C40.6755,27.646483 40.76725,27.87712 40.76725,28.1805274 C40.76725,28.6060089 40.68275,28.8994607 40.51625,29.0528237 C40.349,29.2071348 40.09725,29.285357 39.7685,29.285357 L38.2935,29.285357 L38.2935,27.2195793 Z M40.63425,26.8919941 C40.76925,26.8064237 40.88875,26.6893274 40.99175,26.5416533 C41.158,26.3034311 41.2425,26.0023941 41.2425,25.6470756 C41.2425,24.6429867 40.71425,24.1124978 39.71475,24.1124978 L37.603,24.1124978 L37.603,29.91232 L39.77625,29.91232 C40.313,29.91232 40.7285,29.7857422 41.0115,29.5361422 C41.29725,29.2844089 41.44225,28.8513422 41.44225,28.2487941 C41.44225,27.8166756 41.327,27.4762904 41.0995,27.2380681 C40.95575,27.0873126 40.80025,26.9714015 40.63425,26.8919941 L40.63425,26.8919941 Z\"  fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M44.049475,29.2935111 C43.567225,29.4170074 43.274725,29.4084741 43.036725,29.2276148 C42.912725,29.1337481 42.852725,28.9801481 42.852725,28.7568593 L42.852725,28.5674667 C42.852725,28.3636148 42.911725,28.2064593 43.033475,28.0862815 C43.152975,27.968 43.349475,27.9035259 43.617975,27.8945185 L44.919225,27.8464 L44.919225,29.017837 L44.645225,29.1145481 C44.471975,29.1759407 44.271725,29.2361481 44.049475,29.2935111 M44.081725,25.5687111 C43.617225,25.5687111 43.128225,25.6023704 42.628475,25.6685037 L42.522975,25.6827259 L42.522975,26.1653333 L43.927975,26.1653333 C44.313225,26.1653333 44.577975,26.2281481 44.714975,26.3528296 C44.850475,26.4758519 44.919225,26.6699852 44.919225,26.9288296 L44.919225,27.3739852 L43.544225,27.3739852 C43.109475,27.3739852 42.767475,27.4816 42.527475,27.6935111 C42.284975,27.9073185 42.161975,28.1988741 42.161975,28.5596444 L42.161975,28.8329481 C42.161975,29.1771259 42.271225,29.4537481 42.486475,29.6549926 C42.701475,29.856 42.982475,29.9579259 43.321475,29.9579259 C43.552225,29.9579259 43.801975,29.9190519 44.063975,29.8424889 C44.318475,29.7682963 44.550975,29.6860444 44.754475,29.5985778 C44.846475,29.5589926 44.915225,29.5281778 44.967475,29.504237 L45.047225,29.9121778 L45.609475,29.9121778 L45.609475,26.9063111 C45.609475,26.4602074 45.482725,26.1214815 45.232725,25.8998519 C44.984975,25.6801185 44.597725,25.5687111 44.081725,25.5687111\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M48.907625,25.5687585 C48.622625,25.5687585 48.334125,25.6213807 48.049875,25.7244919 C47.828875,25.8046104 47.620125,25.9034548 47.426875,26.0191289 L47.329875,25.6370252 L46.780625,25.6370252 L46.780625,29.9122252 L47.471375,29.9122252 L47.471375,26.5797215 C47.709125,26.4538548 47.922875,26.3597511 48.107125,26.2990696 C48.300125,26.2355437 48.528125,26.2033067 48.784875,26.2033067 C49.037125,26.2033067 49.231875,26.2808178 49.380625,26.4408178 C49.533125,26.6046104 49.607125,26.8089363 49.607125,27.0654104 L49.607125,29.9122252 L50.297625,29.9122252 L50.297625,27.0198993 C50.297625,26.6204919 50.178625,26.2772622 49.944375,25.9989807 C49.703375,25.7135881 49.354375,25.5687585 48.907625,25.5687585\" fill={ senary } mask=\"url(#mask-21)\" />\n                                        <polygon  fill={ senary } mask=\"url(#mask-21)\" points=\"55.21725 29.9121778 55.908 29.9121778 55.908 25.6369778 55.21725 25.6369778\" />\n                                        <path d=\"M55.716225,24.1124978 L55.416725,24.1124978 C55.272475,24.1124978 55.178975,24.2028089 55.178975,24.3424237 L55.178975,24.8809719 C55.178975,24.9632237 55.213975,25.0153719 55.243475,25.0445274 C55.273975,25.0751052 55.328475,25.1108978 55.416725,25.1108978 L55.716225,25.1108978 C55.818725,25.1108978 55.938725,25.0506904 55.938725,24.8809719 L55.938725,24.3424237 C55.938725,24.1727052 55.818725,24.1124978 55.716225,24.1124978\"  fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M59.166675,25.5687585 C58.881425,25.5687585 58.592925,25.6213807 58.308925,25.7244919 C58.087675,25.8048474 57.878675,25.9036919 57.685675,26.0191289 L57.588675,25.6370252 L57.039675,25.6370252 L57.039675,29.9122252 L57.730425,29.9122252 L57.730425,26.5797215 C57.967675,26.4540919 58.181175,26.3599881 58.365675,26.2990696 C58.559175,26.2355437 58.787175,26.2033067 59.043925,26.2033067 C59.296175,26.2033067 59.490675,26.2808178 59.639425,26.4408178 C59.791925,26.6046104 59.865925,26.8089363 59.865925,27.0654104 L59.865925,29.9122252 L60.556425,29.9122252 L60.556425,27.0198993 C60.556425,26.6204919 60.437425,26.2767881 60.203175,25.9989807 C59.962175,25.7135881 59.613175,25.5687585 59.166675,25.5687585\"  fill={ senary } mask=\"url(#mask-21)\" />\n                                        <path d=\"M62.08805,30.3800889 C62.08805,30.1537185 62.16505,29.9894519 62.32305,29.8778074 C62.49205,29.7581037 62.6943,29.7000296 62.94105,29.7000296 L64.07005,29.7000296 C64.4113,29.7000296 64.65005,29.7550222 64.7798,29.8640593 C64.90705,29.9707259 64.9688,30.1274074 64.9688,30.342163 L64.9688,30.5166222 C64.9688,30.7420444 64.89005,30.9063111 64.7278,31.0179556 C64.55505,31.1367111 64.3028,31.1969185 63.97805,31.1969185 L62.98705,31.1969185 C62.6868,31.1969185 62.4558,31.1454815 62.30055,31.0433185 C62.1573,30.9489778 62.08805,30.7941926 62.08805,30.5697185 L62.08805,30.3800889 Z M64.54655,27.1184593 C64.54655,27.6655407 64.2463,27.9201185 63.60155,27.9201185 L63.13305,27.9201185 C62.5773,27.9201185 62.31855,27.6463407 62.31855,27.0577778 C62.31855,26.7550815 62.3953,26.5367704 62.5463,26.4087704 C62.7018,26.2772148 62.93555,26.2106074 63.24055,26.2106074 L63.6783,26.2106074 C64.27055,26.2106074 64.54655,26.4990815 64.54655,27.1184593 L64.54655,27.1184593 Z M65.62855,25.6293926 L63.3248,25.6293926 C61.9478,25.6293926 61.6588,26.3978667 61.6588,27.0426074 C61.6588,27.3180444 61.72155,27.5721481 61.8453,27.7980444 C61.9318,27.9552 62.05855,28.0865185 62.22355,28.1912889 C61.8153,28.3617185 61.72005,28.6679704 61.72005,28.9161481 C61.72005,29.0702222 61.76205,29.2079407 61.8443,29.3257481 C61.88505,29.3838222 61.9348,29.4359704 61.9928,29.4814815 C61.85355,29.561363 61.73455,29.6623407 61.6378,29.7825185 C61.4938,29.9614815 61.42055,30.1831111 61.42055,30.4407704 L61.42055,30.6379852 C61.42055,31.0037333 61.56005,31.2874667 61.8348,31.481837 C62.0983,31.6683852 62.45505,31.762963 62.89505,31.762963 L64.01605,31.762963 C64.52405,31.762963 64.92255,31.6532148 65.20005,31.4368 C65.4843,31.2146963 65.62855,30.8977778 65.62855,30.4938667 L65.62855,30.3118222 C65.62855,29.9185778 65.50005,29.6168296 65.24705,29.4153481 C64.99955,29.2183704 64.6218,29.1185778 64.1238,29.1185778 L62.6953,29.1185778 C62.59755,29.1185778 62.51655,29.0958222 62.4473,29.049363 C62.41205,29.0251852 62.36455,28.9796741 62.36455,28.8632889 C62.36455,28.6926222 62.4413,28.6312296 62.49905,28.5997037 C62.61005,28.5394963 62.78455,28.5089185 63.01805,28.5089185 L63.64755,28.5089185 C64.1883,28.5089185 64.58855,28.3761778 64.8368,28.1137778 C65.08205,27.8554074 65.2063,27.5358815 65.2063,27.1642074 C65.2063,26.918163 65.1723,26.7121778 65.1053,26.5521778 C65.03605,26.3872 64.95555,26.2665481 64.85905,26.1833481 C64.8503,26.1755259 64.8413,26.1677037 64.83205,26.1601185 L65.62855,26.1124741 L65.62855,25.6293926 Z\" fill={ senary } mask=\"url(#mask-21)\" />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","\n/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:    '#4D4D4F',\n        secondary:  '#000000',\n        tertiary:   '#FF0000',\n        quaternary: '#E83E49',\n        quinary:    '#FF00FF',\n        senary:     '#FFFFFF'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:    '#000000',\n        secondary:  '#000000',\n        tertiary:   '#FFFFFF',\n        quaternary: '#FFFFFF',\n        quinary:    '#FFFFFF',\n        senary:     '#FFFFFF'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:    '#FFFFFF',\n        secondary:  '#FFFFFF',\n        tertiary:   '#000000',\n        quaternary: '#000000',\n        quinary:    '#000000',\n        senary:     '#000000'\n    }\n};\n\nexport function BlikLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary, tertiary, quaternary, quinary, senary  } = getLogoColors(LOGO.BLIK, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.BLIK }\n            render={ () => {\n                return (\n                    <svg width=\"58px\" height=\"30px\" viewBox=\"0 0 58 30\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <defs>\n                            <path d=\"M4.81760131,0 C2.15699346,0 0,2.12049689 0,4.73608696 L0,4.73608696 L0,25.263913 C0,27.8795031 2.15699346,30 4.81760131,30 L4.81760131,30 L53.1823987,30 C55.8430065,30 58,27.8795031 58,25.263913 L58,25.263913 L58,4.73608696 C58,2.12049689 55.8430065,0 53.1823987,0 L53.1823987,0 L4.81760131,0 Z\" id=\"path-1\" />\n                            <linearGradient x1=\"50%\" y1=\"100%\" x2=\"50%\" y2=\"0%\" id=\"linearGradient-3\">\n                                <stop stop-color={ primary } offset=\"0%\" />\n                                <stop stop-color={ secondary } offset=\"100%\" />\n                            </linearGradient>\n                            <radialGradient cx=\"20.3705659%\" cy=\"18.0870534%\" fx=\"20.3705659%\" fy=\"18.0870534%\" r=\"117.639519%\" gradientTransform=\"translate(0.203706,0.180871),scale(0.983106,1.000000),rotate(54.479781),translate(-0.203706,-0.180871)\" id=\"radialGradient-4\">\n                                <stop stop-color={ tertiary } offset=\"0%\" />\n                                <stop stop-color={ quaternary } offset=\"55.9042441%\" />\n                                <stop stop-color={ quinary } offset=\"100%\" />\n                            </radialGradient>\n                            <path d=\"M3.67238562,6.95664596 C5.60913072,6.95664596 7.17892157,5.41322981 7.17892157,3.50925466 C7.17892157,1.60546584 5.60913072,0.0620496894 3.67238562,0.0620496894 C1.73564052,0.0620496894 0.165849673,1.60546584 0.165849673,3.50925466 C0.165849673,5.41322981 1.73564052,6.95664596 3.67238562,6.95664596 Z\" id=\"path-5\" />\n                        </defs>\n                        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                            <g transform=\"translate(-100.000000, -159.000000)\">\n                                <g transform=\"translate(100.000000, 159.000000)\">\n                                    <g>\n                                        <mask id=\"mask-2\" fill=\"white\">\n                                            <use href=\"#path-1\" />\n                                        </mask>\n                                        <g id=\"Clip-2\" />\n                                        <path d=\"M4.81760131,0 C2.15699346,0 0,2.12049689 0,4.73608696 L0,4.73608696 L0,25.263913 C0,27.8795031 2.15699346,30 4.81760131,30 L4.81760131,30 L53.1823987,30 C55.8430065,30 58,27.8795031 58,25.263913 L58,25.263913 L58,4.73608696 C58,2.12049689 55.8430065,0 53.1823987,0 L53.1823987,0 L4.81760131,0 Z\" fill=\"url(#linearGradient-3)\" mask=\"url(#mask-2)\" />\n                                    </g>\n                                    <g transform=\"translate(6.254902, 4.472050)\" fill={ senary }>\n                                        <polygon points=\"17.627451 21.6769565 21.5604575 21.6769565 21.5604575 0.0154658385 17.627451 0.0154658385\" />\n                                        <polygon points=\"24.9248366 21.6769565 28.8578431 21.6769565 28.8578431 7.32913043 24.9248366 7.32913043\" />\n                                        <polygon points=\"46.4852941 21.6770124 40.5751699 14.0838447 46.0114379 7.32918634 41.3676471 7.32918634 36.1552288 13.8822298 36.1552288 0.0155217391 32.2222222 0.0155217391 32.2222222 21.6770124 36.1552288 21.6770124 36.1552288 14.3106149 41.3676471 21.6770124\" />\n                                        <path d=\"M7.60539216,17.9735963 C5.65575817,17.9735963 4.0751634,16.4197453 4.0751634,14.5030994 C4.0751634,12.5864534 5.65575817,11.0326025 7.60539216,11.0326025 C9.55502614,11.0326025 11.1356209,12.5864534 11.1356209,14.5030994 C11.1356209,16.4197453 9.55502614,17.9735963 7.60539216,17.9735963 M7.60539216,7.16614286 C6.3282549,7.16614286 5.12636601,7.4821677 4.0751634,8.03800621 L4.0751634,0.0155217391 L0.142156863,0.0155217391 L0.142156863,14.5030994 C0.142156863,18.5551491 3.48360131,21.8400559 7.60539216,21.8400559 C11.727183,21.8400559 15.0686275,18.5551491 15.0686275,14.5030994 C15.0686275,10.4510497 11.727183,7.16614286 7.60539216,7.16614286\" />\n                                    </g>\n                                    <g transform=\"translate(14.026144, 3.354037)\">\n                                        <mask id=\"mask-6\" fill=\"white\">\n                                            <use href=\"#path-5\" />\n                                        </mask>\n                                        <use fill=\"url(#radialGradient-4)\" href=\"#path-5\" />\n                                        <path d=\"M3.67238562,6.95664596 C5.60913072,6.95664596 7.17892157,5.41322981 7.17892157,3.50925466 C7.17892157,1.60546584 5.60913072,0.0620496894 3.67238562,0.0620496894 C1.73564052,0.0620496894 0.165849673,1.60546584 0.165849673,3.50925466 C0.165849673,5.41322981 1.73564052,6.95664596 3.67238562,6.95664596 Z\" mask=\"url(#mask-6)\" />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","\n/* @flow */\n/** @jsx node */\n\nimport { node, type ComponentNode } from 'jsx-pragmatic/src';\n\nimport { SVGLogo, getLogoColors, type SVGLogoProps } from '../../lib';\nimport { LOGO_COLOR, LOGO } from '../../constants';\nimport { type LogoColorMap } from '../../types';\n\nconst LOGO_COLORS : LogoColorMap = {\n    [ LOGO_COLOR.DEFAULT ]: {\n        primary:    '#020202',\n        secondary:  '#64CC07'\n    },\n    [ LOGO_COLOR.WHITE ]: {\n        primary:    '#000000',\n        secondary:  '#000000'\n    },\n    [ LOGO_COLOR.BLACK ]: {\n        primary:    '#FFFFFF',\n        secondary:  '#FFFFFF'\n    }\n};\n\nexport function TrustlyLogo({ logoColor = LOGO_COLOR.DEFAULT, ...props } : { logoColor? : $Values<typeof LOGO_COLOR> }) : ComponentNode<SVGLogoProps> {\n\n    const { primary, secondary  } = getLogoColors(LOGO.TRUSTLY, LOGO_COLORS, logoColor);\n\n    return (\n        <SVGLogo\n\n            { ...props }\n            name={ LOGO.TRUSTLY }\n            render={ () => {\n                return (\n                    <svg width=\"70px\" height=\"22px\" viewBox=\"0 0 70 22\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" >\n                        <defs>\n                            <polygon id=\"path-1\" points=\"0.0103141832 0.0376094598 8.42702073 0.0376094598 8.42702073 10.4348955 0.0103141832 10.4348955\" />\n                            <polygon id=\"path-3\" points=\"0.0163296552 0.144733127 4.23050511 0.144733127 4.23050511 4.4 0.0163296552 4.4\" />\n                        </defs>\n                        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                            <g id=\"SPB_&amp;_AltPay_NewAssets\" transform=\"translate(-100.000000, -159.000000)\">\n                                <g transform=\"translate(100.000000, 159.000000)\">\n                                    <path d=\"M57.9530181,6.77372667 C58.0233808,6.75539333 58.0971891,6.75631 58.1704534,6.75539333 C58.8242098,6.75667667 59.4772409,6.75502667 60.1309974,6.75631 C60.2972927,6.75906 60.4775518,6.76016 60.6211788,6.85861 C60.7218264,6.93249333 60.7421373,7.06852667 60.7428627,7.18604333 C60.7428627,10.36266 60.7425,13.5390933 60.7428627,16.7153433 C60.7421373,16.84936 60.7318005,16.9985933 60.6360492,17.10181 C60.5343135,17.19916 60.3876036,17.2160267 60.2541321,17.2165767 C59.5459715,17.2160267 58.8374482,17.2176767 58.1294689,17.2158433 C58.0048834,17.2110767 57.863614,17.2141933 57.7655052,17.12491 C57.6782772,17.00666 57.6904275,16.84991 57.6857124,16.7105767 C57.6853497,13.5363433 57.6857124,10.3619267 57.6857124,7.18714333 C57.6715674,7.00857667 57.776386,6.82212667 57.9530181,6.77372667\" fill={ primary } />\n                                    <path d=\"M20.3658109,6.94398833 C20.6247746,6.89118833 20.8913549,6.905855 21.1544896,6.90383833 C21.7431425,6.914655 22.3307073,6.90154646 22.9199041,6.90347167 C23.3788938,6.91813833 23.8380648,6.893205 24.2974171,6.907505 C24.5192047,6.92858833 24.7413549,6.888805 24.9636865,6.91263833 C25.3952927,6.91703833 25.8263549,6.91098833 26.2577798,6.903105 C26.6892047,6.90897167 27.1206295,6.89393833 27.5516917,6.91263833 C27.9025984,6.905855 28.2565881,6.88202167 28.6051373,6.936105 C28.7476762,6.95792167 28.8847746,7.07342167 28.8791528,7.22888833 C28.8838679,7.83682167 28.8787902,8.44438833 28.8818731,9.05232167 C28.8773394,9.138855 28.8913031,9.241705 28.8265622,9.31027167 C28.7513031,9.38727167 28.6374171,9.399555 28.536044,9.401205 C27.8282461,9.403955 27.1202668,9.39918833 26.4128316,9.40322167 C26.2891528,9.39717167 26.1348264,9.45987167 26.1491528,9.60947167 C26.1438938,11.977405 26.1482461,14.3455217 26.146614,16.713455 C26.1408109,16.8502217 26.1272098,17.0097217 26.0086088,17.0982717 C25.8550078,17.2093717 25.6564326,17.2121217 25.4750855,17.216155 C24.7798005,17.2168883 24.0846969,17.216155 23.3894119,17.2165217 C23.2191269,17.2121217 23.0405,17.2223883 22.8812772,17.1510717 C22.7434534,17.0942383 22.7091788,16.9272217 22.7100855,16.792655 C22.7091788,14.411155 22.7120803,12.030205 22.7088161,9.648705 C22.7225984,9.51578833 22.6185052,9.401205 22.4853964,9.40762167 C21.793013,9.391305 21.0989974,9.411105 20.4062513,9.39808833 C20.2586347,9.40432167 20.1059404,9.29322167 20.1188161,9.13262167 C20.1122876,8.510205 20.1153705,7.88797167 20.117728,7.26573833 C20.1090233,7.11338833 20.2181943,6.97332167 20.3658109,6.94398833\" fill={ primary } />\n                                    <path d=\"M53.4974456,8.01104333 C53.9424715,7.94156 54.3849585,7.85392667 54.8314352,7.79471 C54.9973679,7.76427667 55.2260466,7.81377667 55.239285,8.02021 C55.2715648,8.56434333 55.2441813,9.11104333 55.2539741,9.65646 C55.5600881,9.65829333 55.8665648,9.65352667 56.1728601,9.65829333 C56.3115907,9.65719333 56.4323679,9.75637667 56.4913057,9.87866 C56.5622124,10.0280767 56.5790777,10.19766 56.5770829,10.3619267 C56.5758135,10.67946 56.5770829,10.99681 56.5767202,11.3143433 C56.5732746,11.4281933 56.5687409,11.55451 56.4954767,11.64801 C56.4245699,11.7273933 56.3119534,11.73931 56.2125751,11.7385767 C55.9264093,11.7385767 55.6396995,11.73821 55.3535337,11.73821 C55.3528083,12.7615767 55.3522642,13.7851267 55.3540777,14.8084933 C55.344285,14.9426933 55.4356839,15.0653433 55.5551917,15.1161267 C55.7249326,15.1914767 55.9142591,15.17406 56.0946995,15.1615933 C56.1779378,15.2336433 56.1977047,15.3509767 56.2290777,15.45181 C56.3237409,15.85056 56.3737927,16.2601267 56.3931969,16.67006 C56.3953731,16.81966 56.407342,16.9723767 56.3766943,17.1201433 C56.175399,17.2495767 55.922057,17.2609433 55.694285,17.3161267 C54.8791295,17.4462933 53.9821865,17.51211 53.2335855,17.0939267 C52.6318756,16.7661267 52.2800622,16.0811933 52.2671865,15.40176 C52.2548549,14.1668267 52.2622902,12.9318933 52.2671865,11.6967767 C52.0606321,11.6885267 51.8515389,11.7158433 51.6477047,11.67991 C51.4250104,11.6195933 51.3865648,11.3552267 51.3914611,11.15796 C51.394544,10.79496 51.385114,10.43141 51.3959948,10.0685933 C51.3959948,9.88581 51.5135078,9.70119333 51.700658,9.67186 C51.9385855,9.64014333 52.1803212,9.66397667 52.4198808,9.65682667 C52.4229637,9.32261 52.4182487,8.98857667 52.4216943,8.65436 C52.4191554,8.46296 52.5533523,8.30071 52.7118497,8.21179333 C52.9501399,8.07172667 53.2328601,8.06219333 53.4974456,8.01104333\" fill={ primary } />\n                                    <path d=\"M45.7866373,9.817885 C46.6879326,9.40446833 47.6974922,9.330585 48.6745907,9.361935 C49.1888912,9.39255167 49.7160674,9.398785 50.2082435,9.569835 C50.3063523,9.589635 50.3623886,9.67946833 50.3694611,9.77590167 C50.4120777,10.1838183 50.3366373,10.5965017 50.2216632,10.986635 C50.1594611,11.157685 50.1014301,11.3604517 49.9335026,11.4545017 C49.6157824,11.4495517 49.3027772,11.376585 48.9870518,11.3437683 C48.6163782,11.3052683 48.2333731,11.2449517 47.8672332,11.3401017 C47.7156269,11.369435 47.5712746,11.5599183 47.6838912,11.701635 C47.8246166,11.8499517 48.0166632,11.9330017 48.1952902,12.0257683 C48.788114,12.3007683 49.3921813,12.5801683 49.8887098,13.017235 C50.2086062,13.2981017 50.4829845,13.6433183 50.6349534,14.0470183 C50.7404974,14.3112017 50.7829326,14.5959183 50.7970777,14.8791683 C50.800886,15.4038683 50.6969741,15.9511183 50.3821554,16.379935 C49.9855492,16.9328683 49.3201865,17.203835 48.6754974,17.320435 C47.7910674,17.4720517 46.8861451,17.4192517 45.9989948,17.3189683 C45.4518705,17.2403183 44.8960415,17.164235 44.3777513,16.9605517 C44.2990466,16.742385 44.2887098,16.508635 44.2691244,16.2796517 C44.2542539,15.958085 44.2518964,15.633585 44.3106528,15.3164183 C44.3374922,15.1994517 44.3665078,15.064885 44.4716891,14.9930183 C44.5485803,14.974685 44.6252902,15.0100683 44.7009119,15.0251017 C45.2641762,15.1811183 45.8502902,15.2407017 46.4335026,15.2377683 C46.7347202,15.2328183 47.0557047,15.2594017 47.3337098,15.1195183 C47.4880363,15.0482017 47.5480622,14.811335 47.4015337,14.7009683 C47.1779326,14.5084683 46.8885026,14.422485 46.6259119,14.298185 C46.1973886,14.1137517 45.7677772,13.919235 45.3909378,13.6391017 C45.0093834,13.356035 44.6867668,12.9730517 44.5391503,12.512885 C44.3610674,11.952985 44.3661451,11.308385 44.6601088,10.7884517 C44.9089171,10.3429517 45.3341762,10.0281683 45.7866373,9.817885\" fill={ primary } />\n                                    <path d=\"M31.1743912,9.64921833 C31.8377591,9.622635 32.5023964,9.642435 33.1664896,9.63216833 C33.6505052,9.63601833 34.1348834,9.62336833 34.618899,9.63051833 C34.7394948,9.62226833 34.8662565,9.71155167 34.863899,9.84171833 C34.8673446,10.4005183 34.8655311,10.9598683 34.8646244,11.519035 C34.868614,11.6611183 34.7688731,11.8079683 34.6212565,11.817135 C34.1843912,11.838585 33.7371891,11.8222683 33.3121114,11.9438183 C33.0451684,12.0369517 32.772785,12.1731683 32.6070337,12.4131517 C32.4721114,12.613535 32.4383808,12.8628683 32.4391062,13.1001017 C32.4387435,14.276735 32.4391062,15.4533683 32.4387435,16.6300017 C32.4367487,16.783635 32.4218782,16.9510183 32.3232254,17.0760517 C32.2318264,17.1827517 32.085842,17.218135 31.9512824,17.2161183 C31.3094948,17.216485 30.6671632,17.2174017 30.025013,17.2157517 C29.8433031,17.2141017 29.6474482,17.1633183 29.5241321,17.020135 C29.4060751,16.8811683 29.3805052,16.6886683 29.3825,16.5117517 C29.3835881,14.765685 29.381956,13.019985 29.3832254,11.2739183 C29.3828627,10.8616017 29.4829663,10.4183017 29.7907124,10.1266183 C30.1619301,9.779385 30.6860233,9.679835 31.1743912,9.64921833\" fill={ primary } />\n                                    <path d=\"M36.1322047,9.67501333 C36.237386,9.63174667 36.3527228,9.63614667 36.464614,9.63688 C37.0811943,9.63963 37.6985,9.63486333 38.315443,9.63926333 C38.6204689,9.64879667 38.9517902,9.87576333 38.9604948,10.20723 C38.9619456,11.4357467 38.9601321,12.6648133 38.9612202,13.89333 C38.9623083,14.1120467 39.0081891,14.3621133 39.190443,14.50218 C39.4341736,14.6680967 39.8213497,14.61438 39.9794845,14.3522133 C40.0556503,14.2275467 40.0853912,14.0783133 40.0877487,13.9331133 C40.0877487,12.71523 40.0870233,11.4971633 40.0881114,10.27928 C40.0924637,10.11043 40.0908316,9.91939667 40.2056244,9.78299667 C40.2966606,9.66988 40.4486295,9.63926333 40.5864534,9.63724667 C41.2146399,9.63724667 41.8431891,9.63761333 42.4717383,9.63724667 C42.6494585,9.64091333 42.8409611,9.67703 42.9747953,9.80481333 C43.1102617,9.93773 43.1445363,10.13848 43.1452617,10.3214467 C43.1445363,11.8828967 43.144899,13.4441633 43.1452617,15.0057967 C43.1345622,15.4831967 43.0651062,15.9752633 42.8293549,16.3967467 C42.6278782,16.76103 42.2856762,17.04593 41.8867124,17.1594133 C41.5798731,17.2578633 41.2547176,17.2332967 40.9380855,17.23568 L38.5832927,17.23568 C37.9979041,17.22523 37.3807798,17.2974633 36.8331114,17.0402467 C36.3991477,16.8514133 36.0756244,16.4565133 35.9309093,16.0066133 C35.7408575,15.46853 35.7863756,14.89103 35.7820233,14.3307633 C35.7827487,12.9953633 35.7809352,11.6595967 35.7831114,10.3241967 C35.7938109,10.07468 35.8817642,9.77694667 36.1322047,9.67501333\" fill={ primary } />\n                                    <g transform=\"translate(61.476684, 9.598600)\">\n                                        <mask id=\"mask-2\" fill=\"white\">\n                                            <use href=\"#path-1\" />\n                                        </mask>\n                                        <g />\n                                        <path d=\"M0.065738342,0.1661 C0.16511658,0.0570166667 0.323795337,0.0462 0.461619171,0.03905 C1.15599741,0.0383166667 1.85037565,0.0396 2.54475389,0.0386833333 C2.6867487,0.04015 2.83708549,0.0227333333 2.9701943,0.0878166667 C3.18490933,0.192316667 3.34703368,0.393066667 3.42591969,0.618933333 C3.75959845,1.56841667 4.08656736,2.52083333 4.4240544,3.4694 C4.73832902,2.6697 5.05895078,1.8733 5.37485751,1.07451667 C5.46516839,0.8646 5.53081606,0.643133333 5.64306995,0.44385 C5.77055699,0.23595 5.9771114,0.0399666667 6.23335492,0.03905 C6.82182642,0.03905 7.41066062,0.03795 7.99949482,0.0396 C8.13840674,0.0515166667 8.31159326,0.0553666667 8.40299223,0.181133333 C8.44923575,0.281966667 8.42130829,0.4015 8.38286269,0.50105 C7.08876943,3.5761 5.79340674,6.65041667 4.49949482,9.72546667 C4.38252591,10.0419 4.16037565,10.39775 3.79641192,10.4327667 C3.22534974,10.4338667 2.65410622,10.4379 2.08340674,10.43075 C1.94050518,10.42195 1.74156736,10.3906 1.70910622,10.2202833 C1.69641192,10.1097333 1.74555699,10.0059667 1.78472798,9.90641667 C2.11840674,9.10965 2.44900259,8.3116 2.78286269,7.5152 C2.80226684,7.46991667 2.81876943,7.42023333 2.79229275,7.37421667 C1.88428756,5.104 0.976463731,2.8336 0.0682772021,0.563383333 C0.0205829016,0.44 -0.0327331606,0.27885 0.065738342,0.1661\" fill={ primary } mask=\"url(#mask-2)\" />\n                                    </g>\n                                    <path d=\"M5.64392228,6.89753167 C5.66314508,6.26649833 5.63920725,5.636015 5.6616943,5.00534833 C5.70195337,4.226365 6.02275648,3.467915 6.54358549,2.89389833 C7.05679793,2.32043167 7.7651399,1.92864833 8.52117617,1.80764833 C9.37931088,1.662815 10.2893109,1.86649833 11.0049067,2.367915 C11.8978601,2.976765 12.4681969,4.03423167 12.4906839,5.12323167 C12.4926788,5.71539833 12.4906839,6.30738167 12.4914093,6.89954833 C10.2087927,6.898265 7.92653886,6.90303167 5.64392228,6.89753167 M11.3588964,10.277465 C11.3668756,10.3702317 11.2665907,10.410015 11.1904249,10.410015 C10.7760466,10.4222983 10.3607617,10.4002983 9.94656477,10.421565 C9.93042487,10.4928817 9.9159171,10.565115 9.91646114,10.6389983 C9.91827461,11.7628317 9.9159171,12.8870317 9.91754922,14.010865 C9.91428497,14.1353483 9.92843005,14.2629483 9.90177202,14.385965 C9.85788601,14.5005483 9.72278238,14.5175983 9.61723834,14.5199817 C9.30205699,14.5260317 8.98723834,14.5199817 8.67205699,14.522365 C8.49488083,14.5199817 8.30881865,14.541065 8.1436114,14.4620483 C8.12674611,14.3663483 8.11187565,14.269915 8.11187565,14.1727483 C8.11387047,13.0476317 8.11133161,11.9223317 8.11296373,10.797215 C8.11133161,10.685015 8.12166839,10.570615 8.10172021,10.459515 C8.0128601,10.378115 7.87666839,10.4250483 7.7678601,10.4118483 C7.43581347,10.3980983 7.09705699,10.4499817 6.77008808,10.3749983 C6.74143523,10.013465 6.75956995,9.64918167 6.75757513,9.286915 C6.74107254,9.13933167 6.91135751,9.099915 7.02415544,9.104315 C8.3728342,9.103215 9.7216943,9.104315 11.0703731,9.10394833 C11.1779119,9.10229833 11.3400363,9.11788167 11.3565389,9.25354833 C11.3668756,9.594365 11.3625233,9.936465 11.3588964,10.277465 M17.8946477,7.30544833 C17.5986891,7.006615 17.1638187,6.912565 16.7590518,6.90028167 C15.9665648,6.89863167 15.173715,6.90064833 14.3806839,6.89954833 C14.3830415,6.40069833 14.3748808,5.90148167 14.3873938,5.40263167 C14.4019016,4.26138167 14.0348549,3.12123167 13.3660466,2.20218167 C12.6558912,1.21823167 11.607342,0.488565 10.4407358,0.180198333 C9.59565803,-0.0475016667 8.69599482,-0.0590516667 7.84456995,0.144081667 C6.71078756,0.411565 5.67420725,1.07229833 4.9428342,1.98694833 C4.18716062,2.919565 3.76371503,4.11618167 3.75428497,5.32049833 L3.75428497,6.899915 C2.9601658,6.90064833 2.16604663,6.898265 1.37192746,6.90064833 C0.942860104,6.915315 0.468637306,7.025315 0.186823834,7.37969833 C-0.00866839378,7.61693167 -0.0289792746,7.947665 0.0274196891,8.239165 C0.60519171,10.850015 1.18115026,13.4615983 1.75892228,16.0724483 C1.83907772,16.445165 2.04780829,16.802665 2.37640933,17.0013983 C2.64879275,17.1740983 2.97775648,17.2252483 3.29456995,17.2144317 C7.18120207,17.2133317 11.0676528,17.214065 14.9541036,17.2138817 C15.3244145,17.2180983 15.7106839,17.1038817 15.9783523,16.835665 C16.1994145,16.6259317 16.3305285,16.337915 16.3927306,16.0418317 C16.9674197,13.4359317 17.5446477,10.8305817 18.1200622,8.22449833 C18.1929637,7.90549833 18.1302176,7.54249833 17.8946477,7.30544833\" fill={ secondary } />\n                                    <path d=\"M5.15798446,17.6518833 C5.64272539,17.57085 6.15466839,17.66545 6.57666321,17.9208333 C7.1854456,18.2827333 7.59692228,18.9696833 7.60472021,19.68725 C7.62466839,20.1604333 7.47668912,20.6363667 7.19723316,21.0164167 C6.87806218,21.4575167 6.3831658,21.7647833 5.84927979,21.8515 C5.30233679,21.9486667 4.72021244,21.8087833 4.2704715,21.48025 C3.83197409,21.16125 3.51951295,20.6686333 3.4273886,20.12945 C3.32601554,19.5726667 3.45712953,18.97665 3.78482383,18.5174 C4.10472021,18.0594333 4.61031606,17.7408 5.15798446,17.6518833\" fill={ secondary } />\n                                    <g transform=\"translate(10.518135, 17.481933)\">\n                                        <mask id=\"mask-4\" fill=\"white\">\n                                            <use href=\"#path-3\" />\n                                        </mask>\n                                        <g />\n                                        <path d=\"M1.78171762,0.16951 C2.21695078,0.106443333 2.6739456,0.160893333 3.06728756,0.366043333 C3.5901114,0.629126667 3.99632902,1.12027667 4.15228756,1.69007667 C4.31513731,2.27436 4.22210622,2.92904333 3.88806477,3.43559333 C3.57959326,3.91647667 3.07037047,4.26096 2.51182124,4.36271 C1.96342746,4.47124333 1.37495596,4.33961 0.917779793,4.01602667 C0.465862694,3.69702667 0.142520725,3.19542667 0.0494896373,2.64487667 C-0.0529715026,2.07929333 0.0848523316,1.47447667 0.423608808,1.01247667 C0.7455,0.56716 1.24275389,0.25696 1.78171762,0.16951\" fill={ secondary } mask=\"url(#mask-4)\" />\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n                );\n            } }\n        />\n    );\n}\n","/* @flow */\n\nexport * from './logos';\nexport * from './constants';\n"],"sourceRoot":""}